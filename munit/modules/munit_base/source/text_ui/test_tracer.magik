#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit)
def_slotted_exemplar(:test_tracer,
	{
		{ :level, 0 }
	},
	 :base_test_runner )
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_tracer.init(a_stream, _gather keys_and_elements)
	## Init self.

	.level << 0
	>> _super.init(a_stream, _scatter keys_and_elements)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
test_tracer.define_shared_constant(:tab_size, 3, :private)
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.start_test( a_test )

	_self.write_tab_spaces()
	
	.stream.write( "TEST : ")
	.stream.write( a_test )
	.stream.write( %newline )
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.end_test( a_test )

	_super.end_test( a_test )

	_self.write_tab_spaces()
	
	.stream.write( "END TEST")
	.stream.write( %newline )
	.stream.write( %newline )
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.not_run_slow_test( a_test )

	_self.start_test( a_test )
	_self.write_tab_spaces()
	.stream.write( "   Slow test not run !!!" )
	.stream.write( %newline )

	_self.end_test( a_test )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.add_error( a_test_failure )

	.stream.write( %newline )
	.stream.write( a_test_failure.raised_condition() )
	.stream.write( %newline )
	.stream.write( a_test_failure.full_traceback_text())
	.stream.write( %newline )
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.add_failure( a_test_failure )

_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.start_suite( a_suite )
	
	_self.write_tab_spaces()

	"SUITE : ".write_on( .stream )
	.stream.write( a_suite )
	.stream.write( newline_char )

	.level + << 1
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.end_suite( a_suite )

	.level - << 1
	
	_self.write_tab_spaces()
	.stream.write( "END SUITE")
	.stream.write( newline_char )
	.stream.write( newline_char )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.report_assert(a_type,left_operand,an_operator,right_operand,a_message,result?)

	_if result? _then result << "SUCCEED!" _else result << "FAILED!" _endif 

	.level + << 1
	_self.write_tab_spaces()
	
	.stream.write( a_type.write_string.uppercase , " '" )

	.stream.write( left_operand.write_string )

	_if a_type _isnt :assert_raised_condition
	_then 
		.stream.write( " ", an_operator.write_string )
		.stream.write( " " , right_operand.write_string )
	_endif 
	
	.stream.write( "' " )
	
	_if a_message _isnt _unset 
	_then 
		.stream.write( "with message '", a_message , %' )
	_endif 

	.stream.write( " " , result )
	.stream.write( %newline )

	.stream.flush()
	.level -<< 1
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.add_info( info )
	## Write to stream INFO from vector of strings.

	.stream.write( %newline )
	_self.write_tab_spaces()

	.stream.write(%tab , "TEST INFO: ")
	.stream.write(_scatter info)

	.stream.write( %newline )
	.stream.write( %newline )
	
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_tracer.print()

	_if ( count << .test_result.error_count() ) ~= 0
	_then 
		_self.print_failures(  count , " error:" , " errors:" , :errors|()|  )
	_endif

	_if ( count << .test_result.failure_count() ) ~= 0
	_then
		_self.print_failures( count , " failure:" , " failures:" , :failures|()| )
	_endif
	
	 _self.print_footer()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_tracer.print_failures( count , singular , plural , iterator )
	
	_if count = 1
	_then
		.stream.write("There was " + count.write_string + singular  + newline_char )
	_else 
		.stream.write("There were " + count.write_string + plural  + newline_char )
	_endif

	.stream.write( newline_char )
	
	i << 0
	
	_for a_failure _over .test_result.perform_iter( iterator )
	_loop
		i + << 1
		.stream.write( i.write_string +") " +  a_failure.write_string + newline_char )
	_endloop

	.stream.write( newline_char )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_tracer.print_footer()

	_if .test_result.was_successful?()
	_then
		.stream.write("OK")
		.stream.write(" (" + .test_result.run_count().write_string + " tests) [" +
			      .test_result.assert_count().write_string + " assertions]" +
			      newline_char )
	_else
		.stream.write("FAILURES!!!" + newline_char )
		.stream.write("Tests run: " +  .test_result.run_count().write_string +
			        ",  Assertions: "  + .test_result.assert_count().write_string +
			      ",  Failures: " + .test_result.failure_count().write_string +
			      ",  Errors: " + .test_result.error_count().write_string 
			    
			)
	_endif 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_tracer.write_tab_spaces()

	_for i _over 0.upto( .level*_self.tab_size )
	_loop 
		.stream.write( " " )
	_endloop
_endmethod
$










