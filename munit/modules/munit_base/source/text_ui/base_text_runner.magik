#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit)
def_slotted_exemplar(:base_text_runner,
{
	{ :stream, !terminal! , :writable }
},
{:base_test_runner})
$

_pragma(classify_level=basic,topic=MUnit)
_method base_text_runner.new( _optional a_stream , _gather keys_and_elements)
	## Creates a test_runner using the given A_STREAM for all the output.
	## The following KEYS are recognised:
	##
	##   :EXCLUDE_SLOW_TESTS?   Test methods names that includes string "slow"
	##                          are not added to the suite if set to _true.
	## 
	##   :MAX_ERRORS            If number of errors encountered exceeds
	##                          this setting, then the test run is stoped.
	##
	##   :MAX_FAILURES          If number of failures encountered exceeds
	##                          this setting, then the test run is stoped.
	##
	##   :MAX_TESTS             If number of test encountered  exceeds
	##                          this settings, then the test run is stoped.
	##
	##   :MAX_ASSERTIONS        If number of assertions encountered  exceeds
	##                          this settings, then the test run is stoped.
	##    Example :
	##    test_runner.new( !terminal! , :exclude_slow_tests? , _true , :max_tests , 10 , :max_errors , 5 )

	>> _clone.init( a_stream , _scatter keys_and_elements )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method base_text_runner.init( a_stream , _gather keys_and_elements )
	## Init self with output !A_STREAM! and properties
	## KEYS_AND_ELEMENTS.

	.stream  << a_stream.default( !terminal! )
	_self.init_properties( _scatter keys_and_elements )
	
	>> _self 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method base_text_runner.run( a_test )
	##

	_self.kill_test_thread()
	_self.run_engine( _thisthread.high_background_priority , :int!run|()| , a_test )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method base_text_runner.int!run( a_test )
	##

	.stream.write( newline_char )
	run_time << _self.run_bare( a_test )

	# write time
	.stream.write( newline_char )
	time << time_interval.new( 0 , (run_time*1000).floor )
	.stream.write( newline_char )
	.stream.write( "Time: ") 
	time.write_on( .stream , 5 )
	.stream.write( newline_char ) 

	# print results 
	_self.print()

	# emulate_magik_prompt
	.stream.write( newline_char )
	_if .stream _is !terminal! _then .stream.write((magik_rep.prompt_generator)(_unset)) _endif 
	.stream.flush()
_endmethod
$


