#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit)
##
## A magik prompt tool to run tests.
##
## Example:
## test_runner.run( simple_test.suite() ) to run test suite or
## test_runner.run( simple_test.new( "test_equals" ) to run one test.      
##
## Test runner expects test_case or test_suite as argument.
## Test runner prints a trace as the tests are executed followed by a
## summary at the end.
##
## If needed you can stop test executions by test_runner.stop() that will
## give you full report of erorrs and failures or 
## test_runner.kill_run_thread() that will finish execution
## without any summary.
##
## Can be used as singleton.
def_slotted_exemplar(:test_runner,
	{
		{ :column, 0 }
	},
	:base_test_runner )
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_runner.init( a_stream , _gather keys_and_elements )
	## Init self with output !A_STREAM! and properties
	## KEYS_AND_ELEMENTS.

	.column << 0
	>> _super.init( a_stream, _scatter keys_and_elements )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_runner.run( a_test, _gather suite_args )

	## Runs the given A_TEST.  See base_text_runner.run() for more
	## information.
	
	.column << 0
	_super.run( a_test, _scatter suite_args)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.start_test( a_test )
	## Add notification about start of A_TEST to stream.

	.stream.write(".")
	.stream.flush()
	
	_if (.column + << 1 ) >= 40
	_then
		.stream.write( newline_char )
		.column << 0
	_endif
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.add_error( a_test_failure )
	## Add error notification to stream.
	
	.stream.write( "E" )
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.add_failure( a_test_failure )
	## Add failure notification to stream.

	.stream.write( "F" ) 
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.not_run_slow_test( a_test )
	## Add not run of slow test notification.
	
	.stream.write( "N" )
	.stream.flush()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.print()
	## Prints failures to the stream.

	_if ( count << .test_result.error_count() ) ~= 0
	_then 
		_self.print_failures(  count , " error:" , " errors:" , :errors|()| , :full_traceback_text|()| )
	_endif

	_if ( count << .test_result.failure_count() ) ~= 0
	_then
		_self.print_failures( count , " failure:" , " failures:" , :failures|()| )
	_endif
	
	 _self.print_footer()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_runner.print_failures( count , singular , plural , iterator, _optional report_method )
	## Prints failures.
	
	_if count = 1
	_then
		.stream.write("There was " + count.write_string + singular + newline_char )
	_else 
		.stream.write("There were " + count.write_string + plural + newline_char )
	_endif

	.stream.write( newline_char )
	
	i << 0
	
	_for a_failure _over .test_result.perform_iter( iterator )
	_loop
		i + << 1
		.stream.write( i.write_string +") " + a_failure.write_string + newline_char )
		_if report_method _isnt _unset
		_then
			.stream.write( a_failure.perform( report_method ) )
			.stream.write( newline_char )
		_endif
	_endloop

	.stream.write( newline_char )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_runner.print_footer()
	## Prints the header of the report.

	_if .test_result.was_successful?()
	_then
		.stream.write("OK")
		.stream.write(" (" + .test_result.run_count().write_string + " tests) [" +
			      .test_result.assert_count().write_string + " assertions]" +
			      newline_char )
	_else
		.stream.write("FAILURES!!!" + newline_char )
		.stream.write("Tests run: " +  .test_result.run_count().write_string +
			      ",  Assertions: "  + .test_result.assert_count().write_string +
			      ",  Failures: " + .test_result.failure_count().write_string +
			      ",  Errors: " + .test_result.error_count().write_string 
			)
	_endif 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.add_info( info_string )
	## Do nothing.
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.start_suite( a_suite )
	## Do nothing. 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.end_suite( a_suite )
	## Do nothing. 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_runner.report_assert( _gather args )
	## Do nothing. 
_endmethod
$
