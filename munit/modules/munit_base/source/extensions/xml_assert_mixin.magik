#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
## This mixin provides the methods to compare xml strings
## inherit your test from it to use assert_xml_file() etc.
def_mixin( :xml_assert_mixin, { :assert_helper_mixin } )
$

_pragma(classify_level=debug)
_method xml_assert_mixin.assert_xml_file(exp_xml_fname, actual_xml _optional msg, _gather sort_paths)
	## Compares xml in resource file EXP_XML_FNAME with xml
	## string ACTUAL_XML.
	## MSG is a failure message.
	##
	## SORT_PATHS are XPath like strings which can contain
	## metacharacters * and ?. Elements of path which matches to
	## one of them are sorted before they are compared.
	## E.g. /bookstore/book/title or /bookstore/b*/title
	##
	## Note that the resource file is expected to be in :utf8
	## encoding (https://tools.ietf.org/html/rfc8259#section-8.1).
	## reads resource file fname and returns its content as a string
	## Note that the resource file is expected to be in :utf8 encoding
	str<< _self.resource_file_as_string(exp_xml_fname)
	>> _self.assert_xml(str, actual_xml, msg, _scatter sort_paths)
_endmethod
$
_pragma(classify_level=debug)
_method xml_assert_mixin.assert_xml(exp_xml, actual_xml _optional msg _gather sort_paths)
	## Compares EXP_XML with xml string ACTUAL_XML.
	## EXP_XML is either a string or a handler which returns a string
	## when invoked.
	## MSG is a failure message.
	## 
	## SORT_PATHS are XPath like strings which can contain
	## metacharacters * and ?. Elements of path which matches to
	## one of them are sorted before they are compared.
	## E.g. /bookstore/book/title or /bookstore/b*/title
	##
	dec << simple_xml.new(:allow_doctype?, _true)
	_try
		actual<< dec.read_element_string(actual_xml)
	_when error
		_self.fail( write_string(msg," Cannot parse XML string: " , actual_xml))
		_return _self 
	_endtry
	_if exp_xml.is_kind_of?(handler)
	_then
		exp_xml<< exp_xml()
	_endif 
	expected<< dec.read_element_string(exp_xml)
	
	_self.assert_xml_decoded(expected, actual, msg, _scatter sort_paths)
	>> _self 
_endmethod
$
_pragma(classify_level=debug)
_private _method xml_assert_mixin.assert_xml_decoded(expected, actual, msg, _gather sort_paths)
	## 
	##
	_dynamic !test_failure_data!
	_if _not _self.compare_xml(expected, actual, _scatter sort_paths)
	_then
		!test_failure_data! << property_list.new_with(
					      :type, :xml_comparison,
					      :expected, expected,
					      :actual, actual)
		_self.assert_true(
			_false,
			msg.default("XML assertion failed. On test instance <" + _self.get_name().write_string + "> ( can be retrieved by method a_test << a_suite.test_for_name(:" + _self.get_name().write_string + ") ) check:" + newline_char +
				    "a_test.xml_test_failures() or " + newline_char + 
				    "a_test.print_xml_test_failures()"))
	_endif 	
_endmethod
$

_pragma(classify_level=debug)
_method xml_assert_mixin.xml_test_failures()
	## 
	## 
	_return _self.result_failures_of_type(:xml_comparison)	
_endmethod
$

_pragma(classify_level=debug)
_method xml_assert_mixin.print_xml_test_failures()
	## 
	## 
	a_failure_vec << _self.xml_test_failures()
	_for a_failure _over a_failure_vec.fast_elements()
	_loop
		_self.print_xml_test_failure(a_failure)
	_endloop 
_endmethod
$

_pragma(classify_level=debug)
_method xml_assert_mixin.xml_failure_values(a_failure)
	## 
	## 
	_if (a_result_prop << a_failure.test_failure_data) _isnt _unset
	_then
		a_actual_result << a_result_prop[:actual]
		a_expected_result << a_result_prop[:expected]
	_endif
	_return a_actual_result, a_expected_result
_endmethod
$

_pragma(classify_level=debug)
_method xml_assert_mixin.print_xml_test_failure(a_failure)
	## 
	##
	( a_actual_result,
	  a_expected_result) << _self.xml_failure_values(a_failure)
	_if a_actual_result _isnt _unset _andif
	    a_expected_result _isnt _unset 
	_then
		enc<< simple_xml
		str<< stream.default(!output!)
		str.write("expected",newline_char)
		enc.write_element_on(str,a_expected_result)
		str.write(newline_char,"actual",newline_char)
		enc.write_element_on(str,a_actual_result)
		str.write(newline_char)
	_endif 
_endmethod
$
