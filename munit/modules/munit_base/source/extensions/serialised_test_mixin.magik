#% text_encoding = iso8859_1
_package sw
$


_pragma(classify_level=debug)
## This mixin provides the framework for tests to wait for
## things to happen on the serialised thread
def_mixin( :serialised_test_mixin )
$


_pragma(classify_level=debug)
_abstract _method serialised_test_mixin.properties
	## 
	## 
	
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.queue
	## 
	##

	>> _self.properties[ :queue ]
	
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.queue << new_queue
        ## 
        ##

        _self.properties[:queue] << new_queue
        
_endmethod
$



_pragma(classify_level=debug)
_method serialised_test_mixin.wait_for_serialised_tasks_to_complete( top_frame )
	## 
	##
	
	_loop 
		_if _self.queue _is _unset _orif
		    top_frame.top_canvas_container _is _unset _orif
		    _not top_frame.top_canvas_container.tasks_pending?()
		_then
			_leave
		_endif
		_self.wait_for_value_on_queue( :task_complete )
	_endloop
	
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.wait_for_value_on_queue( expected_value, _optional copy_other_values?, wait_time )
	## 
	## If COPY_OTHER_VALUES is false, don't copy anything else
	## found on the queue back to the queue after finding the
	## required value.  The default is true.

	other_values   << rope.new()
	timed_out?     << _false
	wait_time      << wait_time.default( 200 )

	_loop

		# Prevent the test from hanging while waiting for something on
		# the queue.  Only wait for 200ms and then continue
		_if system.vm_version = 3 # magikSF
		_then 
			_self.force_value_on_queue( expected_value )
			value << _self.properties[:queue].get()
		_else
			value << _self.properties[:queue].get( wait_time )
		_endif

		timed_out? << value _is _unset 
		
		_if value = expected_value _orif
		    timed_out? _orif
		    value.eq?( expected_value ) _orif
		    ( value.is_kind_of?( {} ) _andif
		      value[1] _is expected_value )
		_then
			_leave
		_elif copy_other_values? _isnt _false
		_then 
			other_values.add_last( value.copy() )
		_endif
	_endloop

	_self.add_values_to_queue( other_values )

	>> ( _self, timed_out? )
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.wait_for_event_on_queue( expected_value, expected_id _optional wait_time)
	## 
	## 

	other_values   << rope.new()
	timed_out?     << _false 
	wait_time      << wait_time.default( 500 )

	_loop 
		value << _self.properties[:queue].get( wait_time )
		timed_out? << value _is _unset
		_if timed_out?
		_then
			_leave 
		_elif value.is_kind_of?( {} ) _andif
		    value[1] _is :event_handled _andif 
		    value[2] _isnt _unset _andif 
		    value[2].id _is expected_id
		_then
			_leave
			
		_elif value.is_kind_of?( {} ) _andif
		      value[1] _is :task_complete
		_then
			# Do nothing, don't copy :task_complete notifications to the
			# queue.  This is to prevent the queue from filling up with
			# :task_complete notifications which will hang the tests if
			# nothing else can be put on the queue.
		_else
			other_values.add_last( value.copy() )
		_endif
	_endloop

	_self.add_values_to_queue( other_values )

	_if timed_out?
	_then _self.fail(write_string("Time out after ",wait_time," ms when waiting for ", expected_value, " / ",expected_id))
	_endif 

	>> timed_out?
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.wait_for_task_to_complete_on( receiver, method_name, _optional wait_time )
	## 
	## Wait for the task executing RECEIVER.METHOD_NAME to complete
	## If this times out, an assert failure is generated.
	##

	write( "Waiting for ", method_name, " on ", receiver, ". wait_time: ", wait_time )

	_self.remove_value_from_queue( :task_complete )

	receiver.add_dependent( _self )
	timed_out? << _false
	_protect 
		timed_out? << _self.wait_for_task_to_complete( method_name, wait_time.default( 30000 ) )
	_protection 
		receiver.remove_dependent( _self )
	_endprotect

	_self.assert_false( timed_out?, write_string( "Timed out waiting for ", receiver, ".", method_name ) )
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.wait_for_task_to_complete( method_name, _optional wait_time )
	## 
	## Wait for the task executing METHOD_NAME to complete
	## Assumes the calling method has set up dependency on the task owner i.e. that
	## sends :task_complete change notificaton
	##
	
	write( "Waiting for ", method_name, ". wait_time: ", wait_time )

	start        << date_time.now()
	other_values << rope.new()
	timed_out?   << _false
	wait_time    << wait_time.default( 30000 )
	
	_loop 
		value      << _self.properties[:queue].get( wait_time )
		timed_out? << value _is _unset
		_if timed_out?
		_then
			write( "Wait timed_out" )
			timed_out? << _true
			_leave 
		_elif value.is_kind_of?( {} ) _andif
		    value[1] _is :task_complete _andif 
		    value[3] _is method_name
		_then
			# Wait to make sure that the task's status is set to complete
			# as well.
			_loop
				_if value[2].completed? _then _leave _endif
				_thisthread.sleep(1)
			_endloop
			write( "Found ", method_name, " Duration: ", date_time.now() - start )
			_leave
		_else
			other_values.add_last( value.copy() )
		_endif
	_endloop

	_self.add_values_to_queue( other_values )

	_return timed_out?
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.add_values_to_queue( values )
	## 
	##	
	_for value _over values.fast_elements()
	_loop 
		_self.properties[:queue].put( value, _true )
	_endloop
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.force_value_on_queue( value )
	## 
	## Fork a new thread.  Wait for 200ms and force VALUE on self's
	## atomic queue if there is a thread waiting for it.
	##

	_proc @force_value_on_queue( value, test )
		
		_thisthread.sleep( 200 )
		_if test.properties[:queue].first_waiting_thread _isnt _unset
		_then
			test.properties[:queue].put( value, _true )
		_endif
		
	_endproc.fork_at( _thisthread.vm_priority - 1, value, _self )
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.remove_value_from_queue( remove_value )
	## 
	## 
	
	other_values << rope.new()
	
	_loop
		
		_if _self.properties[:queue].reads_possible = 0 _then _leave _endif
		value << _self.properties[:queue].get()
		
		_if value ~= remove_value _andif
		    ( _not value.is_kind_of?( {} ) _orif
		      ( value.is_kind_of?( {} ) _andif
			value[1] ~= remove_value ))
		_then
			other_values.add_last( value )
		_endif

	_endloop

	_self.add_values_to_queue( other_values )
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.remove_event_from_queue( remove_event_id )
	## 
	## 
	
	other_values << rope.new()

	_if _self.properties[:queue] _isnt _unset
	_then 
		_loop
			
			_if _self.properties[:queue].reads_possible = 0 _then _leave _endif
			value << _self.properties[:queue].get()
			
			_if _not value.is_kind_of?( {} ) _orif
			    ( value[2].responds_to?( :id ) _andif 
			      value[2].id ~= remove_event_id )
			_then
				other_values.add_last( value )
			_endif
			
		_endloop

		_self.add_values_to_queue( other_values )
	_endif
	
_endmethod
$


_pragma(classify_level=debug)
_private _method serialised_test_mixin.remove_completed_task_from_queue(method_name)
	## 
	## Look through all the elements on the queue.  For each value,
	## if it is a vector, has 3 elements and the 3rd element
	## matches METHOD_NAME, it will be removed from the queue.
	##
	
	other_values << rope.new()

	_if _self.properties[:queue] _isnt _unset
	_then 
		_loop
			
			_if _self.properties[:queue].reads_possible = 0 _then _leave _endif
			value << _self.properties[:queue].get()
  
			_if _not ( value.is_kind_of?( {} ) _andif
				   value.size >= 3 _andif
				   value[3] = method_name )
			_then
				other_values.add_last( value )
			_endif
			
		_endloop

		_self.add_values_to_queue( other_values )
	_endif
	
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.note_change( who, what, data )
	## 
	##

	_if ( test_queue << _self.queue ) _isnt _unset
	_then 
		_if what _is :event_handled _orif
		    what _is :frame_active 
		_then
			test_queue.put( {what, data}, _true )
		_elif what _is :task_complete
		_then
			# data[1] = task, data[2] = method_name
			test_queue.put( {what, data[1], data[2]}, _true )
		_else 
			test_queue.put( what, _true )
		_endif
	_endif
	
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.when_the_frame_is_activated( top_frame )
	## 
	## 

	_if top_frame _isnt _unset _andif
	    _not top_frame.active?
	_then
		
		_if _self.queue _is _unset
		_then 
			_self.queue << atomic_queue.new( 1019 )
		_endif
		
		top_frame.activate()
		_self.wait_for_value_on_queue( {:frame_active, top_frame}, _true )
		
		# There are also at least two config_change events.
		_self.wait_for_value_on_queue( :resize_complete )
		_self.wait_for_value_on_queue( :resize_complete )
		
	_endif
	
	>> _self
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.when_the_frame_is_minimized( top_frame, minimized?, _optional wait_value )
	## 
	## WAIT_VALUE is the value to wait for on the queue.  The
	## default is :task_complete
	##

	_if top_frame _isnt _unset
	_then
		
		_if _self.queue _is _unset
		_then 
			_self.queue << atomic_queue.new( 1019 )
		_endif

		_if wait_value _is _unset
		_then
			wait_value << :task_complete
		_endif

		_self.remove_value_from_queue( wait_value )		
		top_frame.minimized? << minimized?
		_self.wait_for_value_on_queue( wait_value )
		
	_endif
	
	>> _self
_endmethod
$

_pragma(classify_level=debug)
_method serialised_test_mixin.when_the_frame_is_maximized(top_frame, maximized?, _optional wait_value)
	## 
	##
	
	_if top_frame _isnt _unset
	_then
		
		_if _self.queue _is _unset
		_then 
			_self.queue << atomic_queue.new( 1019 )
		_endif

		_if wait_value _is _unset
		_then
			wait_value << :task_complete
		_endif

		_self.remove_value_from_queue( wait_value )		
		top_frame.maximized? << maximized?
		_self.wait_for_value_on_queue( wait_value )
		
	_endif
	
	>> _self
_endmethod
$



_pragma(classify_level=debug)
_method serialised_test_mixin.when_the_frame_is_deactivated( top_frame )
	## 
	## 

	_if top_frame _isnt _unset
	_then
		top_frame.deactivate()
	_endif
	
	>> _self
_endmethod
$


_pragma(classify_level=debug)
_method serialised_test_mixin.resize_frame(a_frame, width, height )
	## Workaround for the problem that some resize events are lost 
	## when testing
	timed_out?<< _true
	_self.remove_value_from_queue( :resize_complete )
	_for attempt _over 1.upto(5)
	_loop
		a_frame.set_size( width, height )
		( test, timed_out? ) << _self.wait_for_value_on_queue( :resize_complete, _true )
		_if _not timed_out? _then _leave _endif
	_endloop
	_if timed_out? _is _true 
	_then
		write("Frame resize timed out in test: ", _self.get_name())
		top_container<< a_frame.top_canvas_container
		top_container.width << width
		top_container.height << height
		top_container.refresh()
#	_else
#		write("Frame resize OK in test: ", _self.get_name())
	_endif	
_endmethod
$
