#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
## This mixin provides the methods to compare json strings
## inherit your test from it to use assert_json_file() etc.
def_mixin( :json_assert_mixin, { :assert_helper_mixin, :nested_properties_assert_mixin } )
$

_pragma(classify_level=debug)
## property list with keys :actual and :expected holding last
## :actual json which was different than :expected
json_assert_mixin.define_shared_constant(:last_failed_json_assertion, property_list.new_with(:expected, _unset, :actual, _unset), :public)
$
_pragma(classify_level=debug)
json_assert_mixin.define_shared_constant(:numbers_tolerance,
	## tolerance when comparing numbers decoded from json
	## aceptable numbers difference is less than 1e-5 % 
	## see compare_equals() for DELTA and RELATIVE? explanation
	property_list.new_with(:delta, 1e-7, 
			       :relative, _true ),
	_true )
$

_pragma(classify_level=debug)
_method json_assert_mixin.print_last_failed_json_assertion(_optional stream)
	## prints :actual and :expected last_failed_json_assertion as a
	## string to STREAM (defaults to !output!)
	## 
	enc<< json_encoder.new()
	str<< stream.default(!output!)
	str.write("expected",newline_char)
	str.write(enc.generate_string(_self.last_failed_json_assertion[:expected]))
	str.write(newline_char,"actual",newline_char)
	str.write(enc.generate_string(_self.last_failed_json_assertion[:actual]),newline_char)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_file(exp_json_fname, actual_json _optional msg _gather sort_data)
	## Compares json in resource file EXP_JSON_FNAME with json
	## string ACTUAL_JSON.
	## MSG is a failure message.
	##
	## SORT_DATA are expected to be vectors containing sort_proc
	## followed by sequence of keys leading to element in json
	## which should be sorted before comparison 
	## e.g. {_proc (a,b) >> a[:id] > b[:id] _endproc, :features}
	## Last key can be "*" e.g. {sort_proc, :contexts, :internals, "*"}
	## which means that values of all keys will be sorted by sort_proc
	##
	## Note that the resource file is expected to be in :utf8
	## encoding (https://tools.ietf.org/html/rfc8259#section-8.1).
	str<< _self.resource_file_as_string(exp_json_fname)
	>> _self.assert_json(str, actual_json, msg, _scatter sort_data)
_endmethod
$
_pragma(classify_level=debug)
_method json_assert_mixin.assert_json(exp_json, actual_json _optional msg _gather sort_data)
	## Compares EXP_JSON with json string ACTUAL_JSON.
	## EXP_JSON is either a string or a handler which returns a string
	## when invoked.
	## MSG is a failure message.
	## 
	## SORT_DATA are expected to be vectors containing sort_proc
	## followed by sequence of keys leading to element in json
	## which should be sorted before comparison 
	## e.g. {_proc (a,b) >> a[:id] > b[:id] _endproc, :features}
	## Last key can be "*" e.g. {sort_proc, :contexts, :internals, "*"}
	## which means that values of all keys will be sorted by sort_proc
	##
	>> _self.int!assert_json(exp_json, actual_json, _unset ,  msg, _scatter sort_data)
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.int!assert_json(exp_json, actual_json, a_proc, _optional msg _gather sort_data)
	## 
	## 
	decoder<< json_decoder.new()
	_try
		actual<< decoder.parse_string(actual_json)
	_when error
		str<< internal_text_output_stream.new()
		actual_json.print_on(str)
		_self.fail( write_string(msg," Cannot parse actual JSON string: " , actual_json, newline_char, str.string))
		_return _self 
	_endtry
	_if exp_json.is_kind_of?(handler)
	_then
		exp_json<< exp_json()
	_endif 
	expected<< decoder.parse_string(exp_json)

	_for sort_data_el _over sort_data.elements()
	_loop
		actual << _self.sort_in_json(actual, _scatter sort_data_el)
		expected << _self.sort_in_json(expected, _scatter sort_data_el)
	_endloop	

	_if a_proc _isnt _unset
	_then
		(actual, expected) << a_proc(actual, expected)
	_endif
	
	_self.assert_json_decoded(expected, actual, msg)
	>> _self 
_endmethod
$
_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_with_pre_processing(exp_json, actual_json, a_proc, _optional msg _gather sort_data)
	## see assert_json()
	## A_PROC is a pre processing procedure which is run with EXP_JSON,
	## ACTUAL_JSON already parsed to a magik object as a parameter
	## just before they are compared A_PROC is expected to return
	## updated EXP_JSON, ACTUAL_JSON 
	>> _self.int!assert_json(exp_json, actual_json, a_proc, msg, _scatter sort_data)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property(json, property, _optional message)
	## 
	## Asserts that the decoded JSON has a nested PROPERTY, which can contain dots, e.g.
	## "parent_key.child_key" will check that JSON has a key "parent_key", which
	## references an object which has a "child_key"
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property(decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_not_nested_property(json, property, _optional message)
	## 
	## Asserts that the decoded JSON does not have a nested PROPERTY, which can
	## contain dots, e.g. "parent_key.child_key" will check that JSON does not have
	## a key "parent_key", which references an object which has a "child_key"
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_not_nested_property(decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_equals(value, json, property, _optional message)
	## 
	## Asserts that the decoded JSON has a nested PROPERTY which equals VALUE.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_equals(value, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_not_equals(value, json, property, _optional message)
	## 
	## Asserts that the decoded JSON does not have a nested PROPERTY which equals VALUE.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_not_equals(value, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_validate(validator, json, property, _optional message)
	## 
	## Run VALIDATOR against the decoded JSON with nested PROPERTY.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	## VALIDATOR is of the form
	##   _proc(test, nested_hashy, nested_key, nested_val,
	##         message)
	##   _endproc 
	##  TEST is this test
	##  NESTED_HASHY is the nested parent hash table
	##  NESTED_KEY is the key into the nested parent hash table
	##  NESTED_VAL is the value of the indested element in the nested hash table
	##  MESSAGE is passed in from the MESSAGE argument to this function
	##
	## If the nested hash table cannot be found, then NESTED_HASHY will be _unset,
	## and NESTED_KEY will still be the expected key (i.e. the last key in the
	## chain)  NESTED_VAL will be _unset
	##
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_validate(validator, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_private _method json_assert_mixin.assert_json_decoded(expected, actual, msg)
	## 
	##
	delta<< _self.numbers_tolerance[:delta]
	relative?<< _self.numbers_tolerance[:relative]
	msg<< msg.default("Json assertion failed. Run "+_self.get_name()+
			  " again alone and then check "+
			  _self.class_name+".last_failed_json_assertion, or call "+
			  _self.class_name+".print_last_failed_json_assertion()")

	_if _not _self.assert_deep_equals( expected, actual, msg, delta, relative? )
	_then
		_self.last_failed_json_assertion[:expected]<< expected
		_self.last_failed_json_assertion[:actual]<< actual
	_endif 	
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.sort_in_json(json, sort_proc _gather keys)
	##
	## An array element of JSON is to be sorted (usually in-situ) using SORT_PROC
	##
	## KEYS are used to find specific array elements; no checking is performed to
	## ensure that the element is an array and can be sorted.  This is the
	## responsibility of the caller.
	##
	## If no key is passed in, then it is assumed that the top level element of JSON
	## is an array and in which case(*), a new simple vector containing sorted
	## elements of JSON will be returned.
	## If one or more valid keys are passed in then a nested element, or elements,
	## will be sorted, e.g. JSON[:key1][:key2]...[:keyN]
	## If "*" is passed in as the last key, then all elements will be sorted 
	##
	## Returns JSON, or a copy(*)
	##
	myjson<< json
	_if keys.size > 1
	_then 
		_for k _over 1.upto(keys.size - 1)
		_loop
			myjson<< myjson[keys[k]]
			_if myjson _is _unset
			_then
				_self.fail(write_string("Key '",keys[k],"' not found in JSON. Not possible to sort json before asserting."))
				_return
			_endif 
		_endloop
	_endif
	>> _if keys.empty?
	   _then
		   #Sort the top level elements
		   >> simple_vector.new_from(myjson.as_sorted_collection( sort_proc ))
	   _elif keys.last = "*"
	   _then
		   _for key _over myjson.keys()
		   _loop
			   _self.sort_collection(myjson, key, sort_proc)
		   _endloop
		   >> json
	   _else
		   _self.sort_collection(myjson, keys.last, sort_proc)
		   >> json
	   _endif
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.sort_collection(parent, key, sort_proc)
	##
	 _if (v<< parent[key]) _isnt _unset _andif v.is_kind_of?(ro_indexed_collection_mixin)
	 _then
		 parent[key]<< simple_vector.new_from(sorted_collection.new_from(v, sort_proc))
	 _endif
_endmethod
$

