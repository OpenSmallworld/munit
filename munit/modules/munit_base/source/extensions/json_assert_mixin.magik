#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
## This mixin provides the methods to compare json strings
## inherit your test from it to use assert_json_file() etc.
def_mixin( :json_assert_mixin, { :assert_helper_mixin, :nested_properties_assert_mixin } )
$

_pragma(classify_level=debug)
## Tests asserting contents of golden files should cache the path to that file
## here to enable it to be referenced down the line
json_assert_mixin.define_shared_variable(:last_expected_file_path, _unset, :readonly)
$

_pragma(classify_level=debug)
## ALL expected json (golden) files can be overwritten during test runs (in
## assert_json_file() ) by setting this to true. 
##
## Once overwritten the files will need examining for differences.
##
json_assert_mixin.define_shared_variable(:overwrite_expected_json_file?, _false, :public)
$

_pragma(classify_level=debug)
## ALL attempts to overwrite expected json (golden) files will be logged here
## for convenience.  It's useful for spotting where an incorrect overwrite was
## triggered from.
##
json_assert_mixin.define_shared_variable(:overwrite_log, rope.new(), :public)
$

_pragma(classify_level=debug)
json_assert_mixin.define_shared_constant(:numbers_tolerance,
	## tolerance when comparing numbers decoded from json
	## aceptable numbers difference is less than 1e-5 % 
	## see compare_equals() for DELTA and RELATIVE? explanation
	property_list.new_with(:delta, 1e-7, 
			       :relative, _true ),
	_true )
$

_pragma(classify_level=restricted)
_iter _method hash_values_helper.temp!sorted_fast_keys_and_elements()
	## This is a temporary method that will be used to temporarily replace the core
	## implementaion of :|fast_keys_and_elements()|.
	## To do so, use the following in a test method
	## stub_method_helper.replace_method(hash_values_helper,
	##   :|fast_keys_and_elements()|,
	##   hash_values_helper.method(:temp!sorted_fast_keys_and_elements|()|).value)   
	##
	## The value in this implementation is that when the hash_tables within a json
	## structure are processed, then this will happen according to the order of the
	## keys, if possible.  If not possible, then they will be processed, as usual,
	## unsorted. 
	vals << .values
	
	ok? << _true
	sc << sorted_collection.new(vals.size, _proc(a,b) >> a[1] _cf b[1] _endproc)
	_try _with c
		_for i,k _over _self.valid_indices(_false)
		_loop
			sc.add({k,vals[i]})
		_endloop
	_when error
		write("CANNOT SORT KEYS")
		c.report_on(!output!)
		ok? << _false
	_endtry

	_if ok? 
	_then
		_for i _over sc.elements()
		_loop
			_loopbody(_scatter i)
		_endloop
	_else
		#Revert to original implementation
		_for i,k _over _self.valid_indices(_false)
		_loop
			_loopbody(k,vals[i])
		_endloop
	_endif	
	
_endmethod
$

_pragma(classify_level=debug)
_private _method json_assert_mixin.generate_new_expected_file(file_path, actual)
	##
	## Overwrites any file found at FILE_PATH with a json string, generated from
	## ACTUAL - a json structure
	##
	##	
	_if file_path _is _unset
	_then
		str << write_string("No file path provided.  Cannot generate new expected file for ", _self)
		_self.overwrite_log.add(str)
		write(str)
		_return
	_elif system.file_exists?(file_path)
	_then
		str << write_string("WRITING UPDATED FILE: for ", _self,": ", file_path)
		_self.overwrite_log.add(str)
		write(str)
		system.unlink(file_path, _true, _true)
	_else
		str << write_string("WRITING FILE: ", _self, ": ", file_path)
		_self.overwrite_log.add(str)
		write(str)
	_endif
	
	stub_method_helper.replace_method(hash_values_helper,
		:|fast_keys_and_elements()|,
		hash_values_helper.method(:temp!sorted_fast_keys_and_elements|()|).value) 
	_protect
		enc << json_encoder.new()
		enc.generate_file(actual,file_path, _true)
	_protection
		stub_method_helper.restore_stubbed_method(hash_values_helper, :|fast_keys_and_elements()|) 
	_endprotect 
		
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_file(exp_json_fname, actual_json _optional msg _gather sort_data)
	## Compares json in resource file EXP_JSON_FNAME with json
	## string ACTUAL_JSON.
	## MSG is a failure message.
	##
	## SORT_DATA are expected to be vectors containing sort_proc
	## followed by sequence of keys leading to element in json
	## which should be sorted before comparison 
	## e.g. {_proc (a,b) >> a[:id] > b[:id] _endproc, :features}
	## Last key can be "*" e.g. {sort_proc, :contexts, :internals, "*"}
	## which means that values of all keys will be sorted by sort_proc
	##
	## Note that the resource file is expected to be in :utf8
	## encoding (https://tools.ietf.org/html/rfc8259#section-8.1).
	##
	## If .overwrite_expected_json_file? is true then EXP_JSON_FNAME will be
	## overwritten with the sorted contents of ACTUAL_JSON
	##
	(str, filename) << _self.resource_file_as_string(exp_json_fname)
	_self.last_expected_file_path << filename
	>> _self.assert_json(str, actual_json, msg, _scatter sort_data)
_endmethod
$
_pragma(classify_level=debug)
_method json_assert_mixin.assert_json(exp_json, actual_json _optional msg _gather sort_data)
	## Compares EXP_JSON with json string ACTUAL_JSON.
	## EXP_JSON is either a string or a handler which returns a string
	## when invoked.
	## MSG is a failure message.
	## 
	## SORT_DATA are expected to be vectors containing sort_proc
	## followed by sequence of keys leading to element in json
	## which should be sorted before comparison 
	## e.g. {_proc (a,b) >> a[:id] > b[:id] _endproc, :features}
	## Last key can be "*" e.g. {sort_proc, :contexts, :internals, "*"}
	## which means that values of all keys will be sorted by sort_proc
	##
	(me, sorted_actual_json) << _self.int!assert_json(exp_json, actual_json, _unset ,  msg, _scatter sort_data)
		
	_if _self.overwrite_expected_json_file?
	_then
		# We have to assume here that when EXP_JSON was read in that the the file was
		# cached.  There's a chance that it wasn't and that this is a filename for an
		# earlier test.  In which case the overwrite should be wildly wrong and
		# hopefully be picked up in subsequent testing!
		filename << _self.last_expected_file_path ^<< _unset
		_self.generate_new_expected_file(filename, sorted_actual_json)
	_endif
	_return me, sorted_actual_json
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.int!assert_json(exp_json, actual_json, a_proc, _optional msg _gather sort_data)
	## 
	## 
	decoder<< json_decoder.new()
	_try
		actual<< decoder.parse_string(actual_json)
	_when error
		str<< internal_text_output_stream.new()
		actual_json.print_on(str)
		_self.fail( write_string(msg," Cannot parse actual JSON string: " , actual_json, newline_char, str.string))
		_return _self 
	_endtry
	_if exp_json.is_kind_of?(handler)
	_then
		exp_json<< exp_json()
	_endif 
	expected<< decoder.parse_string(exp_json)

	_for sort_data_el _over sort_data.elements()
	_loop
		actual << _self.sort_in_json(actual, _scatter sort_data_el)
		expected << _self.sort_in_json(expected, _scatter sort_data_el)
	_endloop	

	_if a_proc _isnt _unset
	_then
		(actual, expected) << a_proc(actual, expected)
	_endif
	
	_self.assert_json_decoded(expected, actual, msg)
	>> _self, actual
_endmethod
$
_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_with_pre_processing(exp_json, actual_json, a_proc, _optional msg _gather sort_data)
	## see assert_json()
	## A_PROC is a pre processing procedure which is run with EXP_JSON,
	## ACTUAL_JSON already parsed to a magik object as a parameter
	## just before they are compared A_PROC is expected to return
	## updated EXP_JSON, ACTUAL_JSON 
	(me, sorted_actual_json) << _self.int!assert_json(exp_json, actual_json, a_proc, msg, _scatter sort_data)	
		
	_if _self.overwrite_expected_json_file?
	_then
		# We have to assume here that when EXP_JSON was read in that the the file was
		# cached.  There's a chance that it wasn't and that this is a filename for an
		# earlier test.  In which case the overwrite should be wildly wrong and
		# hopefully be picked up in subsequent testing!
		filename << _self.last_expected_file_path ^<< _unset
		_self.generate_new_expected_file(filename, sorted_actual_json)
	_endif
	
	_return me, sorted_actual_json
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property(json, property, _optional message)
	## 
	## Asserts that the decoded JSON has a nested PROPERTY, which can contain dots, e.g.
	## "parent_key.child_key" will check that JSON has a key "parent_key", which
	## references an object which has a "child_key"
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property(decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_not_nested_property(json, property, _optional message)
	## 
	## Asserts that the decoded JSON does not have a nested PROPERTY, which can
	## contain dots, e.g. "parent_key.child_key" will check that JSON does not have
	## a key "parent_key", which references an object which has a "child_key"
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_not_nested_property(decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_equals(value, json, property, _optional message)
	## 
	## Asserts that the decoded JSON has a nested PROPERTY which equals VALUE.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_equals(value, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_not_equals(value, json, property, _optional message)
	## 
	## Asserts that the decoded JSON does not have a nested PROPERTY which equals VALUE.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_not_equals(value, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.assert_json_nested_property_validate(validator, json, property, _optional message)
	## 
	## Run VALIDATOR against the decoded JSON with nested PROPERTY.
	## PROPERTY can contain dots, e.g. "parent_key.child_key" will check the value
	## of "child_key" in the object referenced by "parent_key" in JSON
	## VALIDATOR is of the form
	##   _proc(test, nested_hashy, nested_key, nested_val,
	##         message)
	##   _endproc 
	##  TEST is this test
	##  NESTED_HASHY is the nested parent hash table
	##  NESTED_KEY is the key into the nested parent hash table
	##  NESTED_VAL is the value of the indested element in the nested hash table
	##  MESSAGE is passed in from the MESSAGE argument to this function
	##
	## If the nested hash table cannot be found, then NESTED_HASHY will be _unset,
	## and NESTED_KEY will still be the expected key (i.e. the last key in the
	## chain)  NESTED_VAL will be _unset
	##
	##
	_local decoded << json_decoder.new().parse_string(json)
	_local properties << property.split_by(%.).map(_proc(s) >> s.as_symbol() _endproc)

	_self.assert_nested_property_validate(validator, decoded, properties, message)
_endmethod
$

_pragma(classify_level=debug)
_private _method json_assert_mixin.assert_json_decoded(expected, actual, msg)
	## 
	##
	_dynamic !test_failure_result_prop!
	delta<< _self.numbers_tolerance[:delta]
	relative?<< _self.numbers_tolerance[:relative]
	msg<< msg.default("Json assertion failed. On test instance <" + _self.get_name().write_string + "> ( can be retrieved by method a_test << a_suite.test_for_name(:" + _self.get_name().write_string + ") ) check:" + newline_char +
	      "a_test.json_test_failures() or " + newline_char +
	      "a_test.print_json_test_failures() or " + newline_char +
	      "a_test.overwrite_expected_json_files() or " + newline_char +
	      "a_test.overwrite_expected_json_file_for_failure( a_test.failures_of_type(:json_comparison)[1] )"
		  )
	# To do: Code should be restructured to pass value of expected_file_path as argument
	!test_failure_result_prop! << property_list.new_with(
					      :type, :json_comparison,
					      :expected, expected,
					      :actual, actual,
					      :expected_file_path, _self.last_expected_file_path)
	
	_self.assert_deep_equals( expected, actual, msg, delta, relative? )
	
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.sort_in_json(json, sort_proc _gather keys)
	##
	## An array element of JSON is to be sorted (usually in-situ) using SORT_PROC
	##
	## KEYS are used to find specific array elements; no checking is performed to
	## ensure that the element is an array and can be sorted.  This is the
	## responsibility of the caller.
	##
	## If no key is passed in, then it is assumed that the top level element of JSON
	## is an array and in which case(*), a new simple vector containing sorted
	## elements of JSON will be returned.
	## If one or more valid keys are passed in then a nested element, or elements,
	## will be sorted, e.g. JSON[:key1][:key2]...[:keyN]
	## If "*" is passed in as the last key, then all elements will be sorted 
	##
	## Returns JSON, or a copy(*)
	##
	myjson<< json
	_if keys.size > 1
	_then 
		_for k _over 1.upto(keys.size - 1)
		_loop
			myjson<< myjson[keys[k]]
			_if myjson _is _unset
			_then
				_self.fail(write_string("Key '",keys[k],"' not found in JSON. Not possible to sort json before asserting."))
				_return
			_endif 
		_endloop
	_endif
	>> _if keys.empty?
	   _then
		   #Sort the top level elements
		   >> simple_vector.new_from(myjson.as_sorted_collection( sort_proc ))
	   _elif keys.last = "*"
	   _then
		   _for key _over myjson.keys()
		   _loop
			   _self.sort_collection(myjson, key, sort_proc)
		   _endloop
		   >> json
	   _else
		   _self.sort_collection(myjson, keys.last, sort_proc)
		   >> json
	   _endif
_endmethod
$
_pragma(classify_level=debug)
_private _method json_assert_mixin.sort_collection(parent, key, sort_proc)
	##
	 _if (v<< parent[key]) _isnt _unset _andif v.is_kind_of?(ro_indexed_collection_mixin)
	 _then
		 parent[key]<< simple_vector.new_from(sorted_collection.new_from(v, sort_proc))
	 _endif
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.json_test_failures()
	## 
	## 
	_return _self.result_failures_of_type(:json_comparison)	
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.print_json_test_failures()
	## 
	## 
	a_failure_vec << _self.json_test_failures()
	_for a_failure _over a_failure_vec.fast_elements()
	_loop
		_self.print_json_test_failure(a_failure)
	_endloop 
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.print_json_test_failure(a_failure)
	## 
	## 
	_if (a_result_prop << a_failure.test_failure_result_prop) _isnt _unset _andif
	    (a_actual_result << a_result_prop[:actual]) _isnt _unset _andif
	    (a_expected_result << a_result_prop[:expected]) _isnt _unset _andif	
	    (a_file_name << a_result_prop[:expected_file_path].default("unknown")) _isnt _unset
	_then
		enc<< json_encoder.new()
		str<< stream.default(!output!)
		str.write("expected",newline_char)
		str.write(a_file_name,newline_char)
		str.write(enc.generate_string(a_expected_result))
		str.write(newline_char,"actual",newline_char)
		str.write(enc.generate_string(a_actual_result),newline_char)
	_endif 
_endmethod
$

_pragma(classify_level=debug)
_method json_assert_mixin.overwrite_expected_json_files()
	##
	## This should be called following a test failure, where something has changed
	## meaning that the expected file requires updating.
	## 
	_for a_failure _over _self.json_test_failures().fast_elements()
	_loop
		_self.overwrite_expected_json_file_for_failure(a_failure)
	_endloop 	
_endmethod
$


_pragma(classify_level=debug)
_method json_assert_mixin.overwrite_expected_json_file_for_failure(a_failure)
	##
	## This should be called following a test failure, where something has changed
	## meaning that the expected file requires updating.
	##
	_if (a_result_prop << a_failure.test_failure_result_prop) _isnt _unset _andif
	    (a_actual_result << a_result_prop[:actual]) _isnt _unset _andif
	    (a_file_name << a_result_prop[:expected_file_path]) _isnt _unset
	_then
		_self.generate_new_expected_file(
			a_actual_result,
			a_file_name)
	_endif 
_endmethod
$
