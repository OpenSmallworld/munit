#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit)
## A test_failure collects a failed test together
## with the caught condition and traceback text.
def_slotted_exemplar(:test_failure,
{
	{ :failed_test,      _unset },
	{ :raised_condition, _unset },
	{ :traceback,        _unset },
	{ :traceback_text,   _unset },
	{ :test_failure_data, _unset}
})
$

_pragma(classify_level=debug)
test_failure.define_slot_access( :traceback, :read, :public )
$

_pragma(classify_level=debug)
test_failure.define_slot_access( :test_failure_data, :read, :public )
$

_pragma(classify_level=basic,topic=MUnit)
_method test_failure.new( a_test , a_condition )
	## Constructs a test_failure with the given A_TEST and A_CONDITION

	>> _clone.init( a_test , a_condition )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_failure.init( a_test , a_condition )
	## Initialise and return _self.

	.failed_test << a_test
	.raised_condition << a_condition
	
	_if !test_failure_data! _isnt _unset
	_then
		_if !test_failure_data!.inherits_from?(externally_keyed_collection_mixin)
		_then
			_if !test_failure_data![:type] _is  _unset
			_then
				write("** !test_failure_data! should include a key ':type' with a symbol value specifying the type of the data. Type can be used to access specific failures by method test_case.result_failures_of_type(a_type). This message is raised in method test_failure.init(). Current !test_failure_data! value:")
				print(!test_failure_data!)
			_endif 
			.test_failure_data << !test_failure_data!.copy()
		_else
			write("** !test_failure_data! must be a property_list, hash_table or concurrent_hash_map. This message is raised in method test_failure.init(). Current !test_failure_data! value:")
			write(!test_failure_data!.class_name)
			print(!test_failure_data!)
		_endif 
	_endif 
	
	_self.init_traceback_text()

	_self.log_failure()
	
	>> _self 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_failure.init_traceback_text()
	## Init slot .traceback_text.

	_global !traceback!

	_try _with error_variable
		a_stream << internal_text_output_stream.new()
		!traceback!( a_stream, _unset, _false )
		a_traceback_text << a_stream.string
		_if ( tb << .raised_condition[:traceback] ) _isnt _unset
		_then
			a_traceback_text << "".concatenation( tb, a_traceback_text )
		_endif
		a_traceback_text << a_traceback_text.slice( a_traceback_text.index_of(%-),
							    a_traceback_text.size )
		.traceback_text << a_traceback_text
	_when error
		_if .traceback_text _is _unset
		_then
			.traceback_text << write_string( "Error getting traceback text ",
							 " running on the ", _thisthread.name,
							 " thread", newline_char,
							 error_variable.report_contents_string,
							 a_stream.string )
		_endif
	_endtry 
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method test_failure.log_failure()
	## 
	## Do nothing.  Redefined in munit_logging module.
	##
	
_endmethod
$


_pragma(classify_level=basic,topic=MUnit)
_method test_failure.failed_test()
	## Gets the failed test.
	
	>> .failed_test
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_failure.raised_condition()
	## Gets the raised condition.

	>> .raised_condition
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method test_failure.full_traceback_text()
	## 

	>> .traceback_text
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method test_failure.short_traceback_text()
	## Returns sliced traceback text.

	start_index << .traceback_text.index_of_seq( "condition" )
	
	test_name <<  .failed_test.class_name.write_string + "."
	_try test_method_name << .failed_test.get_method_name().default("")
	_when error
		test_method_name << ""
	_endtry 
	
	test_name_size << test_name.size
	_if  (an_index << .traceback_text.index_of_seq( test_name + test_method_name )) _isnt _unset 
	_then
		end_index << an_index + test_name_size + test_method_name.size
		
	_elif (an_index << .traceback_text.index_of_seq( test_name + "set_up()" )) _isnt _unset
	_then
		end_index  << an_index + test_name_size + "set_up()".size

	_elif (an_index << .traceback_text.index_of_seq( test_name + "tear_down()" )) _isnt _unset
	_then 
		end_index <<  an_index + test_name_size + "tear_down()".size
	_else
		end_index << .traceback_text.size
	_endif 
		
	>> .traceback_text.slice( start_index.default(1) , end_index.default(.traceback_text.size) )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_failure.write_on( a_stream )
	##  Write to A_STREAM a short description of the failure.

	_if _self _is _self.exemplar
	_then
		_super.write_on( a_stream )
	_else 
		_self.failed_test().write_on( a_stream )
		" : '".write_on( a_stream )
		
		_if _self.is_failure?()
		_then
			_self.raised_condition()[:message].default("").write_on( a_stream )
		_else
			_self.raised_condition().write_on( a_stream )
		_endif
		
		%'.write_on( a_stream )
	_endif 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_failure.is_failure?()
	## Returns true if self is Failure and
	## false if self is Error.

	>> .raised_condition.name _is :assertion_failed_warning
_endmethod
$
