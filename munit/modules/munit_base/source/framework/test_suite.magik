#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit)
## A test_suite is a Composite of Tests.
## It runs a collection of test cases.
## Here is an example using the dynamic test definition. 
## 
## suite << test_suite.new()
## suite.add_test( math_test.new( "test_add" ))
## suite.add_test( math_test.new( "test_divide_by_zero" ))
##
## Alternatively, a test_suite can extract the tests
## to be run automatically. To do so you pass the exemplar of your
## test_case to the test_suite constructor.
##
## suite << test_suite.new( math_test )
##
## This constructor creates a suite with all not private methods
## following name pattern "test*()".
def_slotted_exemplar(:test_suite,
{
	{ :name  , _unset },
	{ :tests , _unset }
},
{:test_interface})
$

_pragma(classify_level=restricted)
## Subclass this shared constant if this is a slow test.  When
## using the remote_test_server, slow tests are added first in
## the list of tests to run.
test_suite.define_shared_constant(:slow_test?, _false, :public)
$

_pragma(classify_level=basic,topic=MUnit,usage=subclassable)
_method test_suite.new( _optional a_test_case , a_name, method_names)

	## Constructs a new test_suite called A_NAME.
	##
	## By default the suite will search A_TEST_CASE for non-private
	## methods following the pattern "test*()", it will register
	## those methods as being part of the suite.
	##
	## If METHOD_NAMES are given then the suite will only contain
	## those methods.

	>> _clone.init( a_test_case, a_name, method_names )
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_private _method test_suite.init(_optional a_test_case , a_name, method_names)

	## Initialise and return _self. See the new() method for
	## details.

	_if (meth_names << method_names).is_class_of?(:symbol)
	_then
		meth_names << {meth_names}
	_endif 

	.tests << rope.new()

	_if a_test_case _isnt _unset
	_then
		.name << a_name.default( a_test_case.class_name )
		_self.init_from_test_case( a_test_case, meth_names)
	_else
		.name << a_name
	_endif
	
	>> _self 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.get_name()
	## Get name of test suite.
	
	>> .name 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.set_name( a_name )
	## Set a name of test suite.
	
	.name  << a_name 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit,usage=subclassable)
_method test_suite.count_test_cases()
	## Counts the number of test cases that will be run by this test.

	count << 0

	_for a_test _over _self.tests()
	_loop
		count + << a_test.count_test_cases()
	_endloop

	>> count
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit, usage={subclassable})
_method test_suite.runnable?( _optional test_name )
	##
	## Returns true if the suite is runnable
	## suites are runnable as the check is performed for each test
	## in the suite
	##
	>> _true 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit,usage=subclassable)
_method test_suite.run(_optional a_test_result)
	## Runs a tests and collects their result in A_TEST_RESULT instance.

	a_test_result << a_test_result.default( mtest_result.new() )

	a_test_result.notify_listeners( :start_suite ,  _self )

	_for a_test _over _self.tests()
	_loop
		_if a_test_result.should_stop?()
		_then
			_leave
		_else 
			_self.run_test( a_test , a_test_result )
			a_test_result.notify_listeners(:after_each_test_run, a_test)
		_endif 
	_endloop

	a_test_result.notify_listeners( :end_suite ,  _self )

	>> a_test_result
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_private _method test_suite.run_test( a_test , a_test_result )
	## Runs A_TEST and collects its result in A_TEST_RESULT instance.

	a_test.run( a_test_result )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.add_test( a_test )
	##  Adds a test to the suite.
	
	.tests.add( a_test )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.test_count()
	## Returns the number of tests in this suite.
	
	>> .tests.size
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.add_test_suite( a_test_case )
	##  Adds a all tests from A_TEST_CASE to the suite.
	
	.tests.add( a_test_case.suite() )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_iter _method test_suite.tests()
	## Yelds tests in suite.

	_if .tests _isnt _unset
	_then 
		_for a_test _over .tests.elements()
		_loop
			_loopbody( a_test )
		_endloop
	_endif
	
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.test_at( index )
	##  Returns the test at the given INDEX.

	>> .tests[ index ]
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.init_from_test_case( a_test_case, _optional method_names)

	## Init tests from A_TEST_CASE.
	##
	## If METHOD_NAMES is given then only those methods will be
	## part of the suite.  Note that their names still have to
	## follow the pattern "test_*()" otherwise they will be ignored.
	
	_if _not a_test_case.is_kind_of?( test_case )
	_then
		a_message << a_test_case.class_name + " is not subclass of test_case."
		_self.add_test( _self.warning( a_message ) )
				
	_elif a_test_case.method( :|new()| ).private?
	_then
		a_message << "Class " +  a_test_case.class_name +
			     " has no public constructor a_test_case.new( a_name )."

		_self.add_test( _self.warning( a_message ) )
	_elif _not method_names.default({}).empty?
	_then
		_for meth_name _over method_names.fast_elements()
		_loop
			_if (meth << a_test_case.method(meth_name)) _isnt _unset
			_then 
				_self.add_test_method( meth, a_test_case )
			_endif 
		_endloop 
	_else 
		_for a_method _over a_test_case.define_method_target.elements()
		_loop
			_self.add_test_method( a_method , a_test_case )
		_endloop
	_endif 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.add_test_method( a_method , a_test_case )
	## Add A_TEST_CASE with A_TEST_METHOD to suite. 

	_if _self.is_public_test_method?( a_method )
	_then
		a_test_name << _self.test_method_name( a_method )
		_self.add_test( a_test_case.new(a_test_name) )

	_elif _self.is_test_method?( a_method ) # almost a test method
	_then
		a_message << "Test method isn't public: " + a_method.name.write_string 
		_self.add_test( _self.warning( a_message ) )
	_endif
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.is_public_test_method?( a_method )
	# If A_METHOD is public test method returns _true.
	
	>> _self.is_test_method?( a_method ) _andif _not a_method.private? 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.is_test_method?( a_method )
	## If A_METHOD name follow pattern test*() returns _true.
	
	>> a_method.name.is_class_of?( symbol ) _andif 
		a_method.name.matches?( "test*" ) _andif
		a_method.name _isnt :|tests()| _andif
		a_method.name _isnt :|test_aspects| _andif 
		a_method.name _isnt :|test_aspects_keys| _andif 
		a_method.name _isnt :|test_result|
		
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.test_method_name( a_method )
	## Returns name for test A_METHOD.
	## E.g. method test_add() -> "test_add"

	>> a_method.name
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.write_on( a_stream )
	## Writes a description of self to A_STREAM.

	_if _self _is _self.exemplar
	_then
		_super.write_on( a_stream )
	_else
		.name.write_on( a_stream )
		" [".write_on( a_stream )
		_self.method_table.meta_at(:exemplar_global).package.name.write_on( a_stream )
		":".write_on( a_stream )
		_self.class_name.write_on( a_stream )
		"]".write_on( a_stream )
	_endif 
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_method test_suite.print_on( a_stream _optional level )
	## Print a tree like description of self and own tests to A_STREAM.
	
	tab_size << 3
	level << level.default( 0 )

	_for i _over 0.upto( level*tab_size -  2 )
	_loop 
		a_stream.write( " " )
	_endloop
	
	a_stream.write( "L" , level , " " )
	
	_self.write_on( a_stream )
	a_stream.write( newline_char )
	
	_for a_test _over .tests.elements()
	_loop
		_if a_test.is_kind_of?( _self )
		_then
			a_test.print_on( a_stream , level + 1 )
		_else
			_for i _over 0.upto( (level + 1) *tab_size )
			_loop
				a_stream.write( " " )
			_endloop
			
			a_stream.write( a_test )
			a_stream.write( newline_char )
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method test_suite.new_from_module( a_module_name )
	## Creates test suite from all test cases defined
	## in module with name A_MODULE_NAME.

	a_suite << _self.new( _unset , a_module_name )
	
	_for a_test_case _over test_case.all_runnable_children_tests()
	_loop
		_if a_test_case.module_name = a_module_name
		_then
			a_suite.add_test_suite( a_test_case )
		_endif 
	_endloop 

	>> a_suite
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method test_suite.new_from_product( a_product_name )
	## Creates test suite from all test cases defined
	## in product with name A_PRODUCT_NAME.

	a_suite << _self.new( _unset , a_product_name )
	a_product << smallworld_product.products[ symbol.check_type( a_product_name ) ]
	
	_for a_test_case _over test_case.all_runnable_children_tests()
	_loop
		_if sw_module_manager.module( a_test_case.module_name ).product _is a_product
		_then
			a_suite.add_test_suite( a_test_case )
		_endif 
	_endloop 

	>> a_suite
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method test_suite.warning( a_message )
	## Returns a test which will fail and log a warning message.

	>> warning_test_case.new( a_message )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method test_suite.infrastructure?
	## Return false for children of test suite.

	>> _self _is test_suite
_endmethod
$

_pragma(classify_level=advanced)
_method test_suite.test_aspects_keys
	## Return my test aspect keys

	>> _self.test_aspects.keys
	
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method test_suite.unsorted_tests()
	##
	## Return all runnable tests.
	## 
	>> .tests.default({})
_endmethod
$
