#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=basic,topic=MUnit,usage=subclassable)
## A set of assert methods.
def_slotted_exemplar(:assert,
{
	{ :test_result , _unset }
})
$

_pragma(classify_level=basic,topic=MUnit)
_method assert.fail( _optional a_message )
	## Fails a test with the given A_MESSAGE.

	condition.raise( :assertion_failed_warning , :message , a_message )
_endmethod
$

_pragma(classify_level=basic,topic=MUnit)
_private _method assert.assert( left_operand , an_operator ,
				_optional right_operand , a_message , a_type )
	## Flexible assertion.
	## AN_OPERATOR can be
	## Basic operators
	##    :is , :isnt
	## or Binary operators
	##    :|=| , :|~=| , :|<|  , :|>| , :|<=| , :|>=|
	## or Method operators
	##    All methods that returns _true or _false
	##    e.g. :|is_kind_of?()| , :|is_class_of?()| , :|inherits_from?()|
	##         :|responds_to?()|, :|includes?()|
	##
	## If assertion fails then condition ASSERTION_FAILED_WARNING
	## is raised with the given A_MESSAGE.
	##
	## Examples :
	## _self.assert( exp , :is  , :test )
	## _self.assert( exp , :|=| , "test" )
	## _self.assert( exp , :|>| , 25 )
	## _self.assert( {3,4,5} , :|includes?()| , exp )
	## _self.assert( act , :|your_test_that_returns_boolean?()| , exp )

	result? << _false
	
	_protect
		_if an_operator _is :is
		_then
			result? << left_operand _is right_operand
			
		_elif  an_operator _is :isnt
		_then
			result? << left_operand _isnt right_operand
			
		_elif _self.supported_binary_operators.includes?( an_operator )
		_then
			result? << binary_operator[ an_operator ]( left_operand , right_operand )
		_else 
			result? << left_operand.perform( an_operator , right_operand )
		_endif 
		
		default_message << write_string( left_operand, " ", an_operator, " ",right_operand)
		a_message << _self.format_message(a_message, default_message)
		
		_if result? _isnt _true 
		_then
			_self.fail( a_message )
		_endif
	_protection
		a_type << a_type.default( :assert )
		_self.int!report_assert( a_type ,
				     left_operand , an_operator , right_operand ,
				     a_message , result? )
	_endprotect

	>> result?
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
## Supported binary operators by assert method.
## ( :|=| , :|~=| , :|<|  , :|>| , :|<=| , :|>=| )
assert.define_shared_constant(:supported_binary_operators,
			      { :|=| , :|~=| , :|<|  , :|>| , :|<=| , :|>=| },
			      :private )
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_equals( expected , actual , _optional a_message , delta , relative? , a_type )
	## Assert that EXPECTED and ACTUAL are equal.
	## see compare_equals() for DELTA and RELATIVE? explanation

	(equals?, assert_message, assert_actual, assert_operator, assert_expected)<< _self.compare_equals(expected , actual , a_message, delta , relative?)
	_return _self.assert( assert_actual, assert_operator, assert_expected, assert_message, a_type.default( :assert_equals ))
_endmethod
$
_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.compare_equals(expected , actual , _optional a_message, delta , relative?)
	## Returns 5 values:
	## - a boolean: TRUE when EXPECTED and ACTUAL are equal and new message and
	##   FALSE otherwise
	## - a message use to describe the failed comparison
	## - actual value
	## - operator
	## - expected value
	## The last 3 values can be passed to _self.assert() by the calling code.
	##
	## For numbers and unit values assert that EXPECTED and ACTUAL
	## are equal concerning a DELTA.
	## DELTA can be absolute value or if RELATIVE? is true than 
	## DELTA is relative value. ( E.g relative delta 0.2 means
	## that ACTUAL value have to equals EXPECTED value +- 20 %.)
	## Absolute value of DELTA from relative value is calculated by
	## ABS_DELTA = REL_DELTA * EXPECTED.
	##
	## NOTE: Asserts if RELATIVE? is true and EXPECTED is 0.0!
	##

	relative? << relative?.default( _false )

	_if ( expected.is_kind_of?( unit_value )) _andif
	    ( actual.is_kind_of?( unit_value )) _andif 
	    expected.finite? _andif actual.finite? _andif  
	    delta _isnt _unset
	_then
		_if relative? _andif delta.is_kind_of?( unit_value )
		_then   # Ensure delta is not a unit_value
			delta << delta.value
		_elif _not relative? _andif _not delta.is_kind_of?( unit_value )
		_then # Ensure delta is in unit_value
			delta << expected.new( delta, expected.unit )
		_endif
	_elif ( _not expected.is_kind_of?( simple_number_mixin )) _orif
	    ( _not actual.is_kind_of?( simple_number_mixin )) _orif
	    ( _not expected.finite? _orif _not actual.finite? ) _orif 
	    delta _is _unset _orif delta = 0 
	_then
		equals? << actual = expected
		_return equals?, a_message, actual , :|=| , expected
	_endif
	
	_if relative? _then delta_type << " Rel." _else delta_type << " Abs." _endif 
	default_message << write_string("Exp:", expected, " Act:", actual, 
					delta_type, "Delta:", delta)
	a_message << _self.format_message(a_message,  default_message)
	
	_if relative? _then delta << (expected * delta).abs _endif

	actual_delta << (expected - actual).abs
	equals_within_tolerance? <<  actual_delta <= delta
	_return equals_within_tolerance?, a_message, actual_delta , :|<=| , delta
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_private _method assert.assert_raised_condition( condition_name , an_object , method_name ,
						 _optional args , a_message )

	## Expects that error, warning or information with
	## CONDITION_NAME will be raised by invocation of method
	## METHOD_NAME on AN_OBJECT.
	##
	## If method doesn't fail then condition
	## ASSERTION_FAILED_WARNING is raised with the given
	## A_MESSAGE.  If other condition is raised than it continues
	## with handling of that condition by testing framework.
	##
	## If WARNING or INFORMATION is expected then it returns all
	## results of the tested method.
	##
	## ARGS for method are optional and should be defined as simple
	## vector.

	args << args.default( {} )

	_local tag         << "tag".copy()
	_local cond_seen?  << _false
	_local actual_cond << _unset
	
	_protect 
		_catch tag 
		       _handling error , warning , information _with 
		       _proc( a_condition )

			       _import condition_name, tag,  actual_cond, cond_seen?

			       _if a_condition.taxonomy.includes?( condition_name )
			       _then
				       # We have the searched for condition, take note of it
				       actual_cond    << a_condition.name
				       cond_seen?     << _true

				       _if actual_cond _is :assertion_failed_warning
				       _then _return # You get false positives if this continues handling
				       _elif _not a_condition.continuable?
				       _then _throw tag   
				       _endif 
			       _else
				       # Take note of the condition name if it's the first one we have
				       # seen. This is to make the report clearer.
				       actual_cond  << actual_cond.default(a_condition.name)
			       _endif
			       a_condition.continue_handling()
		       _endproc

		       results << _allresults an_object.sys!perform( method_name , _scatter args )
		_endcatch 

		default_message << write_string( "Condition '", condition_name, "' = '", actual_cond, "'")
		a_message << _self.format_message(a_message, default_message)

		_if _not cond_seen?
		_then
			_self.fail( a_message )
		_endif
	_protection
		_self.int!report_assert( :assert_raised_condition ,
				     condition_name , _unset , _unset ,
				     a_message , cond_seen? )
	_endprotect 
	
	>> _scatter results.default({})
_endmethod
$
_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_is( expected , actual, _optional a_string)
	## Assert that EXPECTED and ACTUAL are identical

	>> _self.assert( actual, :is, expected, a_string, :assert_is )
	
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_is_not( expected , actual, _optional a_string)
	
	## Assert that EXPECTED and ACTUAL are not identical

	>> _self.assert( actual, :isnt, expected, a_string, :assert_is_not )
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_not_equals( expected , actual, _optional a_string)
	
	## Assert that EXPECTED and ACTUAL are not equal

	>> _self.assert( actual, :|~=|, expected, a_string, :assert_not_equals )
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_false( expected, _optional a_string )
	## Assert that EXPECTED is false

	>> _self.assert( expected, :is, _false, a_string, :assert_false )

_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_true( expected, _optional a_string )
	## Assert that EXPECTED is true

	>> _self.assert( expected, :is, _true, a_string, :assert_true )

_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_unset( expected, _optional a_string )
	## Assert that EXPECTED is unset

	>> _self.assert( expected, :is, _unset, a_string, :assert_unset )

_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.format_message(message, default_message)

	## Format an assertion message for output by combining the
	## message which was passed in with the default generated
	## message.
	##
	## If MESSAGE is unset then then DEFAULT_MESSAGE will be
	## output.
	## 
	## If MESSAGE contains the string "#1" then that string will be
	## substituted with the DEFAULT_MESSAGE to allow information to
	## be added to it.

	_if message _is _unset
	_then
		result << default_message
	_elif message.index_of_seq("#1") _isnt _unset
	_then
		result << message.substitute_string("#1", default_message)
	_else
		result << message
	_endif 
		
	>> result 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.int!report_assert(_gather args)

	## Report the assertion to the test result object if it is
	## present, otherwise just ignore it.
	
	_if (test_result << .test_result) _isnt _unset
	_then
		test_result.report_assert(_scatter args)
	_endif
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_not_unset( expected, _optional a_string )
	
	## Assert that EXPECTED is not unset

	>> _self.assert( expected, :isnt, _unset, a_string, :assert_not_unset )
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_private _method assert.assert_raised_all_conditions(
			 condition_names , an_object , method_name ,
			 _optional args , a_message )
	## Expects that errors, warnings or information with
	## CONDITION_NAMES will all be raised by invocation of
	## method METHOD_NAME on AN_OBJECT. ARGS for method
	## are optional and should be defined as simple vector.
	## If method doesn't fail then condition ASSERTION_FAILED_WARNING
	## is raised with the given A_MESSAGE.
	## If other condition is raised than it continues with handling of
	## that condition by testing framework.
	## If WARNING or INFORMATION is expected then returns all
	## results of tested method.

	args << args.default( {} )

	_local tag << "tag".copy()
	_local results << {}
	condition_names << set.new_with( _scatter condition_names )
	_local conditions_to_raise << set.new_with( _scatter condition_names )
	_local conditions_raised << set.new()
	
	_protect 
		actual_cond <<
			_catch tag 
			       _handling error , warning , information _with 
			       _proc( a_condition )
				       
				       _import condition_names
				       _import conditions_to_raise
				       _import conditions_raised, tag
				       
				       _if _not a_condition.taxonomy.includes_any?( condition_names )
				       _then
					       conditions_raised.add(condition.name)
					       a_condition.continue_handling()
				       _else
					       _for cond_name _over a_condition.taxonomy.fast_elements()
					       _loop					       
						       _if (conditions_to_raise.remove(cond_name))
						       _then
							      conditions_raised.add(cond_name)
							      _leave
						       _endif
					       _endloop
				       _endif
				       
				       _if _not a_condition.continuable?
				       _then
					       _throw tag _with a_condition.name
				       _endif 
			       _endproc

			       results << _allresults an_object.sys!perform( method_name , _scatter args )
			_endcatch 

		default_message << write_string(
					   "Conditions {",
					   condition_names.as_simple_vector().join_as_strings(","),
					   "} != {",
					   conditions_raised.as_simple_vector().join_as_strings(","), "}")
		a_message << _self.format_message(a_message, default_message)

		_if _not conditions_raised.difference( condition_names ).empty? _orif
		    _not condition_names.difference( conditions_raised ).empty?
		_then
			result? << _false 
			_self.fail( a_message )
		_endif
	_protection
		_self.int!report_assert( :assert_raised_all_conditions ,
					 condition_names , _unset , _unset ,
					 a_message , result? )
	_endprotect 

	_if _not results.empty?
	_then 
		_return _scatter results
	_else
		_return _unset
	_endif
	
_endmethod
$

_pragma(classify_level=advanced,topic=MUnit)
_method assert.assert_deep_equals(expected , actual , _optional a_message, delta , relative?)

	## Assert that EXPECTED and ACTUAL are equal, taking
	## collections into account.
	## see compare_equals() for DELTA and RELATIVE? explanation
	##
	## assert_equals() isn't very useful for comparing collections
	## because two collections with the same elements are not
	## judged by Magik to be equal, unless they are the same
	## object. This method recurses into collections. If every key
	## and every value match, the assertion passes. Any differing
	## keys/values are reported to the user as part of the failure
	## message.
	##
	## Examples
	## --------
	## assert_deep_equals({1,2}, {1,2}) => ok
	##
	## assert_deep_equals({}, rope.new())
	##   fails (different classes)
	##
	## assert_deep_equals({:a, {:b}}, {:a, {:c}})
	##   fails with message "b <> c at key /2/1" -
	##   /2/1 identifies the 2nd element's 1st element, which is
	##   where b and c differ 
	##
	## assert_deep_equals(property_list.new_with(:a, 1, :b, 2),
	##                    property_list.new_with(:a, 1, :b, 99))
	##   fails with message "2 <> 99 at key /b"
	##
	## assert_deep_equals(property_list.new_with(:a, 1, :b,    2),
	##                    property_list.new_with(:a, 99, :bxxx, 2))
	##   fails with messages
	##     1 <> 99 at key /a
	##     The key b is unique at /
	##     The key bxxx is unique at /	
	##
	##
	## Limitations/bugs
	## ----------------
	## - no protection against collections that contain
	## themselves: these will cause stack overflow.
	## - only simple_vector, rope, property_list, hash_table and
	## set, and their subclasses are currently handled. Others can
	## be easily added.
	## - no support for approximate equality of floats, unlike
	## assert_equals
	## - reporting of unique keys doesn't say which 'side'
	## (expected or actual) has the unique key
	
	result << _self.compare(expected, actual, _unset, _unset, delta , relative?)
	
	_if _not result.empty?
	_then
		str << internal_text_output_stream.new()
		_if a_message _isnt _unset
		_then 
			str.write(a_message, %newline)
		_endif
		str.write_list_with_separator(result, %newline)			
		_self.fail(str.string)
	_else		
		_self.assert_true(_true) # only for assertion counts
	_endif
	
	>> result.empty?
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.same_class(object1,object2, location, errors)

	_if object1.is_class_of?(object2)
	_then
		_return _true
	_else
		msg << write_string("Expected a ", object1.class_name,
				    ", but is a ", object2.class_name)
		errors.add( _self.format_error_message(msg, location))
		_return false
	_endif

_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.compare( object1, object2, _optional location, errors, delta , relative?)

	location << location.default(rope.new())
	errors << errors.default(rope.new())
	
	_if object1.is_kind_of?(simple_vector) _or object1.is_kind_of?(rope)
	_then	
		_self.compare_indexed_collection(object1, object2, location, errors, delta , relative?)
	_elif  object1.is_kind_of?(property_list) _orif object1.is_kind_of?(hash_table) _orif object1.is_kind_of?(concurrent_hash_map)
	_then
		_self.compare_external_keyed_collection(object1, object2,location, errors, delta , relative?)
	_elif  object1.is_kind_of?(set)
	_then
		_self.compare_sets(object1, object2,location, errors)
	_else
		(equals?, a_message)<< _self.compare_equals(object1 , object2 , _unset, delta , relative?)
		_if _not equals?
		_then
			_if a_message _is _unset
			_then
				a_message << _self.comparison_failed_message(object1, object2)
			_endif
			errors.add_last(_self.format_error_message(a_message,location))
		_endif 
	_endif 

	_return errors
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.comparison_failed_message(object1, object2)
	## 
	## 
	>> _if object1.class_name _isnt object2.class_name
	   _then			
		   >> write_string(object1, " (an instance of ", object1.class_name, ")",
				   " <> ",
				   object2, " (an instance of ", object2.class_name, ")")
	   _else
		   >> write_string(object1, " <> ", object2)
	   _endif
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.compare_external_keyed_collection( object1, object2, location, errors, delta , relative?)

	_if _not _self.same_class(object1, object2, location, errors)
	_then
		_return errors
	_endif
	
	_for k,v _over object1.keys_and_elements()
	_loop	 
		_if _not object2.includes_key?(k)	
		_then
			_self.unique_key_error(k, location, errors)
		_else
			location.add(k)
			_protect 
				_self.compare(v, object2[k], location, errors, delta , relative?)
			_protection
				location.remove_last(k)
			_endprotect
		_endif		
	_endloop

	_for k,v _over object2.keys_and_elements()
	_loop
		_if _not object1.includes_key?(k)	
		_then
			_self.unique_key_error(k, location, errors)			
		_endif
		
	_endloop

_endmethod 
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.compare_indexed_collection( object1, object2, location, errors, delta , relative?)

	_if _not _self.same_class(object1, object2, location, errors)
	_then
		_return errors
	_endif
	
	_if object1.size <> object2.size
	_then
		errors.add( _self.format_error_message("sizes are not equal",
						       location))
		_return errors
	_endif 


	_for k, v _over object1.keys_and_elements()
	_loop
		location.add(k)
		_protect
			_self.compare(v, object2[k], location, errors, delta , relative?)

		_protection
			location.remove_last()
		_endprotect
	_endloop

_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.compare_sets( object1, object2, location, errors)


	_if _not _self.same_class(object1, object2, location, errors)
	_then
		_return errors
	_endif

	# We don't recurse into sets looking for collections.
	
	_for el _over object1.difference(object2).elements()
	_loop
		msg << write_string(el, " not in ", object2.class_name)
		errors.add(_self.format_error_message(msg, location))
	_endloop

	_for el _over object2.difference(object1).elements()
	_loop
		msg << write_string(el, " not in ", object1.class_name)
		errors.add(_self.format_error_message(msg, location))
	_endloop

	_return errors
_endmethod
$
_pragma(classify_level=advanced,topic=MUnit)
_method assert.compare_xml( an_xml_thing, other_xml_thing, _gather sort_paths )
	##
	## Compares two chunks of xml and make sure they're the same.
	## SORT_PATHS are XPath like strings which can contain
	## metacharacters * and ?. Elements of path which matches to
	## one of them are sorted before they are compared.
	## E.g. /bookstore/book/title or /bookstore/b*/title
	##
	>> _self.int!compare_xml(an_xml_thing, other_xml_thing, "", _scatter sort_paths )
_endmethod
$
_pragma(classify_level=advanced,topic=MUnit)
_private _method assert.int!compare_xml( an_xml_thing, other_xml_thing, path, _gather sort_paths )
	## 
	##
	# Check the types
	_if (type<< an_xml_thing.type) _isnt other_xml_thing.type _then
		_self.fail(write_string( "Expected element <", type,
					 "> but found element <", other_xml_thing.type, ">." ))
		_return _false
	_endif

	an_attrib_list << an_xml_thing.attributes
	other_attrib_list << other_xml_thing.attributes

	_if an_attrib_list.size _isnt other_attrib_list.size _then
		_self.fail(write_string( "Expected ", an_attrib_list.size,
					 " attributes but found ", other_attrib_list.size,
					 " in element ",type ))
		_return _false
	_endif
	_for k,e _over an_attrib_list.fast_keys_and_elements()
	_loop
		_if _not ( other_attrib_list[k.as_symbol()] = e.as_symbol() ) _then
		_self.fail(write_string( "Expected attribute ", k, " to be ", e,
					 " but found ", other_attrib_list[k],
					 " in element ",type ))
			_return _false
		_endif
	_endloop

	elements << an_xml_thing.elements
	other_elements << other_xml_thing.elements
	_if elements.size _isnt other_elements.size
	_then
		_self.fail(write_string( "Expected ", elements.size,
					 " child elements but found ", other_elements.size,
					 " in element ",type ))
		_return _false
	_endif

	path+<<  "/"+an_xml_thing.type
	_if _not sort_paths.empty?
	_then
		sort?<< _for p _over sort_paths.fast_elements()
		_loop
			_if path.matches?(p)
			_then _leave _with _true 
			_endif
		_finally
			>> _false 
		_endloop
		_if sort?
		_then
			elements<< sorted_collection.new_from(elements, _self.xml_element_sort_proc)
			other_elements << sorted_collection.new_from(other_elements, _self.xml_element_sort_proc)
		_endif
	_endif
	
	_for index _over 1.upto(elements.size)
	_loop
		_if elements[index].class_name <> other_elements[index].class_name
		_then
			_self.fail(write_string( "Expected ", elements[index], " to be of same type as ", other_elements[index], "." ))
			_return _false
			
		_elif elements[index].is_kind_of?(char16_vector) _andif
		      other_elements[index].is_kind_of?(char16_vector)
		_then
			expected << elements[index].split_by(%newline).join_as_strings(%newline)
			actual << other_elements[index].split_by(%newline).join_as_strings(%newline)
			eq?<< _self.assert_equals(expected, actual,
						  write_string( "Expected ", expected, " to equal ", actual, "." ))
			_if _not eq? _then _return _false _endif

		_elif _not _self.int!compare_xml(elements[index], other_elements[index], path, _scatter sort_paths)
		_then
			_self.fail(write_string( "Expected ", elements[index], " to match ", other_elements[index], "." ))
			_return _false
		_endif
	_endloop

	_return _true
_endmethod
$
_pragma(classify_level=advanced,topic=MUnit)
assert.define_shared_constant(:xml_element_sort_levels,
	## 2 means checking self and children
	2, _true )
$

_pragma(classify_level=advanced,topic=MUnit)
_private _method assert.xml_element_sort_proc
	## 
	##
	_local levels<< _self.xml_element_sort_levels
	
	>> _proc @xml_element_sort_proc(xml_el1, xml_el2 _optional level)
		   #
		   _import levels 
		   level<< level.default(levels)
		   _if xml_el1.type <> xml_el2.type
		   _then
			   _return xml_el1.type < xml_el2.type
		   _endif
		   _if xml_el1.xml_contents <> xml_el2.xml_contents
		   _then
			   _return xml_el1.xml_contents.default("") < xml_el2.xml_contents.default("")
		   _endif

		   e1a<< xml_el1.attributes
		   e2a<< xml_el2.attributes
		   e1s<< write_string( _scatter sorted_collection.new_from(e1a.keys) )
		   e2s<< write_string( _scatter sorted_collection.new_from(e2a.keys) )
		   _if e1s <> e2s
		   _then
			   _return e1s < e2s
		   _endif
		   e1s<< write_string( _scatter sorted_collection.new_from(e1a.elements) )
		   e2s<< write_string( _scatter sorted_collection.new_from(e2a.elements) )
		   _if e1s <> e2s
		   _then
			   _return e1s < e2s
		   _endif	

		   e1a<< xml_el1.elements.map(_proc (el) >> el.type _endproc)
		   e2a<< xml_el2.elements.map(_proc (el) >> el.type _endproc)
		   e1s<< write_string( _scatter sorted_collection.new_from(e1a) )
		   e2s<< write_string( _scatter sorted_collection.new_from(e2a) )
		   _if e1s <> e2s
		   _then
			   _return e1s < e2s
		   _else
			   types<< e1a
		   _endif

		   e1a<< xml_el1.elements.map(_proc (el) >> el.xml_contents.default("") _endproc)
		   e2a<< xml_el2.elements.map(_proc (el) >> el.xml_contents.default("") _endproc)

		   e1s<< write_string( _scatter sorted_collection.new_from(e1a) )
		   e2s<< write_string( _scatter sorted_collection.new_from(e2a) )
		   
		   _if e1s <> e2s
		   _then
			   _return e1s < e2s
		   _elif level - 1 > 0
		   _then
			   _for type _over types.fast_elements()
			   _loop
				   # todo comparing just first of each type because we don't know how they are sorted
				   # Idealy we should then compare next of each type etc. until result is not maybe or exhausted
				   s1<< _for i _over xml_el1.elements.fast_elements()
				   _loop
					   _if i.type _is type _then _leave _with i _endif 
				   _endloop
				   s2<< _for i _over xml_el2.elements.fast_elements()
				   _loop
					   _if i.type _is type _then _leave _with i _endif 
				   _endloop
				   comp<< _self(s1, s2, level - 1)
				   _if comp _isnt _maybe _then _return comp _endif 
			   _endloop
			   >> _maybe 
		   _else
			   >> _maybe 
		   _endif 
	   _endproc 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.format_error_message(message, location)
	str << internal_text_output_stream.new()
	str.write_list_with_separator(location, "/")
	
	_return write_string(message, " at key /", str.string)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method assert.unique_key_error(k, location, errors)
	message << write_string("The key '", k, "' is unique")
	errors.add_last(_self.format_error_message(message,location))
_endmethod
$

