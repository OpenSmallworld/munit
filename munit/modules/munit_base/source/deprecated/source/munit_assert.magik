#% text_encoding = iso8859_1
_package sw
	 
_pragma(classify_level=deprecated,topic=MUnit)
def_slotted_exemplar(:munit_assert,{},{:assert})
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert( left_operand  _optional
			     an_operator , right_operand , a_message , a_type )
	## Old protocol DEPRECATED! 
	## Look to new implementation of ASSERT method on assert.

	_if .test_result _is _unset
	_then
		_dynamic !test_result!
		.test_result << !test_result!
	_endif 
	
	_if an_operator _is _unset _orif
	    an_operator.is_class_of?("")
	_then
		result? << _super.assert( left_operand , :is , _true , an_operator , :assert_true )
	_else
		result? << _super.assert( left_operand , an_operator , right_operand , a_message , a_type )

	_endif

	>> result?
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_not(a_boolean, _optional a_string)
	## DEPRECATED!
	## Look to new implementation of ASSERT method on assert.

	>> _self.assert( a_boolean , :is , _false , a_string , :assert_not )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_eq( expected, actual, _optional a_string)
	## DEPRECATED! 
	## Look to new implementation of ASSERT method on assert.
	
	>> _self.assert( actual , :|=| , expected , a_string , :assert_eq )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_eq?( expected, actual, _optional a_string)
	## DEPRECATED! Use ASSERT_EQUALS( expected, actual, _optional a_string )

	>> _self.assert( actual , :|eq?()| , expected , a_string , :assert_eq? )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_condition( type, actual, expected, _optional a_string )
	## DEPRECATED!
	## type -> operator conversion
	## :eq  ,  :|=|
	## :ne  ,  :|~=|
	## :gt  ,  :|>|
	## :lt  ,  :|<|
	## :ge  ,  :|>=|
	## :le  ,  :|<=| 

	an_operator << _self.condition_type_conversion[type].default( type )

	>> _self.assert( actual , an_operator , expected , a_string , :assert_condition )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
## type -> operator conversion
## :eq  ,  :|=|
## :ne  ,  :|~=|
## :gt  ,  :|>|
## :lt  ,  :|<|
## :ge  ,  :|>=|
## :le  ,  :|<=| 
munit_assert.define_shared_constant(:condition_type_conversion,
				    property_list.new_with(
					    :eq  ,  :|=|  ,
					    :ne  ,  :|~=| ,
					    :gt  ,  :|>|  ,
					    :lt  ,  :|<|  ,
					    :ge  ,  :|>=| ,
					    :le  ,  :|<=| 
						  ),
				    :private )
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_relative_delta(expected, actual, delta, _optional a_string)
	## DEPRECATED!

	>> _self.assert_equals( expected, actual, a_string , delta , _true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_not_eq( expected , actual, _optional a_string)
	## DEPRECATED! 

	>> _self.assert( actual , :|~=| , expected , a_string , :assert_not_eq )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_not_eq?( expected , actual, _optional a_string)
	## DEPRECATED! 

	result? << actual.eq?( expected )
	>> _self.assert( result? , :is , _false, a_string , :assert_not_eq? )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_is( expected , actual, _optional a_string)
	## DEPRECATED! 

	>> _self.assert( actual , :is , expected , a_string , :assert_is )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_is_not( expected , actual, _optional a_string)
	## DEPRECATED! 

	>> _self.assert( actual , :isnt , expected , a_string , :assert_is_not )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_delta(expected, actual, delta, _optional a_string)
	## DEPRECATED! 

	>> _self.assert_equals( expected , actual , a_string , delta )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_raise(code_to_invoke, a_symbol, _optional a_string)
	## DEPRECATED!
	## Use ASSERT_ERROR( error_name , an_object , method_name, _optional a_message _gather args )

	test_proc << _self.build_proc(code_to_invoke)

	_try _with an_error
	     test_proc.invoke()
	_when error
	      _if an_error.taxonomy.includes?(a_symbol)
	      _then
		      _return 
	      _endif
	_endtry
	
	_self.fail( "Expected exception " + a_symbol )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.true(a_boolean, _optional a_string)
	## DEPRECATED! 
	
	>> _self.assert( a_boolean , :is , _true , a_string , :assert_true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.not_true( a_boolean , _optional a_string)
	## DEPRECATED! 
	
	>> _self.assert( a_boolean , :is , _false , a_string , :assert_not_true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.not( a_boolean , _optional a_string)
	## DEPRECATED! 

	>> _self.assert( a_boolean , :is , _false , a_string , :assert_not_true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.eq( expected, actual, _optional a_string)
	## DEPRECATED!
	
	>> _self.assert( actual , :|=| , expected , a_string , :assert_eq )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.not_eq( expected , actual, _optional a_string)
	## DEPRECATED! Use ASSERT( actual , :|~=| , expected , a_string)
	
	>> _self.assert( actual , :|~=| , expected , a_string , :assert_not_eq )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.condition( type, actual, expected, _optional a_string )
	## DEPRECATED! Use ASSERT( left_operand , an_operator , right_operand , a_message )
	## type -> operator conversion
	## :eq  ,  :|=|
	## :ne  ,  :|~=|
	## :gt  ,  :|>|
	## :lt  ,  :|<|
	## :ge  ,  :|>=|
	## :le  ,  :|<=| 

	an_operator << _self.condition_type_conversion[type].default( type )

	>> _self.assert( actual , an_operator , expected , a_string , :condition )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.is( expected , actual, _optional a_string)
	## DEPRECATED! Use ASSERT( actual , :is , expected , a_string)
	
	>> _self.assert( actual , :is , expected , a_string , :assert_is )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.is_not( expected , actual, _optional a_string)
	## DEPRECATED! Use ASSERT( actual , :isnt , expected , a_string)
	
	>> _self.assert( actual , :isnt , expected , a_string , :assert_is_not )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.delta(expected, actual, delta, _optional a_string)
	## DEPRECATED!
	## Use ASSERT_EQUALS( expected, actual, _optional a_string , delta , relative? )

	>> _self.assert_equals( expected , actual , a_string , delta )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.not_unset( an_object, _optional a_string )
	## DEPRECATED! Use ASSERT_NOT_UNSET( a_object _optional a_message ) 

	>> _self.assert( an_object , :isnt , _unset , a_string , :assert_not_unset )	 
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.unset( an_object, _optional a_string )
	## DEPRECATED! Use ASSERT_UNSET( a_object _optional a_message ) 

	>> _self.assert( an_object , :is , _unset , a_string , :assert_unset )	 
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.raise(a_procedure, a_symbol, _optional a_string)
	## DEPRECATED!
	## Use ASSERT_ERROR( error_name , an_object , method_name, _optional a_message _gather args )

	_self.assert_raise(a_procedure, a_symbol, a_string)
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.relative_delta(expected, actual, delta, _optional a_string)
	## DEPRECATED!
	## ASSERT_EQUALS( expected , actual , _optional a_message , delta , relative? )

	>> _self.assert_equals( expected, actual, a_string , delta , _true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.not_eq?( expected , actual, _optional a_string)
	## DEPRECATED! 

	result? << actual.eq?( expected )
	>> _self.assert( result? , :is , _false , a_string , :assert_not_eq? )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.eq?( expected, actual, _optional a_string)
	## DEPRECATED! 
	
	>> _self.assert( actual , :|eq?()| , expected , a_string , :assert_eq? )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_not_unset( actual, _optional a_string)
	## DEPRECATED!
	
	>> _self.assert( actual , :isnt , _unset, a_string , :assert_eq? )
_endmethod
$


_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_true(a_boolean, _optional a_string)
 	## DEPRECATED!
 	## Look to new implementation of ASSERT method on assert.
	
 	>> _self.assert( a_boolean , :is , _true , a_string , :assert_true )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
 _method munit_assert.assert_unset(an_object, _optional a_string)
 	## DEPRECATED!
 	## Look to new implementation of ASSERT method on assert.

 	>> _self.assert( an_object , :is , _unset , a_string , :assert_unset )
 _endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_includes( expected_item, actual_vector, _optional a_string)
	## DEPRECATED!
	## Look to new implementation of ASSERT method on assert.

	>> _self.assert( actual_vector, :includes?|()| , expected_item, a_string , :assert_includes )
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_is_kind_of( expected, actual, _optional a_string)
	## DEPRECATED!
	## Look to new implementation of ASSERT method on assert.

	>> _self.assert( actual, :is_kind_of?|()| , expected, a_string, :assert_is_kind_of)
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.assert_doesnt_raise(code_to_invoke, a_symbol, _optional a_string)
	## 
	>> _self.doesnt_raise(code_to_invoke, a_symbol, a_string)
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_method munit_assert.doesnt_raise(code_to_invoke, condition_name , _optional a_message)
	## 

	test_proc << _self.build_proc(code_to_invoke)

	_local tag << "tag".copy()
	_local result? << _maybe
	_local results << {}

	_protect 
		_catch tag 
		       _handling error , warning , information _with 
		       _proc( a_condition )

			       _import condition_name , tag , result?
			       
			       _if result? << _not a_condition.taxonomy.includes?( condition_name )
			       _then
				       a_condition.continue_handling()
			       _endif
			       
			       _if _not a_condition.continuable? _then _throw tag _endif 
		       _endproc

		       results << _allresults test_proc.invoke()
		_endcatch 

		_if result? _is _false 
		_then
			_self.fail( a_message )
		_endif
	_protection
		.test_result.report_assert( :assert_raised_condition ,
					    condition_name , _unset , _unset ,
					    a_message , result? )
	_endprotect 
	
	_return result?
_endmethod
$

_pragma(classify_level=deprecated,topic=MUnit)
_private _method munit_assert.build_proc(code_to_invoke)
	##
	## Return a procedure which, when invoked, will be equivalent
	## to invoking CODE_TO_INVOKE.
	##
	## CODE_TO_INVOKE can be one of the following:
	## - a procedure
	## - a vector containing a procedure and one or more arguments
	## - a vector containing an object, a method to send to that
	## object and, optionally, 1 or more arguments to send to the
	## method.
	##
	test_proc << _if code_to_invoke.is_kind_of?( ro_indexed_collection_mixin )
		     _then
			     _local a_proc, args
			     ( a_proc, _gather args ) << ( _scatter code_to_invoke )
			     >> _if a_proc.is_class_of?(procedure)
				_then
					>> _proc()
						   _import a_proc, args
						   a_proc.invoke(_scatter args)
					   _endproc
				_else
					>> _proc()
						   _import a_proc, args
						   args.send_to(a_proc)
					   _endproc
				_endif
		     _else
			     >> code_to_invoke
		     _endif
	>> test_proc
_endmethod
$
