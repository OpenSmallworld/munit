#% text_encoding = iso8859_1

_package sw
$
#remex(:what_got_run_plugin)
#$
_pragma(classify_level=debug, topic={MUnit})
def_slotted_exemplar(:what_got_run_plugin, 
	{
		{ :model,   _unset },
		{ :harness, _unset }
	},
	{:plugin})
$

_pragma(classify_level=debug, topic={MUnit})
what_got_run_plugin.define_slot_externally_readable( :model )
$
_pragma(classify_level=debug, topic={MUnit})
what_got_run_plugin.define_slot_externally_readable( :harness )
$

_pragma(classify_level=debug, topic={MUnit})
_method what_got_run_plugin.init(_gather args)
	.harness << what_got_run_harness.new()
	
	>> _super.init( _scatter args )
_endmethod
$
_pragma(classify_level=debug, topic={MUnit})
_method what_got_run_plugin.model
	_if .model _is _unset 
	_then 
		.model << simple_what_got_run.new( .harness ) #traceback_viewer.new( {} )
	_endif
	
	_return .model 	
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method what_got_run_plugin.build_gui(parent, _optional xml_element)
		>> _self.model.build_gui( parent )	
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method what_got_run_plugin.add_targets_of_tree_selection()
	
	_handling warning _with _proc(c) c.report_on(!terminal!) _endproc
	
	mods << _self.framework.selected_modules
	target_mods << set.new()
	_for a_module _over mods.fast_elements()
	_loop 
		target_mods.add_all( a_module.tested_modules )
	_endloop 	
	
	print( mods )
	print( target_mods )
	
	_for t_module _over target_mods.fast_elements()
	_loop 
		.harness.add_module( t_module.name )
	_endloop 
	
	_self.refresh()
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method what_got_run_plugin.refresh()
	.model.refresh()
_endmethod
$
