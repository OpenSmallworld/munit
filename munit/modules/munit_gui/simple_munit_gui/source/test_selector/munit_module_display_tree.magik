#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug, topic={MUnit})
def_slotted_exemplar(:munit_module_display_tree, {}, :munit_hierarchy_display_tree)
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_module_display_tree.display_text
	>> _self.key.name.write_string.capitalise
_endmethod
$

_method munit_module_display_tree.not_run_icon()
	_return { :module, _self.module_name }
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_module_display_tree.not_run_colour()
	>> _if .key.loaded? _then >> :blue _else >> :black _endif 
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_module_display_tree.add_suites()
	_if .key.loaded?
	_then
		_self.add_suites_for_loaded_module( .key )
	_else 
		_self.add_suites_for_unloaded_modules( .key )
	_endif 
_endmethod
$		

_pragma(classify_level=debug, topic={MUnit})
_private _method munit_module_display_tree.add_suites_for_loaded_module( a_module )
	tf << test_suite_finder.new()
	
	_for a_suite _over tf.find_classes_for_module( a_module.name ).fast_elements()
	_loop
			suite_display_tree << munit_suite_display_tree.new ( a_suite )
			suite_display_tree.add_test_cases
			
			
			_if suite_display_tree.children?
			_then
				_self.add_child( suite_display_tree )
			_endif 	
	_endloop 
	
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_private _method munit_module_display_tree.add_suites_for_unloaded_modules( a_module )
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_module_display_tree.modules()
	_return {.key}  
_endmethod
$
