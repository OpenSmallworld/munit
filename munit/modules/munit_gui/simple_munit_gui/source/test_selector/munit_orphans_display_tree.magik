#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug, topic={MUnit})
def_slotted_exemplar(:munit_orphans_display_tree, {}, :munit_hierarchy_display_tree)
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_orphans_display_tree.display_text
	>> "Undeclared Tests"
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_orphans_display_tree.modules()
	_return {}
_endmethod
$

_pragma(classify_level=debug, topic={MUnit})
_method munit_orphans_display_tree.add_orphan_suites()
	
	_for a_suite _over _self.orphan_suites.fast_elements()
	_loop 
			_self.add_suite( a_suite )
	_endloop 
	 
_endmethod
$		

_method munit_orphans_display_tree.add_suite( a_suite )
	suite_display_tree << munit_suite_display_tree.new( a_suite )
	suite_display_tree.add_test_cases
			
	_if suite_display_tree.children?
	_then
		_self.add_child( suite_display_tree )
	_endif  
_endmethod
$

_method munit_orphans_display_tree.orphan_suites
	results << rope.new()
	tf << test_suite_finder.new()
	
	_for suite_name _over tf.get_test_suite_owner_names().fast_elements()
	_loop
		_if ( suite << get_global_value(suite_name) ) _isnt _unset
		_then
			mn << suite.module_name

			_if mn _is _unset 
			_then
				results.add( suite )
			_elif _not sw_module_manager.module(mn).test_module?
			_then
				results.add( suite )
			_endif				
		_endif 
	_endloop 
	
	_return results
_endmethod
$
