#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  Testing the active_test support.
def_slotted_exemplar(:active_test_test,
{},
{:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
active_test_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method active_test_test.test_active_test()

	a_test << _self.create_active_test_suite()
	a_result << mtest_result.new()
	a_test.run( a_result )

	_self.assert( 10 , :|=| , a_result.run_count()     , "run count" )
	_self.assert( 0  , :|=| , a_result.failure_count() , "failures" )
	_self.assert( 0  , :|=| , a_result.error_count()   , "errors" )	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method active_test_test.test_active_repeated_test()

	a_test << repeated_test.new( _self.create_active_test_suite() , 5 )
	a_result << mtest_result.new()
	a_test.run( a_result )

	
	_self.assert( 50 ,:|=| , a_result.run_count() ,"run count" )
	_self.assert( 0 , :|=| , a_result.failure_count() , "failures" )
	_self.assert( 0 , :|=| , a_result.error_count() , "errors" )	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method active_test_test.test_active_repeated_test_0()

	a_test << repeated_test.new( _self.create_active_test_suite() , 0 )
	a_result << mtest_result.new()
	a_test.run( a_result )
	
	_self.assert( 0 , :|=| , a_result.run_count() , "run count" )
	_self.assert( 0 , :|=| , a_result.failure_count() , "failures" )
	_self.assert( 0 , :|=| , a_result.error_count() , "errors" )	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method active_test_test.test_active_repeated_test_1()

	a_test << repeated_test.new( _self.create_active_test_suite() , 1 )
	a_result << mtest_result.new()
	a_test.run( a_result )
	
	_self.assert( 10 , :|=| , a_result.run_count()     , "run count" )
	_self.assert( 0  , :|=| , a_result.failure_count() , "failures" )
	_self.assert( 0  , :|=| , a_result.error_count()   , "errors" )	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method active_test_test.create_active_test_suite()

	_local success_test_case
	success_test_case << def_local_exemplar( :success_test_case , {} , {test_case} )
	success_test_case.define_method( :run_test|()| , _proc() _endproc , _true ) 
	
	a_suite << active_test_suite.new()
	_for i _over 1.upto(10)
	_loop
		a_suite.add_test( success_test_case.new( "success" ))
	_endloop 

	>> a_suite
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method active_test_test.test_kill_all_active_threads()

	# infinity loop test
	infinity_test << def_local_exemplar( :infinity_test_case , {} , {test_case} )
	infinity_test.define_method( :test_infinity_loop|()| , _proc() _loop _endloop _endproc , _false )

	# active test suite with notification after test child thread creation
	a_test << def_local_exemplar( :a_test , {}, {active_test_suite} ).sys!perform( :init|()| )

	# remember super implementation
	a_test.define_method( :super_run_test|()| , a_test.method( :run_test|()| ).value , _false )

	_local me << _self 

	# redefine run test to notify test kick-off
	a_test.define_method( :run_test|()| ,
			      _proc(a_test,a_test_result)
				      _import me
				      _self.super_run_test(a_test, a_test_result)
				      _lock me 
					    me.notify( _true )
				      _endlock 
			      _endproc, _false )
	
	# add inifinity tests to active suite

	_constant number_of_active_tests << 10
	
	_for i _over 1.upto(number_of_active_tests)
	_loop
		a_test.add_test( infinity_test.new( "test_infinity_loop" ))
	_endloop 
	
	a_result << mtest_result.new()

	# run active suite in different thread
	suite_thread << _proc( a_test , a_result )
				a_test.run( a_result )
			_endproc.fork_at(  _thisthread.vm_priority-1 , a_test, a_result )
	
	result << rope.new()
	
	i << 0
	
	# wait till all test inifinity threads starts
	_lock _self 
	      _loop
		      _if  i < number_of_active_tests
		      _then
			      _self.wait()
			      i + << 1
		      _else
			      _leave 
		      _endif
	      _endloop
	_endlock 
	
	# kill all test threads
	a_test.kill_all_active_tests()
	suite_thread.kill()

	# need wait till thread will be killed by system
	_thisthread.sleep( 1 )

	# check that no active thread exists
	_for t _over system.known_threads()
	_loop
		_if t.role =  a_test.role_for_active_test
		_then
			result.add_last( t )
		_endif 
	_endloop
	
	_self.assert( result.size , :|=| , 0 )
_endmethod
$

