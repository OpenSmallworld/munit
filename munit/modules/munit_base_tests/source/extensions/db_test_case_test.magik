#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  Testing the database test support.
def_slotted_exemplar(:db_test_case_test,
{
	{ :db_test_case , _unset }
},
{ :test_case })
$

_pragma(classify_level=debug,topic=MUnit)
db_test_case_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always", :system_test, "System Test"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.set_up()
	## 

	_local test

	test << def_local_exemplar( :sample_db_test_case ,{} , {db_test_case} )
	test.define_slot_access( :ds_views , :write ,:public )
	test.remove_method( :ds_views )

	test.define_shared_constant( :number_of_views , 3 , :public )
	test.define_shared_constant( :number_of_files_per_view , 1 , :public )

	# Remember super implementation. Not able to use _super in procedure.
	test.define_method( :super_setup_db|()| ,
			    test.method(:setup_db|()|).value,
			    _true )
	
	test.define_method( :setup_db|()| ,
			    _proc()
				    ds_environment.init()
				    _self.ds_views << property_list.new()
				    
				    _for v _over 1.upto( _self.number_of_views )
				    _loop
					    _self.ds_views[v] << database_view.new( :write )
					    
					    _for f _over 1.upto( _self.number_of_files_per_view )
					    _loop
						    a_name << _self.name_for_file( v , f )
						    _self.ds_views[v].add_file( a_name , :directory,  "memory::/ds" , :mode, :virgin )
					    _endloop 
				    _endloop
				    
				    _self.super_setup_db()
			    _endproc , _true )

	# Remember super implementation. Not able to use _super in procedure.
	test.define_method( :super_teardown_db|()| ,
			    test.method(:teardown_db|()|).value,
			    _true )
	
	test.define_method( :teardown_db|()| ,
			    _proc()
				    _self.super_teardown_db()
				    
				    _for v _over 1.upto( _self.number_of_views )
				    _loop
					    _for f _over 1.upto(  _self.number_of_files_per_view )
					    _loop
						    a_name << _self.name_for_file( v , f )
						    pf << _self.ds_views[v].file( a_name ).current_logical_file.physical_file
						    pf.delete_on_close()
						    pf.close()
					    _endloop
					    
					    _self.ds_views[v].discard()
				    _endloop
				    
				    _self.ds_views << _unset
			    _endproc , _true )

	test.define_method( :name_for_file|()|,
			    _proc( v , f )
				    >> "foo-" + v.write_string + %- + f.write_string
			    _endproc, _true )
	
	.db_test_case << test
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.tear_down()
	## 

	.db_test_case << _unset  
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.test_current_alternative_path()
	## 
	
	.db_test_case.define_method( :test_current_alternative_path|()|,
				     _proc()
					     _for v _over 1.upto( _self.number_of_views )
					     _loop
						     alternative_path << _self.ds_views[v].alternative_path

						     _self.assert( alternative_path[1] , :|=| , _self.main_testing_alternative_name.write_string )
						     _self.assert( alternative_path[2] , :|=| , _self.class_name.write_string )
					     _endloop 
					     
				     _endproc , _false )

	a_test << .db_test_case.new( :test_current_alternative_path|()| )
	a_test.run()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.test_checkpoint()
	## 

	.db_test_case.define_method( :test_checkpoint|()|,
				     _proc()
					     _for v _over 1.upto( _self.number_of_views )
					     _loop 
						     _self.assert( _self.ds_views[v] , :has_checkpoint?|()| , _self.checkpoint_name )
					     _endloop 
					     
				     _endproc , _false )
	
	a_test << .db_test_case.new( :test_checkpoint|()|)
	a_test.run()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.test_ds_view()
	## 

	.db_test_case.define_method( :test_ds_view|()|,
				     _proc()
					     _self.assert( _self.ds_views.size , :|=| , _self.number_of_views )
				     _endproc , _false )

	a_test << .db_test_case.new( :test_ds_view|()|)
	a_test.run()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method db_test_case_test.test_infrastructure?()
	##

	_global db_test_case 

	_self.assert( .db_test_case.infrastructure? , :is , _false )
	_self.assert( db_test_case.infrastructure? , :is , _true )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method db_test_case_test.verify_success( a_test )

	a_result << a_test.run()
	
	_self.assert( a_result.run_count() , :|=| , 1 ,"run count")
	_self.assert( a_result.failure_count() , :|=| , 0 , "failures" )
	_self.assert( a_result.error_count() , :|=| , 0 , "errors")
_endmethod
$
