#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  A test case testing test listener support.
def_slotted_exemplar(:test_listener_test,
{
	{ :result , _unset },
	{ :test_start_count , _unset },
	{ :test_end_count , _unset },
	{ :failure_count, _unset },
	{ :error_count , _unset },
	{ :suite_start_count , _unset },
	{ :suite_end_count  , _unset }
},
{:test_listener_interface,:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
test_listener_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.add_error( a_test_failure )

	# write( a_test_failure.full_traceback_text()  )
	
	_self.assert( a_test_failure , :is_kind_of?|()| , test_failure )
	_self.assert( a_test_failure.is_failure?() , :is , _false , "is failure?" )
	
	.error_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.add_failure( a_test_failure )

	# write( a_test_failure.full_traceback_text()  )
	
	_self.assert( a_test_failure , :is_kind_of?|()| , test_failure )
	_self.assert( a_test_failure.is_failure?() , :is , _true , "is failure?" )

	.failure_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.start_test( a_test )

	_self.assert( a_test , :is_kind_of?|()| , test_case )
	.test_start_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.end_test( a_test )

	_self.assert( a_test , :is_kind_of?|()| , test_case )
	.test_end_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.start_suite( a_test_suite )

	_self.assert( a_test_suite , :is_kind_of?|()| , test_suite )
	.suite_start_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.end_suite( a_test_suite )

	_self.assert( a_test_suite , :is_kind_of?|()| , test_suite )
	.suite_end_count + << 1
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.report_assert( _gather args )

	_self.assert( args.size , :is , 6 , "number of args" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
test_listener_test.define_shared_constant(:info_string,"info_string",:public)
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.add_info( info_string )

	_self.assert( info_string , :|eq?()| , {_self.info_string} , "info string" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.set_up()

	.result << mtest_result.new()
	.result.add_listener( _self )

	.test_start_count << 0
	.test_end_count << 0
	.failure_count << 0
	.error_count << 0
	.suite_start_count << 0
	.suite_end_count << 0
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.test_error()

	_local error_test_case
	error_test_case << def_local_exemplar( :error_test_case , {} , { test_case } )
	error_test_case.define_method( :run_test|()| ,
				       _proc()
					       condition.raise(:error)
				       _endproc,
				       _true )

	a_test << error_test_case.new( "error" )
	a_test.run( .result )
	
	_self.assert_equals( 1 , .error_count , "errors" )
	_self.assert_equals( 0 , .failure_count , "failures" )
	_self.assert_equals( 1 , .test_start_count , "test start count" )
	_self.assert_equals( 1 , .test_end_count , "test end count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.test_failure()

	a_test << warning_test_case.new( "failure" )
	a_test.run( .result )

	_self.assert( 0 , :|=| , .error_count      , "errors" )
	_self.assert( 1 , :|=| , .failure_count    , "failures" )
	_self.assert( 1 , :|=| , .test_start_count , "test start count" )
	_self.assert( 1 , :|=| , .test_end_count   , "test end count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.test_suite()

	a_test << test_suite.new()
	a_test.add_test( test_listener_test.new( :test_start_stop|()| ) )
	a_test.run( .result )

	_self.assert( 0 , :|=| , .error_count       , "errors" )
	_self.assert( 0 , :|=| , .failure_count     , "failures" )
	_self.assert( 1 , :|=| , .test_start_count  , "test_start" )
	_self.assert( 1 , :|=| , .test_end_count    , "test_end" )
	_self.assert( 1 , :|=| , .suite_start_count , "suite_start" )
	_self.assert( 1 , :|=| , .suite_end_count   , "suite_end" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.test_start_stop()

	_local success_test_case
	success_test_case << def_local_exemplar( :success_test_case , {} , {test_case} )
	success_test_case.define_method( :run_test|()| , _proc() _endproc , _true )
	
	a_test << success_test_case.new( "success" )
	a_test.run( .result )
	
	_self.assert( 0 , :|=| , .error_count      , "errors" )
	_self.assert( 0 , :|=| , .failure_count    , "failures" )
	_self.assert( 1 , :|=| , .test_start_count , "test start count")
	_self.assert( 1 , :|=| , .test_end_count   , "test end count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_listener_test.test_write_info()

	_local info_string
	info_string << _self.info_string
	
	_local info_test_case
	info_test_case << def_local_exemplar( :info_test_case , {} , {test_case} )
	info_test_case.define_method( :test_info|()| ,
				      _proc()
					      _import info_string
					      _self.write_info(info_string)
				      _endproc ,
				      _false )

	a_test << info_test_case.new( :test_info|()| )
	a_test.run( .result )

	_self.assert( 0 , :|=| , .error_count      , "errors" )
	_self.assert( 0 , :|=| , .failure_count    , "failures" )
	_self.assert( 1 , :|=| , .test_start_count , "test start count")
	_self.assert( 1 , :|=| , .test_end_count   , "test end count" )
_endmethod
$
