#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  A test case testing the testing framework.
def_slotted_exemplar(:test_case_test,
{},
{:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
test_case_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_write()

	_self.assert_equals("test_write() [sw:test_case_test]" , _self.write_string)
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_error()

	_local error_test_case
	error_test_case << def_local_exemplar( :error_test_case , {} , {test_case} )
	error_test_case.define_method( :run_test|()| ,
				       _proc()
					       condition.raise(:error)
				       _endproc,
				       _true )
	
	a_error << error_test_case.new( "error" )
	_self.verify_error( a_error )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_run_and_tear_down_fails()

	_local run_and_tear_down_fails
	run_and_tear_down_fails << def_local_exemplar( :run_and_tear_down_fails ,
							       {
								       { :torn_down? , _false }
							       },				      
							       {test_case} )

	run_and_tear_down_fails.define_method( :run_test|()| ,
					       _proc()
						       condition.raise( :error )
					       _endproc , _true )
	
	run_and_tear_down_fails.define_method( :tear_down|()| ,
					       _proc()
						       _self.torn_down? << _true 
						       condition.raise( :error )
					       _endproc, _true )
	
	a_fails << run_and_tear_down_fails.new( "a_fails" )
	a_result << a_fails.run()
	
	_self.assert( a_result.run_count()     , :|=| , 1 , "run count")
	_self.assert( a_result.failure_count() , :|=| , 0 , "failures" )
	_self.assert( a_result.error_count()   , :|=| , 2 , "errors" )
	
	_self.assert( a_fails.torn_down? , :is , _true , "torn down?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_setup_fails()

	_local set_up_fails
	set_up_fails << def_local_exemplar( :set_up_fails , {} , {test_case} )
	set_up_fails.define_method( :set_up|()| ,
				    _proc()
					    condition.raise( :error )
				    _endproc , _true )
	set_up_fails.define_method( :run_test|()| , _proc() _endproc , _true )
	
	a_fails << set_up_fails.new( "setup_fails" )
	_self.verify_error( a_fails )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_success()

	_local success_test_case
	success_test_case << def_local_exemplar( :success_test_case , {} , {test_case} )
	success_test_case.define_method( :run_test|()| , _proc() _endproc , _true ) 
	
	a_success << success_test_case.new("success")
	_self.verify_success( a_success )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_slow_should_run()

	_local success_test_case
	success_test_case << def_local_exemplar( :success_test_case , {} , {test_case} )
	success_test_case.define_method( :run_test|()| , _proc() _endproc , _true ) 
	
	a_slow_test << success_test_case.new( "slow" )
	_self.verify_success( a_slow_test )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_slow_should_not_run()

	_local success_test_case
	success_test_case << def_local_exemplar( :success_test_case , {} , {test_case} )
	success_test_case.define_method( :run_test|()| , _proc() _endproc , _true ) 
	
	a_slow_test << success_test_case.new( "slow" )
	_self.verify_no_run( a_slow_test , mtest_result.new( _true ) )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_failure()

	a_failure << warning_test_case.new( "failure" )
	_self.verify_failure( a_failure )	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_double_failure()

	_local double_failure_test
	double_failure_test << def_local_exemplar( :double_failure_test , {} , {test_case} )
	double_failure_test.define_method( :test_double_failure|()| ,
					   _proc()
						   _self.assert( :a , :is , :b )
						   _self.assert( 2 , :|=| , 3 )
					   _endproc,
					   _false )
	
	a_double_failure << double_failure_test.new( :test_double_failure|()| )
	a_result << a_double_failure.run()
	
	_self.assert( a_result.run_count()     , :|=| , 1 , "run count" )
	_self.assert( a_result.failure_count() , :|=| , 2 , "failures" )
	_self.assert( a_result.error_count()   , :|=| , 0 , "errors" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_teart_down_after_error()

	_local torn_down
	torn_down << def_local_exemplar( :torn_down ,
						 {
							 { :torn_down? , _false }
						 },
						 {test_case} )
	
	torn_down.define_method( :run_test|()| ,
				 _proc()
					 condition.raise( :error )
				 _endproc , _true )
	
	torn_down.define_method( :tear_down|()| ,
				 _proc()
					 _self.torn_down? << _true
				 _endproc , _true )

	a_fails << torn_down.new( "fails" )
	_self.verify_error( a_fails )
	_self.assert( a_fails.torn_down? , :is , _true , "torn down?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_tear_down_fails()

	_local tear_down_fails
	tear_down_fails << def_local_exemplar( :tear_down_fails , {} , {test_case} )
	
	tear_down_fails.define_method( :tear_down|()| ,
				       _proc()
					       condition.raise (:error )
				       _endproc ,
				       _true )

	tear_down_fails.define_method( :run_test|()| , _proc() _endproc , _true )
	
	a_fails << tear_down_fails.new("tear_down_fails")
	_self.verify_error( a_fails )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_tear_down_setup_fails()

	_local tear_down_set_up_fails
	tear_down_set_up_fails << def_local_exemplar( :tear_down_set_up_fails ,
							      {
								      { :torn_down? , _false }
							      },
							      {test_case} )
	
	tear_down_set_up_fails.define_method( :set_up|()| ,
					      _proc()
						      condition.raise (:error )
					      _endproc , _false  )
	
	tear_down_set_up_fails.define_method( :run_test|()| ,
					      _proc()
						      condition.raise (:error )
					      _endproc , _false  )
	
	tear_down_set_up_fails.define_method( :tear_down|()| ,
					      _proc()
						      _self.torn_down? << _true 
					      _endproc , _false )
	
	a_fails << tear_down_set_up_fails.new("fails")

	_self.verify_error( a_fails )
	_self.assert( a_fails.torn_down? , :is , _true , "torn down?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_was_run()

	_local was_run
	was_run << def_local_exemplar( :was_run ,
					       {
						       { :was_run? , _false }
					       },
					       {test_case})
	
	was_run.define_method( :run_test|()| ,
			       _proc()
				       _self.was_run? << _true 
			       _endproc , _true )
	
	a_test << was_run.new("")
	a_test.run()
	_self.assert( a_test.was_run? , :is , _true , "was run?" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_infrastructure?()
	##

	_global test_case
	_self.assert( test_case.infrastructure? , :is , _true )
	
	_local success_test_case
	a_test_case << def_local_exemplar( :a_test_case , {} , {test_case} )
	a_test << a_test_case.new("inherited_from_test_case")

	_self.assert( a_test.infrastructure? , :is , _false )
_endmethod
$
_pragma(classify_level=debug,topic=MUnit)
_method test_case_test.test_tear_down_restores_stubbed_methods()
	## test that test_case.tear_down() calls stub_method_helper.restore_stubbed_methods()
	## 
	_global test_case, stub_method_helper
	_local restore_called?
	stub_proc<< _proc () _import restore_called?; restore_called?<< _true  _endproc
	stub_method_helper.sys!save_and_replace_method(:|restore_stubbed_methods()|, stub_proc)
	_protect
		test_case.tear_down()

		_self.assert_true(restore_called?,"Tear down method in test_case doesn't call stub_method_helper.restore_stubbed_methods().")
	_protection
		stub_method_helper.sys!restore_saved_method(:|restore_stubbed_methods()|)
	_endprotect	
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method test_case_test.verify_error( a_test )

	a_result << a_test.run()

	_self.assert( a_result.run_count() , :|=| , 1 , "run count" )
	_self.assert( a_result.failure_count() , :|=| , 0 , "failures" )
	_self.assert( a_result.error_count() , :|=| , 1 , "errors" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method test_case_test.verify_failure( a_test )

	a_result << a_test.run()
	
	_self.assert( a_result.run_count() , :|=| , 1 , "run count" )
	_self.assert( a_result.failure_count() , :|=| , 1 , "failures" )
	_self.assert( a_result.error_count() , :|=| , 0 , "errors" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method test_case_test.verify_success( a_test )

	a_result << a_test.run()
	
	_self.assert( a_result.run_count() , :|=| , 1 ,"run count")
	_self.assert( a_result.failure_count() , :|=| , 0 , "failures" )
	_self.assert( a_result.error_count() , :|=| , 0 , "errors")
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_private _method test_case_test.verify_no_run( a_test _optional a_test_result )

	a_result << a_test.run( a_test_result )
	
	_self.assert( a_result.run_count() , :|=| , 0 , "run count")
	_self.assert( a_result.failure_count() , :|=| , 0 , "failures")
	_self.assert( a_result.error_count() , :|=| , 0 , "errors")
_endmethod
$


