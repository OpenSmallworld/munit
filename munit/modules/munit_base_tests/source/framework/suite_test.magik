#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
##  A fixture for testing the "auto" test suite feature.
def_slotted_exemplar(:suite_test,
{
	{ :result , _unset }
},
{:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
suite_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.set_up()

	.result << mtest_result.new()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_inherited_tests()

	_local one_test_case
	one_test_case << def_local_exemplar( :one_test_case , {} , { test_case })
	one_test_case.define_method( :test_case|()| , _proc() _endproc, _false )

	_local inherited_test_case
	inherited_test_case << def_local_exemplar( :inherited_test_case , {} , { one_test_case })
	inherited_test_case.define_method( :test_case2|()| , _proc() _endproc, _false )
	
	suite << test_suite.new( inherited_test_case )
	suite.run( .result )
	
	_self.assert( .result.was_successful?() , :is , _true , "was succesfull?" )
	_self.assert( 2 , :|=| , .result.run_count()  , "run count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_no_test_case_class()

	_local no_test_case_class
	no_test_case_class << def_local_exemplar( :no_test_case_class , {} )

	no_test_case_class.define_method( :new|()| ,
					  _proc()
						  >> _clone 
					  _endproc,
					  _false )
	
	no_test_case_class.define_method( :test_success|()| , _proc() _endproc, _false )

	a_test_suite << test_suite.new( no_test_case_class )
	a_test_suite.run( .result )

	# 1 warning test 
	_self.assert_equals( 1 , .result.run_count() , "run count" ) 
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_no_test_cases()

	_local no_test_cases
	no_test_cases << def_local_exemplar( :no_test_cases , {} )
	no_test_cases.define_method( :no_test_case|()| , _proc() _endproc, _false )
	
	a_test_suite << test_suite.new( no_test_cases )
	a_test_suite.run( .result )

	# 1 warning
	_self.assert( 1 , :|=| , .result.run_count() , "run count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_not_existing_test_case()

	a_test << suite_test.new( "not_existing_method" )
	a_test.run( .result )
	
	_self.assert( .result.run_count() , :|=| , 1 , "run count" )
	_self.assert( .result.failure_count() , :|=| , 1 , "failures" ) 
	_self.assert( .result.error_count() , :|=| , 0 , "errors" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_not_public_test_case()

	_local not_public_test_case
	not_public_test_case << def_local_exemplar( :not_public_test_case , {} , { test_case })
	not_public_test_case.define_method( :test_public|()|  , _proc() _endproc, _false )
	not_public_test_case.define_method( :test_private|()| , _proc() _endproc, _true )

	a_suite << test_suite.new( not_public_test_case )
	
	# 1 public test case + warning
	_self.assert( 2 , :|=| , a_suite.count_test_cases() , "test case count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_one_test_case()

	_local one_test_case
	one_test_case << def_local_exemplar( :one_test_case , {} , { test_case })
	one_test_case.define_method( :test_case|()| , _proc() _endproc, _false )
	one_test_case.define_method( :no_test_case|()| , _proc() _endproc, _false )
	one_test_case.define_method( :test_case , _proc() _endproc, _false )
	
	a_suite << test_suite.new( one_test_case )
	a_suite.run( .result )

	_self.assert( .result.run_count() , :|=| , 2 , "run count" )
	_self.assert( .result.failure_count() , :|=| , 0 , "failures" )
	_self.assert( .result.error_count() , :|=| , 0 , "errors" )
	_self.assert( .result.was_successful?() , :is , _true , "was succesfull?" ) 
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_shadowed_tests()

	_local one_test_case
	one_test_case << def_local_exemplar( :one_test_case , {} , {test_case})
	one_test_case.define_method( :test_case|()| , _proc() _endproc, _false )

	_local override_test_case
	override_test_case << def_local_exemplar( :override_test_case , {} , {one_test_case} )
	override_test_case.define_method( :test_case|()| , _proc() _endproc, _false )
	
	a_suite << test_suite.new( override_test_case )
	a_suite.run( .result )

	_self.assert( 1 , :|=| , .result.run_count() , "run count" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method suite_test.test_add_test_suite()

	_local one_test_case
	one_test_case << def_local_exemplar( :one_test_case , {} , {test_case})
	one_test_case.define_method( :test_case|()| , _proc() _endproc, _false )
	
	a_suite << test_suite.new()
	a_suite.add_test_suite( one_test_case )
	a_suite.run( .result )

	_self.assert( 1 , :|=| , .result.run_count() , "run count" )
_endmethod
$












