#% text_encoding = iso8859_1
_package sw


_pragma(classify_level=debug,topic=MUnit)
def_slotted_exemplar( :raised_all_conditions_test, {}, { :test_case } )
$

_pragma(classify_level=debug, topic={MUnit})
raised_all_conditions_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_two_conditions_and_raising_one_fails_assertion()
	_self.assert_raised_condition(
		:assertion_failed_warning,
		_self,
		:assert_raised_all_conditions|()|,
		{ {:information, :warning},
		  _proc()
			  condition.raise(:warning)
		  _endproc,
		  :invoke|()| }, "Expected failure as information condition not raised, but assertion did not fail." )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_one_condition_and_raising_teo_fails_assertion()
	_self.assert_raised_condition(
		:assertion_failed_warning,
		_self,
		:assert_raised_all_conditions|()|,
		{ {:warning},
		  _proc()
			  condition.raise(:warning)
			  condition.raise(:information)
		  _endproc,
		  :invoke|()| }, "Expected failure as information condition raised, but asserted did not fail." )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_two_conditions_and_raising_one_twice_fails_assertion()
	_self.assert_raised_condition(
		:assertion_failed_warning,
		_self,
		:assert_raised_all_conditions|()|,
		{ {:information, :warning},
		  _proc()
			  condition.raise(:warning)
			  condition.raise(:warning)
		  _endproc,
		  :invoke|()| }, "Expected failure as information condition not raised, but asserted did not fail." )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_no_condiitions_and_raising_none_passes()
	_self.assert_raised_all_conditions(
		{},
		_proc ()
		_endproc,
		:invoke|()| )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_no_condiitions_and_raising_one_fails()
	_self.assert_raised_condition(
		:assertion_failed_warning,
		_self,
		:assert_raised_all_conditions|()|,
		{ {},
		  _proc()
			  condition.raise(:warning)
		  _endproc,
		  :invoke|()| }, "Expected failure as warning condition raised, but asserted did not fail." )
_endmethod
$


_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_one_condition_and_raising_it_passes()
	_self.assert_raised_all_conditions(
		{:warning},
		_proc ()
			condition.raise(:warning)
		_endproc,
		:invoke|()| )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_two_conditions_and_raising_them_passes()
	_self.assert_raised_all_conditions(
		{:warning, :information},
		_proc ()
			condition.raise(:warning)
			condition.raise(:information)
		_endproc,
		:invoke|()| )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_asserting_two_conditions_and_raising_them_out_of_order_passes()
	_self.assert_raised_all_conditions(
		{:warning, :information},
		_proc ()
			condition.raise(:information)
			condition.raise(:warning)
		_endproc,
		:invoke|()| )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method raised_all_conditions_test.test_handle_exceptions_are_not_counted_by_assertion()
	_self.assert_raised_all_conditions(
		{:information},
		_proc ()
			_catch tag
			       _handling warning _with
			       _proc( a_condition )
				       write("A warning condition was successfully handled.")
			       _endproc
			       condition.raise(:information)
			       condition.raise(:warning)
			_endcatch
		_endproc,
		:invoke|()| )
_endmethod
$
