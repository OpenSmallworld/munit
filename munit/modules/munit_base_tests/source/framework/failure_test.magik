#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug,topic=MUnit)
def_slotted_exemplar(:failure_test,
{
	{:failure,  _unset },
	{:error  , _unset  }
	
},
{:test_case})
$

_pragma(classify_level=debug,topic=MUnit)
failure_test.define_shared_constant(:test_aspects, property_list.new_with(:always, "Always"), :public )
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.set_up()

	_local error_test_case

	error_test_case << def_local_exemplar( :error_test_case , {} , {test_case} )
	error_test_case.define_method( :run_test|()| ,
				       _proc()
					       condition.raise(:error,:string,"error")
				       _endproc,
				       _true )
	
	a_test << error_test_case.new( "error" )
	a_result << a_test.run()

	.error << rope.new_from_iter( a_result , :errors|()| ).an_element()

	_local failure_test_case

	failure_test_case << def_local_exemplar( :failure_test_case , {} , {test_case} )
	failure_test_case.define_method( :run_test|()| ,
				       _proc()
					       condition.raise(:assertion_failed_warning,:message,"failure")
				       _endproc,
				       _true )
	
	a_test << failure_test_case.new( "failure" )
	a_result << a_test.run()

	.failure << rope.new_from_iter( a_result , :failures|()| ).an_element()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.tear_down()

	.failure << _unset 
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_is_failure()

	_self.assert( .failure.is_failure?() , :is , _true , "failure" )
	_self.assert( .error.is_failure?()   , :is , _false , "error" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_raised_condition()

	_self.assert( .failure.raised_condition().name , :is , :assertion_failed_warning , "failure" )
	_self.assert( .error.raised_condition().name , :is , :error , "error" )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_failed_test()
	
	_self.assert( .failure.failed_test().class_name, :is , :failure_test_case )
	_self.assert( .error.failed_test().class_name, :is , :error_test_case )
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_write()

	_self.assert(.error.write_string ,:|=|, "error [error_test_case] : 'condition(error: error)'")
	_self.assert( .failure.write_string , :|=|, "failure [failure_test_case] : 'failure'")
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_short_traceback_text()

	.error.short_traceback_text()
	.failure.short_traceback_text()
_endmethod
$

_pragma(classify_level=debug,topic=MUnit)
_method failure_test.test_full_traceback_text()

	.error.full_traceback_text()
	.failure.full_traceback_text()
_endmethod
$

