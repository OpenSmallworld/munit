#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=restricted)
##
## A dialog for displaying and running tests.
## All tests declared in test module module.def files are
## displayed in the top trees organised by product and module.
## Any other tests that are loaded into the image but which
## have not been declared in a module.def file will be listed
## in a final tree labelled 'Undeclared Tests'
##
# TODO
# - investigate using display_tree methods for product and module
#   ( so we can use redraw_keys in load() )
#   This will work (but remember to add :module_name property
#   to the tree_item) but loaded modules are shown with a red
#   tick which is confusing.
# - show success at group level (needs 3-state icon)
# - Send traceback to cli
# - always generate default message for test failure and append
#   the user-specified message instead of replacing the default
#   message.
def_slotted_exemplar(:test_runner_dialog,
{
	{ :test_result,   _unset },
	{ :current_test,  _unset },
	{ :items,         _unset },
	{ :thread,        _unset },
	{ :run_status,    _unset }
},
{ :gui_framework, :test_listener_interface } )
$

_pragma(classify_level=restricted)
test_runner_dialog.define_shared_variable( :sort_display_tests?, _false, :public)
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.init( name, an_owning_framework, _optional properties )

	_super.init( name, an_owning_framework, properties )
	
	.items                    << property_list.new()

	>> _self  

_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.init_actions()

	_self.add_action( sw_action.new( :load,
					 :engine, _self,
					 :image, {:load, :ui_resources},
					 :enabled?, _false,
					 :action_message, :load|()|
				     ) )

	_self.add_action( sw_action.new( :refresh,
					 :engine, _self,
					 :image, {:refresh, :ui_resources},
					 :action_message, :refresh|()|
				     ) )

	_self.add_action( sw_action.new( :run_test,
					 :engine, _self,
					 :image, {:run, :ui_resources},
					 :enabled?, _false,
					 :action_message, :run_test|()|
				    ) )
			  
	_self.add_action( sw_action.new( :interrupt,
					 :engine, _self,
					 :image, {:stop, :ui_resources},
					 :enabled?, _false,
					 :action_message, :interrupt|()|
				    ) )
			  
	_self.add_action( sw_action.new( :clear,
					 :engine, _self,
					 :image, {:clear, :ui_resources},
					 :action_message, :clear|()|
				    ) )
				     
	_self.add_action( sw_action.new( :reset,
					 :engine, _self,
					 :image, {:defaults, :ui_resources},
					 :enabled?, _false,
					 :action_message, :reset|()|
				    ) )	
				     
	_self.add_action( sw_action.new( :edit_method,
					 :engine, _self,
					 :image, {:edit, :ui_resources},
					 :enabled?, _false,
					 :action_message, :edit_method|()|
				    ) )	
				     
	_self.add_action( sw_action.new( :view_traceback,
					 :engine, _self,
                                         :image, {:traceback_viewer, traceback_viewer.module_name},
					 :enabled?, _false,
					 :action_message, :view_traceback|()|
				    ) )

	_self.add_action( sw_action.new( :sort_tests,
					 :engine, _self,
					 :image, {:sort_a_z, :ui_resources},
					 :toolbar_control, :image_toggle_item,
					 :value_change_message, :|toggle_sort_display_tests()|,
					 :enabled?, _true,
					 :value, _self.sort_display_tests?
				    ) )	
				     
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.load()
	##
	## Callback for load action
	##
	
	a_module << .items[:hierarchy_tree_item].selection.an_element().key 
	_self.changed( :status_info, :text, _self.message( :loading_module, a_module.name ) )
	sw_module_manager.load_module( a_module.name, a_module.version, :force_reload?, _true )
	_self.changed( :status_info, :text, _self.message( :loading_module_complete, a_module.name ) )

	# FIXME - would be better to use redraw_keys but that requires
	# the display_tree for a module to use :value as in
	# sw_module_dialog.
#	_self.changed( :hierarchy_tree, :redraw_keys, { a_module } )
	_self.changed( :hierarchy_tree, :refresh )
				     
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.refresh()
	##
	## Callback for refresh action
	## Refresh the hierarchy tree to pick up any new tests
	##

	_self.changed( :hierarchy_tree, :refresh )
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.selected_tests()
	##
	## Return a rope containing all tests at or below the current
	## selection
	##

	result << rope.new()
	_if .items[:hierarchy_tree_item].selection.size > 0
	_then 
		a_display_tree << .items[:hierarchy_tree_item].selection.an_element()
		_for a_child _over a_display_tree.depth_first()
		_loop
			_if ( a_test << a_child.key ).is_kind_of?( test_case ) _andif
			    a_test.get_name() _isnt _unset 
			_then
				result.add( a_test )
			_endif
		_endloop 
	_endif
	
	>> result
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.run_test()
	##
	## Callback for run_test action
	##
	
	_self.run_engine( _thisthread.high_background_priority, :int!run|()| )
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.edit_method()
	##
	## Callback from edit_method action
	##

	a_test << .items[:hierarchy_tree_item].selection.an_element().key
	a_test.send_to_emacs()
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.int!run()
	##
	## Run the tests at or under the current selection
	## The selection may represent any of:
	## - sw_product
	## - sw_module
	## - sw_module_test
	## - test_case
	##

	# Make sure module is loaded
	_self.check_module_is_loaded()
	
	_self.int!clear()
	_self.reset_test_cases()
	
	_self.manage_actions()

	.test_result << mtest_result.new()
	.test_result.add_listener( _self )
	
	start_time << system.elapsed_seconds()

	tests << _self.selected_tests()
	_self.install_progress_indicator( _self.message( :progress ), _self,
					  :indicator, bar_progress_indicator,
					  :max_count, tests.size.max(1),
					  :interrupt_message, :interrupt|()|,
					  :progress_aspect, :work_progress,
					  :stop_aspect, :work_completed )
	
	_for a_test _over tests.fast_elements()
	_loop
		.current_test << a_test
		.current_test.run( .test_result )
	_endloop 

	end_time << system.elapsed_seconds()
	run_time << end_time - start_time
	
	_self.changed( :status_info, :text, _self.message( :finished, run_time.write_string ) )
	_self.manage_actions()
	_self.changed(:failures_display_tree, :refresh )
	_self.changed( :work_completed )
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.check_module_is_loaded()
	##
	## If the current selection is a module or module_test, make
	## sure it is loaded.
	##

	_if .items[:hierarchy_tree_item].selection.size > 0
	_then 
		sel_obj << .items[:hierarchy_tree_item].selection.an_element().key
		_if sel_obj.is_kind_of?( sw_module )
		_then
			mod_name << sel_obj.name
			mod_version << sel_obj.version
		_elif sel_obj.is_kind_of?( sw_module_test )
		_then
			mod_name << sel_obj.parent_module_name
			mod_version << sel_obj.module_version
		_endif
		_if mod_name _isnt _unset _andif
		    _not sw_module_manager.module_is_loaded?( mod_name, mod_version )
		_then
			_self.changed( :status_info, :text, _self.message( :loading_module, mod_name ) )
			sw_module_manager.load_module( mod_name, mod_version )
			_self.changed( :status_info, :text, _self.message( :loading_module_complete, mod_name ) )
			_self.changed( :hierarchy_tree, :refresh )
		_endif
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.start_test( a_test )
	##
	## Callback from mtest_result
	##

	_self.changed( :status_info, :text, _self.message(:running_test, a_test.write_string ) )

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.end_test( a_test )
	##
	## Callback from mtest_result
	##

	run_count << .test_result.run_count()
	error_count << .test_result.error_count() + .test_result.failure_count()
	fg_colour << _if error_count = 0
		     _then
			     # All passed so far
			     >> :green
		     _elif error_count = run_count
		     _then
			     # All failed so far
			     >> :red
		     _else
			     # Some passes and some failures
			     >> :orange
		     _endif 
	_self.changed( :work_progress, run_count )
	_self.set_progress_indicator_colour( colour.called( fg_colour ) )
	_self.changed( :tests_info, :text, _self.message( :runs_counter, run_count ) )
	_self.changed( :hierarchy_tree, :redraw_keys, { a_test } )

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_error( a_test_failure )
	##
	## Callback from mtest_result
	##

	_self.changed( :error_info, :text, _self.message( :errors_counter, .test_result.error_count().write_string ) )
	_self.changed(:failures_display_tree, :refresh )
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_failure( a_test_failure )
	##
	## Callback from mtest_result
	##
	
	_self.changed( :failure_info, :text, _self.message( :failures_counter, .test_result.failure_count().write_string ) )
	_self.changed(:failures_display_tree, :refresh )

_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.reset()
	##
	## Callback from reset action
	##

	_self.reset_test_cases()
	
_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.clear()
	##
	## Callback from clear action
	##

	_self.int!clear()

	# Refresh the tree to remove previous results
	_self.changed(:hierarchy_tree, :refresh )
	_self.changed(:failures_display_tree, :refresh )

	_self.manage_actions()

_endmethod 
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.int!clear()
	##
	## Clear actions
	##

	.current_test << _unset
	.test_result  << _unset

	_self.changed(:failures_display_tree, :refresh )
	_self.changed( :work_completed )
	_self.changed( :status_info, :text, "" )
	_self.changed( :tests_info, :text, _self.message( :runs_counter, 0 ) )
	_self.changed( :error_info, :text, _self.message( :errors_counter, 0 ) )
	_self.changed( :failure_info, :text, _self.message( :failures_counter, 0 ) )
	
_endmethod 
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.reset_test_cases()
	##
	## Reset test_result on all selected test cases
	##
	
	_for a_test _over _self.selected_tests().fast_elements()
	_loop
		a_test.reset_result()
		_self.changed(:hierarchy_tree, :redraw_keys, { a_test } )
	_endloop 

_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.kill_test_thread()
	##
	## Kill main test thread and all children threads created
	## in active test suites.
	##
	
	_if ( result? << _self.interrupt_engine() )
	_then
		_if active_test_suite _isnt _unset
		_then 
			active_test_suite.kill_all_active_tests()
		_endif 
	_endif
	
	>> result?
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.interrupt()
	##
	## Callback from Interrupt action
	##
	
	_if _self.kill_test_thread()
	_then
		_self.changed( :status_info, :text, _self.message( :interrupted ) )
		_self.manage_actions()
	_endif 

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.failures_display_tree()
	##
	## Return a rope of display trees to populate the failures
	## tree 
	##
	
	failures << rope.new()
	_if .test_result _is _unset
	_then
		_if _self.running?()
		_then 
			_return {_self.message(:running)}
		_else
			_return ""
		_endif
	_endif
	
	_for e _over .test_result.errors()
	_loop
		failures.add(e)
	_endloop
	_for f _over .test_result.failures()
	_loop
		failures.add(f)
	_endloop 
	
	result << rope.new()
	_if failures.size = 0
	_then
		result.add( display_tree.new( _self.message( :no_failures ) ) )
	_else 
		_for a_failure _over failures.elements()
		_loop
			dt << display_tree.new( a_failure )
			a_colour << _if a_failure.is_failure?()
				_then
					>> :black
				_else
					>> :red
				_endif
			dt.styled_string << styled_string.new( a_colour, a_failure )
			result.add( dt )
		_endloop 
	_endif 
	
	>> result
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.hierarchy_tree()
	## 
	## 
	ttb << test_tree_builder.new(_self.sort_display_tests?)
	>> ttb.hierarchy_tree()
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.failure_selected( a_sel )
	##
	## An element has been selected in the failures tree
	##

	details << _if a_sel.size = 1
		   _then 
			   a_failure << a_sel.an_element().key
			   >> _if a_failure.is_kind_of?( char16_vector )
			      _then
				      >> a_failure
			      _elif a_failure.is_failure?()
			      _then
				      >> a_failure.write_string
			      _else
				      >> a_failure.full_traceback_text()
			      _endif
		   _else
			   >> ""
		   _endif 
	.items[:failure_details_window].set_text_and_selection( details, 0 )

	_self.manage_actions()
	
_endmethod
$

_pragma(classify_level=advanced)
_method test_runner_dialog.build_framework_gui( a_container )
	##
	## Build gui for work area
	##

	tf << a_container.top_frame
	tf.width << 900
	tf.height << 700
	
	rc << rowcol.new( a_container, _unset, 1, :pixel )
	rc.resize? << _true
	rc.row_resize_values << { 100, 0 }
	
	pw_1 << paned_window.new( rc, :side_by_side?, _true )
	pw_1.col_alignment << :fill
	pw_1.row_alignment << :fill
	pw_1.col_resize_values << {2,3}
	
	.items[:hierarchy_tree_item] << tree_item.new( pw_1,
						       :width, 375, :height, 500,
						       :model, _self,
						       :mode, :one,
						       :resize?, _true,
						       :data_selector, :|hierarchy_tree()|,
						       :select_notifier, :|test_selected()|,
						       :aspect, :hierarchy_tree )
	.items[:hierarchy_tree_item].popup_menu << _self.hierarchy_popup_menu()

	pw_2 << paned_window.new( pw_1, :side_by_side?, _false )
	pw_2.resize? << _true
	
	.items[:failures_tree_item] << tree_item.new( pw_2,
						      :width, 500, :height, 150,
						      :resize?, _true,
						      :model, _self,
						      :mode, :many,
						      :data_selector, :|failures_display_tree()|,
						      :select_notifier, :|failure_selected()|,
						      :aspect, :failures_display_tree )
	popup << .items[:failures_tree_item].default_popup_menu
        separator_item.new( popup )
        _self.action(:view_traceback).place_control_on( popup, :menu )
	.items[:failures_tree_item].popup_menu << popup

	.items[:failure_details_window] << text_window.new( pw_2, 25, 55, _unset )
	.items[:failure_details_window].resize? << _true

	>> rc
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.hierarchy_popup_menu()
        ##
        ## Returns the popup menu for the hierarchy tree_item
        ##
        
        popup << popup_menu.new( .items[:hierarchy_tree_item] )

	_self.action(:load).place_control_on( popup, :menu )
	_self.action(:refresh).place_control_on( popup, :menu )
	separator_item.new( popup )
	_self.action(:run_test).place_control_on( popup, :menu )
	_self.action(:edit_method).place_control_on( popup, :menu )
	_self.action(:reset).place_control_on( popup, :menu )
	_self.action(:interrupt).place_control_on( popup, :menu )

        >> popup

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.title

	>> _self.message( :title )

_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.start_suite( a_suite )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.end_suite( a_suite )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.report_assert( type, _gather args )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_info(_gather args)
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.test_selected( a_sel )
	##
	## An element has been selected in the hierarchy list
	##

	# Update action states
	_self.manage_actions()

	# If the selection has failed, select the corresponding failure
	# in the failure window
	_if a_sel.size > 0
	_then
		selected_test << a_sel.an_element().key
		dt_mgr << .items[:failures_tree_item].tree_manager
		_for a_dt _over dt_mgr.children.elements()
		_loop
			a_dt.selected? << a_dt.key.is_kind_of?(test_failure) _andif
					  a_dt.key.failed_test() _is selected_test
		_endloop
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.manage_actions()
	##
	## Update action states
	##
	
	busy?               << _self.running?()
	hierarchy_sel       << .items[:hierarchy_tree_item].selection.an_element()
	failure_sel         << .items[:failures_tree_item].selection.an_element()
	hierarchy_selected? << hierarchy_sel _isnt _unset
	module_selected?    << hierarchy_selected? _andif hierarchy_sel.key.is_kind_of?( sw_module )
	test_selected?      << hierarchy_selected? _andif hierarchy_sel.key.is_kind_of?( test_case )
	failure_selected?   << failure_sel _isnt _unset _andif failure_sel.key.is_kind_of?( test_failure )
	
	_self.action(:load).enabled?           << _not busy? _and module_selected?
	_self.action(:edit_method).enabled?    << _not busy? _and test_selected?
	_self.action(:view_traceback).enabled? << _not busy? _and failure_selected?
	_self.action(:run_test).enabled?       << _not busy? _and hierarchy_selected?
	_self.action(:reset).enabled?          << hierarchy_selected?
	_self.action(:clear).enabled?          << _not busy?
	_self.action(:interrupt).enabled?      << busy?
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.running?()
	##
	## Returns true if a test is running
	##

	>> .thread _isnt _unset
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.run_engine( priority, method_name, _gather  args )
	##
	## Run given method in a background thread with given priority.
	## This will raise condition :engine_running if .thread is
	## already set (indicating the engine is already running)
	## and sets up condition handlers in the new thread.
	##
	## PRIORITY : The priority that the thread created should run
	## at.
	##
	## METHOD_NAME : The name of the method on _self to be executed
	##
	## ARGS : The arguments to be passed on to the method when it
	## is executed.
	##
	## The thread created will have its role and name set to a
	## string reflecting the class name and the method name
	## specified. The method run can change this if required.
	##
	
	_if .thread _isnt _unset
	_then
		condition.raise( :user_error,
				 :string, _self.message( :engine_running ) )
	_endif

	# Lock self to prevent the child running before the thead slot is set
	child_thread << _proc(model,method,args)
				model.int!run_engine(method,args)
			_endproc.fork_at(priority, _self,method_name,args)

	# Check that the child thread hasn't already finished before
	# setting the thread slot.
	_if child_thread.vm_status _isnt thread.status_terminated
	_then 
		.thread << child_thread
	_endif 

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.int!run_engine(method, _optional args)
	##
	## Called within background thread. Sets run status,
	## sets up condition handlers and runs method.
	##

	_handling _default
	
	.run_status      << :running
	.thread          << _thisthread
	_local role      << write_string(_self.class_name,%.,method)
	_thisthread.role << role
	_thisthread.set_name(role)
	_protect
		_if method.is_class_of?({})
		_then
			method.new_appending(_scatter args).send_to(_self)
		_else
			_self.perform(method,_scatter args)
		_endif
	_protection
		_if _thisthread _is .thread
		_then
			.run_status << :ready
			.thread << _unset
		_endif
		_self.manage_actions()
	_endprotect
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.interrupt_engine()
	##
	## Interrupt an active function
	##
	## If the thread is running, kills it and returns true	
	## If the engine was inactive or already doing cleanup,
	## returns false.
	##
	
	_if .run_status _is :inactive
	_then
		_self.resume_engine()
	_endif
	_if .run_status _isnt :running
	_then
		_return _false
	_endif
	.run_status << :cleanup
	.thread.kill_and_wait()
	
	>> _true
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.resume_engine()
	##
	## Resume a suspended thread. This does nothing unless
	## the run_status is :inactive. The new run_status
	## is :running
	##
	
	>> _if .run_status _isnt :inactive
	   _then
		   >> _false
	   _else		
		   .thread.resume()
		   .run_status << :running
		   >> _true
	   _endif
	
_endmethod
$
_pragma(classify_level=restricted)
_method test_runner_dialog.view_traceback()
	##
	## Callback from view_traceback action
	##

	_if ( d << .items[:traceback_viewer] ) _is _unset
	_then
		d << .items[:traceback_viewer] << traceback_viewer.new( {} )
		d.owner << _self
		d.activate_relative_to( _unset, _self.top_frame, 100, 100 )
	_else
		d.activate()
	_endif
		
	a_failure << .items[:failures_tree_item].selection.an_element().key
	d.show_traceback( a_failure.traceback )

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.toggle_sort_display_tests(value)
	## 
	## 
	_self.sort_display_tests? << value
	_self.refresh()
_endmethod
$

