#% text_encoding = iso8859_1
_package sw

#remex( :test_runner_dialog )
#$

_pragma(classify_level=restricted)
def_slotted_exemplar(:test_runner_dialog,
{
	{ :test_result,   _unset },
	{ :current_test,  _unset },
	{ :items,         _unset },
	{ :thread,        _unset },
	{ :run_status,    _unset },
	{ :display_trees, _unset },
	
	{ :controller,    _unset },
	{ :model,         _unset }
},
{ :gui_framework, :test_listener_interface } )
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.init( name, an_owning_framework, _optional properties )

	_super.init( name, an_owning_framework, properties )
	
	.items                    << property_list.new()

	.controller << test_runner_controller.new()
	.model << test_runner_model.new()
	.controller.set_model( .model )
	
	.controller.set_view( _self )
	.model.set_view( _self )
	

	>> _self  

_endmethod
$

_method test_runner_dialog.setup_progress_indicator( max_count )
	
		_self.install_progress_indicator(_self.message( :progress ),
					.model,
					:indicator,         bar_progress_indicator,
					:max_count,         max_count,
					:interrupt_message, :interrupt|()|,
					:progress_aspect,   :work_progress,
					:stop_aspect,       :work_completed )
_endmethod
$
#tests tree
_pragma(classify_level=restricted)
_method test_runner_dialog.selected_tests()
	##
	## Return a rope containing all tests at or below the current
	## selection
	##
	result << rope.new()
	_if .items[:hierarchy_tree_item].selection.size > 0
	_then 
		a_display_tree << .items[:hierarchy_tree_item].selection.an_element()
		_for a_child _over a_display_tree.depth_first()
		_loop
			_if ( a_test << a_child.key ).is_kind_of?( test_case ) _andif
			    a_test.get_name() _isnt _unset 
			_then
				result.add( a_test )
			_endif
		_endloop 
	_endif
	
	>> result
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.end_test( a_test )
	##
	## Callback from mtest_result
	##
	_global smt 
	smt << _self 
	run_count << .controller.test_result.run_count()
	error_count << .controller.test_result.error_count() + .controller.test_result.failure_count()
	fg_colour << _if error_count = 0
		     _then
			     # All passed so far
			     >> :green
		     _elif error_count = run_count
		     _then
			     # All failed so far
			     >> :red
		     _else
			     # Some passes and some failures
			     >> :orange
		     _endif 
	.model.changed( :work_progress, run_count )
	_self.set_progress_indicator_colour( colour.called( fg_colour ) )
	_self.changed( :tests_info, :text, _self.message( :runs_counter, run_count ) )
	
	.items[:hierarchy_tree_item].changed( :hierarchy_tree, :redraw_keys, { a_test } )

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_error( a_test_failure )
	##
	## Callback from mtest_result
	##

	_self.changed( :error_info, :text, _self.message( :errors_counter, .controller.test_result.error_count().write_string ) )
	_self.changed(:failures_display_tree, :refresh )
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_failure( a_test_failure )
	##
	## Callback from mtest_result
	##
	
	_self.changed( :failure_info, :text, _self.message( :failures_counter, .controller.test_result.failure_count().write_string ) )
	_self.changed(:failures_display_tree, :refresh )

_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.reset()
	##
	## Callback from reset action
	##

	_self.reset_test_cases()
	
_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.clear()
	##
	## Callback from clear action
	##

	_self.int!clear()

	# Refresh the tree to remove previous results
	_self.changed(:hierarchy_tree, :refresh )
	_self.changed(:failures_display_tree, :refresh )

	_self.manage_actions()

_endmethod 
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.int!clear()
	##
	## Clear actions
	##

	.current_test << _unset
	.controller.test_result  << _unset

	_self.changed(:failures_display_tree, :refresh )
	_self.changed( :work_completed )
	_self.changed( :status_info, :text, "" )
	_self.changed( :tests_info, :text, _self.message( :runs_counter, 0 ) )
	_self.changed( :error_info, :text, _self.message( :errors_counter, 0 ) )
	_self.changed( :failure_info, :text, _self.message( :failures_counter, 0 ) )
	
_endmethod 
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.reset_test_cases()
	##
	## Reset test_result on all selected test cases
	##
	
	_for a_test _over _self.selected_tests().fast_elements()
	_loop
		a_test.reset_result()
		_self.changed(:hierarchy_tree, :redraw_keys, { a_test } )
	_endloop 

_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.kill_test_thread()
	##
	## Kill main test thread and all children threads created
	## in active test suites.
	##
	
	_if ( result? << _self.interrupt_engine() )
	_then
		_if active_test_suite _isnt _unset
		_then 
			active_test_suite.kill_all_active_tests()
		_endif 
	_endif
	
	>> result?
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.interrupt()
	##
	## Callback from Interrupt action
	##
	
	_if _self.kill_test_thread()
	_then
		_self.changed( :status_info, :text, _self.message( :interrupted ) )
		_self.manage_actions()
	_endif 

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.failures_display_tree()
	##
	## Return a rope of display trees to populate the failures
	## tree 
	##
	
	failures << rope.new()
	_if .controller.test_result _isnt _unset
	_then
		_for e _over .controller.test_result.errors()
		_loop
			failures.add(e)
		_endloop
		_for f _over .controller.test_result.failures()
		_loop
			failures.add(f)
		_endloop 
	_endif

	result << rope.new()
	_if failures.size = 0
	_then
		result.add( display_tree.new( _self.message( :no_failures ) ) )
	_else 
		_for a_failure _over failures.elements()
		_loop
			dt << display_tree.new( a_failure )
			a_colour << _if a_failure.is_failure?()
				    _then
					    >> :black
				    _else
					    >> :red
				    _endif
			dt.styled_string << styled_string.new( a_colour, a_failure )
			result.add( dt )
		_endloop 
	_endif 

	>> result

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.hierarchy_tree()
	##
	## Return a rope of display trees to populate the test tree
	##

	.display_trees   << rope.new()

	# Need to create a new test_suite_finder to make sure its cache
	# is up-to-date
	result       << rope.new_for( smallworld_product.products.size )
	trd_mod_name << test_runner_dialog.module_name
	tf           << test_suite_finder.new()
	
	_for a_product _over smallworld_product.products.fast_elements()
	_loop
		# Create a display tree for the product. This will only be
		# added to the results if it contains test modules
		product_display_tree << display_tree.new( a_product, _unset )
		product_display_tree.styled_string << {:image, { :product, trd_mod_name }, a_product.name.write_string }

		_for a_module _over a_product.defined_modules.elements()
		_loop
			_if a_module.test_module?
			_then
				module_name << a_module.name
				a_colour << _if a_module.loaded?
					    _then
						    >> :blue
					    _else
						    >> :black
					    _endif
				# Create a display tree for the module. This will only be
				# added to the product tree if it contains tests
				module_display_tree << display_tree.new( a_module )
				module_display_tree.styled_string << {:image, { :module, trd_mod_name }, a_colour, module_name.write_string }
				_if a_module.loaded?
				_then
					# For loaded modules, find all test_case classes in the image
					_for a_suite _over tf.find_classes_for_module( module_name ).fast_elements()
					_loop
						_self.suite_tree_list( a_suite, module_display_tree )
					_endloop 
					
				_else 
					# For modules not yet loaded, use information in the module.def file
					_for t _over a_module.tests( :framework, :munit )
					_loop
						test_display_tree << display_tree.new( t, _unset, module_display_tree )
						test_display_tree.styled_string << {:image, { :hierarchy, trd_mod_name }, t.name.write_string }
						
						_for elem  _over t.args.split_by( %space ).elements()
						_loop
							_if ( rt << get_global_value(elem.as_symbol() ) ) _isnt _unset
							_then
								_self.suite_tree_list( rt, test_display_tree )
							_endif
						_endloop
						.display_trees.add( t )
					_endloop
				_endif 
				# Only include the module if it had any tests
				_if module_display_tree.children?
				_then
					product_display_tree.add_child( module_display_tree )
				_endif 
			_endif
		_endloop

		# Only include the product if it had any test modules
		_if product_display_tree.children?
		_then 
			result.add( product_display_tree )
		_endif 
	_endloop 

	# Create a final orphan tree to display any tests in the image
	# that do not belong in any modules
	orphan_tree << display_tree.new( :undeclared )
	orphan_tree.styled_string << {:image, { :hierarchy, trd_mod_name }, _self.message( :undeclared_tests ) }

	_for suite_name _over tf.get_test_suite_owner_names().fast_elements()
	_loop
		_if ( suite << get_global_value(suite_name) ) _isnt _unset
		_then 
			_self.suite_tree_list( suite, orphan_tree )
		_endif 
	_endloop 

	_if orphan_tree.children?
	_then 
		result.add( orphan_tree )
	_endif 

	>> result
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.suite_tree_list( a_suite, parent_display_tree )
	##
	## Build display_trees for A_SUITE in PARENT_DISPLAY_TREE
	## This will create a display_tree for the suite itself and for
	## all its children.
	## Both A_SUITE and its children may be instances of test_suite
	## or test_case.
	##

	trd_mod_name << test_runner_dialog.module_name

	_if _not .display_trees.includes?( a_suite )
	_then 
		.display_trees.add( a_suite )
		suite_display_tree << display_tree.new( a_suite )
		suite_display_tree.styled_string << {:image, { :hierarchy, trd_mod_name }, a_suite }
		
		_for a_test _over a_suite.tests()
		_loop
			_if a_test.is_kind_of?( test_suite )
			_then
				_self.suite_tree_list( a_test, suite_display_tree )
			_else
				_if _not .display_trees.includes?( a_test )
				_then
					.display_trees.add( a_test )
					a_display_tree << display_tree.new( a_test, _unset, suite_display_tree )
					a_display_tree.set_value_method( a_test, :|value_for_display_tree()| )
					a_display_tree.styled_string << styled_string.new( :value, :icon, :value, :name )
				_endif
			_endif 
		_endloop
	_endif

	_if suite_display_tree _isnt _unset _andif suite_display_tree.children?
	_then
		parent_display_tree.add_child( suite_display_tree )
	_endif 

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.failure_selected( a_sel )
	##
	## An element has been selected in the failures tree
	##

	details << _if a_sel.size = 1
		   _then 
			   a_failure << a_sel.an_element().key
			   >> _if a_failure.is_kind_of?( char16_vector )
			      _then
				      >> a_failure
			      _elif a_failure.is_failure?()
			      _then
				      >> a_failure.write_string
			      _else
				      >> a_failure.full_traceback_text()
			      _endif
		   _else
			   >> ""
		   _endif 
	.items[:failure_details_window].value << details

	_self.manage_actions()
	
_endmethod
$

_pragma(classify_level=advanced)
_method test_runner_dialog.build_framework_gui( a_container )
	##
	## Build gui for work area
	##
	
	rc << rowcol.new( a_container, _unset, 1, :pixel )
	rc.resize? << _true
	rc.row_resize_values << { 100, 0 }
	
	pw_1 << paned_window.new( rc, :side_by_side?, _true )
	pw_1.col_alignment << :fill
	pw_1.row_alignment << :fill

	.items[:hierarchy_tree_item] << munit_tree_item.new( .controller, pw_1 )
	
	pw_2 << paned_window.new( pw_1, :side_by_side?, _false )
	pw_2.resize? << _true
	
	.items[:failures_tree_item] << tree_item.new( pw_2,
						      :width, 500, :height, 150,
						      :resize?, _true,
						      :model, _self,
						      :mode, :many,
						      :data_selector, :|failures_display_tree()|,
						      :select_notifier, :|failure_selected()|,
						      :aspect, :failures_display_tree )
	popup << .items[:failures_tree_item].default_popup_menu
        separator_item.new( popup )
        _self.action(:view_traceback).place_control_on( popup, :menu )
	.items[:failures_tree_item].popup_menu << popup
	
	.items[:failure_details_window] << text_window.new( pw_2, 25, 55, _unset )
	.items[:failure_details_window].resize? << _true

	>> rc
	
_endmethod
$

_pragma(classify_level=restricted)
_private _method test_runner_dialog.hierarchy_popup_menu()
        ##
        ## Returns the popup menu for the hierarchy tree_item
        ##
        
        popup << popup_menu.new( .items[:hierarchy_tree_item] )

	_self.action(:load).place_control_on( popup, :menu )
	_self.action(:refresh).place_control_on( popup, :menu )
	separator_item.new( popup )
	_self.action(:run_test).place_control_on( popup, :menu )
	_self.action(:edit_method).place_control_on( popup, :menu )
	_self.action(:reset).place_control_on( popup, :menu )
	_self.action(:interrupt).place_control_on( popup, :menu )

        >> popup

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.title

	>> _self.message( :title )

_endmethod 
$

_pragma(classify_level=restricted)
_method test_runner_dialog.start_suite( a_suite )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.end_suite( a_suite )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.report_assert( type, _gather args )
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.add_info(_gather args)
	##
	## Callback from mtest_result
	##

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.test_selected( a_sel )
	##
	## An element has been selected in the hierarchy list
	##

	_self.select_test( a_sel.an_element().key )
	
	
	## something else should do this.
	_self.manage_actions()


	
	# If the selection has failed, select the corresponding failure
	# in the failure window
	_if a_sel.size > 0
	_then
		selected_test << a_sel.an_element().key
		dt_mgr << .items[:failures_tree_item].tree_manager
		_for a_dt _over dt_mgr.children.elements()
		_loop
			a_dt.selected? << a_dt.key.is_kind_of?(test_failure) _andif
					  a_dt.key.failed_test() _is selected_test
		_endloop
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.manage_actions()
	##
	## Update action states
	##
	
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.running?()
	##
	## Returns true if a test is running
	##

	>> .thread _isnt _unset
	
_endmethod
$







_method test_runner_dialog.select_test( a_test )
	.controller.select_test ( a_test )
_endmethod
$

#refactor
_method test_runner_dialog.tests_for_selection( a_test )
	## currently just return tests for current selection
	_return .items[:hierarchy_tree_item].selected_tests()
_endmethod
$

#refactor
_pragma(classify_level=restricted)
_method test_runner_dialog.view_traceback()
	##
	## Callback from view_traceback action
	##

	_if ( d << .items[:traceback_viewer] ) _is _unset
	_then
		d << .items[:traceback_viewer] << traceback_viewer.new( {} )
		d.owner << _self
		d.activate_relative_to( _unset, _self.top_frame, 100, 100 )
	_else
		d.activate()
	_endif
		
	a_failure << .items[:failures_tree_item].selection.an_element().key
	d.show_traceback( a_failure.traceback )

_endmethod
$


### reinstate on model
_pragma(classify_level=restricted)
_method test_runner_dialog.run_engine( priority, method_name, _gather  args )
	##
	## Run given method in a background thread with given priority.
	## This will raise condition :engine_running if .thread is
	## already set (indicating the engine is already running)
	## and sets up condition handlers in the new thread.
	##
	## PRIORITY : The priority that the thread created should run
	## at.
	##
	## METHOD_NAME : The name of the method on _self to be executed
	##
	## ARGS : The arguments to be passed on to the method when it
	## is executed.
	##
	## The thread created will have its role and name set to a
	## string reflecting the class name and the method name
	## specified. The method run can change this if required.
	##
	
	_if .thread _isnt _unset
	_then
		condition.raise( :user_error,
				 :string, _self.message( :engine_running ) )
	_endif

	# Lock self to prevent the child running before the thead slot is set
	child_thread << _proc(model,method,args)
				model.int!run_engine(method,args)
			_endproc.fork_at(priority, _self,method_name,args)

	# Check that the child thread hasn't already finished before
	# setting the thread slot.
	_if child_thread.vm_status _isnt thread.status_terminated
	_then 
		.thread << child_thread
	_endif 

_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.int!run_engine(method, _optional args)
	##
	## Called within background thread. Sets run status,
	## sets up condition handlers and runs method.
	##

	_handling _default
	
	.run_status      << :running
	.thread          << _thisthread
	_local role      << write_string(_self.class_name,%.,method)
	_thisthread.role << role
	_thisthread.set_name(role)
	_protect
		_if method.is_class_of?({})
		_then
			method.new_appending(_scatter args).send_to(_self)
		_else
			_self.perform(method,_scatter args)
		_endif
	_protection
		_if _thisthread _is .thread
		_then
			.run_status << :ready
			.thread << _unset
		_endif
		_self.manage_actions()
	_endprotect
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.interrupt_engine()
	##
	## Interrupt an active function
	##
	## If the thread is running, kills it and returns true	
	## If the engine was inactive or already doing cleanup,
	## returns false.
	##
	
	_if .run_status _is :inactive
	_then
		_self.resume_engine()
	_endif
	_if .run_status _isnt :running
	_then
		_return _false
	_endif
	.run_status << :cleanup
	.thread.kill_and_wait()
	
	>> _true
	
_endmethod
$

_pragma(classify_level=restricted)
_method test_runner_dialog.resume_engine()
	##
	## Resume a suspended thread. This does nothing unless
	## the run_status is :inactive. The new run_status
	## is :running
	##
	
	>> _if .run_status _isnt :inactive
	   _then
		   >> _false
	   _else		
		   .thread.resume()
		   .run_status << :running
		   >> _true
	   _endif
	
_endmethod
$