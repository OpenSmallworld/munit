#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
#todo this is named mixin but it actually is an object
def_slotted_exemplar(:fake_amqp_test_mixin,
	{{:current_channel, _unset, :readable}},
	{})
$
_pragma(classify_level=debug)
fake_amqp_test_mixin.define_shared_variable(:current_factory,
	## shared variable so it can be shared between test runs when
	## application is not reopened
	_unset,
	:public	)
$

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.find_channel(_optional queue_name, reset_messages?)
	## queue_name: only applicable to channels which are 
	## receiving messages on a queue receive_queue
	## if channel_name is not set, the last channel is set as current
	## if RESET_MESSAGES? is true then remove all messages
	## published on the channel so far
	
	channels << _self.current_factory.connection.channels
	_if queue_name _is _unset
	_then
		.current_channel << channels[channels.size]
		_if reset_messages? _is _true
		_then
			.current_channel.published.empty()
		_endif 
		_return _self
	_endif
	
	_for channel _over channels.elements()
	_loop
		_if channel.receive_queue = queue_name
		_then
			.current_channel << channel
			_if reset_messages? _is _true
			_then
				.current_channel.published.empty()
			_endif
			_return _self
		_endif
	_endloop
	.current_channel << _unset

	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_connection_is_opened() 
	_self.assert_true(_self.current_factory.connection _isnt _unset)
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_channel_is_opened()
	_self.assert_true(.current_channel _isnt _unset)
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_qos_is_declared(qos)
	_self.assert_deep_equals(.current_channel.qos, qos)
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_queues_are_bound(bound_queues)
	_self.assert_deep_equals(.current_channel.bound_queues, bound_queues)
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_queues_are_declared(queues)
	_self.assert_deep_equals(.current_channel.queues, queues)
	_return _self 
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_exchange_is_declared(exchange)
	_self.assert_deep_equals(.current_channel.exchange, exchange)
	_return _self 
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_channel_is_closed()
	_if .current_channel _isnt _unset
	_then 
		_self.assert_true(.current_channel.channel_closed)
	_endif 
	_return _self 
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_connection_is_closed()
	_self.assert_true(_self.current_factory.connection.connection_closed)
	_return _self 
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_message_is_published(message)
	_thisthread.sleep(50)
	_if _not .current_channel.published.empty?
	_then
		actual_message << _self.convert_published_message(.current_channel.published.last)
		_if _not message.includes_key?(:body)
		_then
			# to be aserted later using then_response_is_*() API
			_self.properties[:published_message_body]<< actual_message.remove_key(:body)
		_endif 
		_self.assert_deep_equals(actual_message, message)
	_else
		_self.fail("No published messages")
	_endif
	_return _self
_endmethod

_pragma(classify_level=debug, usage=subclassable)
_method fake_amqp_test_mixin.convert_published_message(message)
	##
	## Default implementation just returns a deep copy of MESSAGE
	##
	## This method can be subclassed to pre-process the published message before it
	## is checked. The method should return a new object based on the contents of
	## MESSAGE.
	##
	_return message.deep_copy()
_endmethod
$
_pragma(classify_level=debug)
_method fake_amqp_test_mixin.convert_published_vertx_adaptor_message(message _optional body_to_string?)
	## 
	##
	published_body << message[:body]
	split_index << published_body.index_of(10)
	_if split_index _isnt _unset
	_then
		header << _self.convert_to_string( published_body.slice(1, split_index - 1) )
		body << published_body.slice(split_index + 1, published_body.size)
		_if body_to_string? _isnt _false 
		_then
			body << _self.convert_to_string( body )
		_endif 
	_else
		header << _self.convert_to_string( published_body )
		body << _unset
	_endif
	converted_message << property_list.new_with(
				     :exchange, message[:exchange],
				     :routing_key, message[:routing_key],
				     :properties, message[:properties],
				     :header, header,
				     :body, body
					   )

	>> converted_message
_endmethod
$

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_error_is_published(message, body)
	_if _not .current_channel.published.empty?
	_then
		published << _self.convert_published_message(.current_channel.published.last)
		_self.assert_true(published[:body].matches?(body), "published result '"+published[:body]+"' doesn't match: "+body)
		published.remove_key(:body)
		_self.assert_deep_equals(published, message)
	_else
		_self.fail("No published messages")
	_endif
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_messages_are_published(messages)

	actual_messages << rope.new()
	_for message _over .current_channel.published.fast_elements()
	_loop
		converted_message << _self.convert_published_message(message)
		actual_messages.add_last(converted_message)
	_endloop
	sort_proc<< _proc @sort_message( a, b)
			    ap<< property_list.new_with( _scatter a )
			    bp<< property_list.new_with( _scatter b )
			    >> _if ap[:exchange] <> bp[:exchange]
			       _then
				       >> ap[:exchange] > bp[:exchange]
			       _elif ap[:routing_key] <> bp[:routing_key]
			       _then
				       >> ap[:routing_key] > bp[:routing_key]
			       _else
				       >> ap[:body] > bp[:body]
			       _endif 	    
		    _endproc
	exp<< rope.new_from(sorted_collection.new_from(messages, sort_proc))
	act<< rope.new_from(sorted_collection.new_from(actual_messages, sort_proc))
	_self.assert_deep_equals(exp, act)
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_message_is_acked(ack)
	_thisthread.sleep(50)
	_self.assert_deep_equals(.current_channel.acked, ack, "then_message_is_acked")
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_message_is_nacked(nack)
	_self.assert_deep_equals(.current_channel.nacked, nack, "then_message_is_nacked")
	_return _self
_endmethod
$
_pragma(classify_level=debug)
_method fake_amqp_test_mixin.given_a_fake_rabbit()
	_local me<< _self
	stub_method_helper.replace_method(rabbitmq_connection_factory, :|new()|,
		_proc @new(uri_key, uri_name)
			_import me
			>> me.current_factory<< fake_factory.new()
		_endproc )
	_return _self
_endmethod

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.convert_to_signed_bytes(string _optional encoding)
	## returns STRING encoded using ENCODING (defaults to :utf8) as a signed_byte_vector 
	msg<< text_converter.new(encoding.default(:utf8),_true).translate(string)
	sz << msg.size
	sb_msg << signed_byte_vector.new(sz)
	sb_msg.extract_from_bytes(1, sz, msg)
	>> sb_msg
_endmethod
$
_pragma(classify_level=debug)
_method fake_amqp_test_mixin.convert_to_string(a_signed_byte_vector _optional encoding)
	## returns A_SIGNED_BYTE_VECTOR decoded using ENCODING (defaults to :utf8) as a string
	sz << a_signed_byte_vector.size
	ub_vector<< byte_vector.new(sz)
	a_signed_byte_vector.deposit_as_bytes(1,sz,ub_vector)
	>> text_converter.new(encoding.default(:utf8),_false).translate(ub_vector)
_endmethod
$
_pragma(classify_level=debug)
_method fake_amqp_test_mixin.given_an_async_request(_gather props)
	## 
	## 
	request_props << property_list.new_from_gathered(props)

	headers << _if request_props[:headers] _isnt _unset
		   _then
			   >> property_list.new_from_gathered(request_props[:headers])
		   _else
			   >> property_list.new()
		   _endif

	params << _if request_props[:params] _isnt _unset
		  _then
			  >> property_list.new_from_gathered(request_props[:params])
		  _else
			  >> _unset
		  _endif
	method << request_props[:method].default(:get)
	
	request_msg <<  property_list.new_with(:path, request_props[:path],
					       :params, params,
					       :headers, headers,
					       :method, method,
					       :request_id, request_props[:request_id])
	_self.properties[:request_msg] << request_msg
	>> _self
_endmethod
$
_pragma(classify_level=debug)
_method fake_amqp_test_mixin.given_a_request_body(body _optional encoding)
	## 
	##
	body_str<< _if body.is_kind_of?(charindex_mixin)
		   _then >> body
		   _else >> json_encoder.new().generate_string(body)			   
		   _endif 
	_self.properties[:request_msg_body]<< _self.convert_to_signed_bytes( body_str, encoding )
	>> _self 
_endmethod
$

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.given_a_raw_async_request(request_msg)
	## 
	## 
	_self.properties[:raw_request_msg] << request_msg
	>> _self
_endmethod
$

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_the_message_is_published(_gather response_props)
	## 

	_self.then_message_is_acked(_self.envelope.delivery_tag)
	
	props << property_list.new_from_gathered(response_props)

	response_headers << equality_property_list.new_from_gathered(props[:response_headers])

	header_props << property_list.new_with(:request_id, props[:request_id],
					       :code, props[:code],
					       :headers, response_headers)
	header << json_encoder.new().generate_string(header_props)

	
	body << _if props[:body] _is _unset
		_then
			>> _unset 
		_elif response_headers["content-type"] = "text/plain"
		_then
			>> props[:body]
		_else
			body_props << property_list.new_from_gathered(props[:body])
			>> json_encoder.new().generate_string(body_props)
		_endif 
		
	response << property_list.new_with(:exchange, props[:exchange],
					   :routing_key, props[:routing_key],
					   :header, header, 
					   :body, body,
					   :properties, props[:properties])
	_if _not props.includes_key?(:body)
	_then
		response.remove_key(:body)
	_endif 
	>> _self.then_message_is_published(response)
_endmethod
$

_pragma(classify_level=debug)
_method fake_amqp_test_mixin.then_error_is_published(request_id, code, error_msg, _gather options)
	## 
	##

	_self.then_message_is_acked(_self.envelope.delivery_tag)
	
	params << property_list.new_from_gathered(options)
	
	response_headers << property_list.new()
	response_headers["content-type"] << "text/plain"
	_if (language << params[:language]) _isnt _unset
	_then
		response_headers["content-language"] << language
	_endif
	
	properties << _if (correlation_id << params[:correlation_id]) _isnt _unset
		_then
			>> {:delivery_mode, 2, :correlation_id, correlation_id}
		_else 
			>> {:delivery_mode, 2}
		_endif
	response << property_list.new_with(:exchange, "ssm.extraction",
					   :routing_key, "ssm.vertx.response",
					   :header, json_encoder.new().generate_string(property_list.new_with(:request_id, request_id, :code, code, :headers, response_headers)),
					   :body, error_msg,
					   :properties, properties)
	>> _self.then_message_is_published(response)	
_endmethod
$

