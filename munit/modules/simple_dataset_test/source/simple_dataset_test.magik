#% text_encoding = iso8859_1
_package sw
$

#remex( :simple_dataset_test )
#$

def_slotted_exemplar( :simple_dataset_test,
	{
		{ :dataset,    _unset },
		{ :collection, _unset }
	},
	{ :test_case } )
$

#
# CREATION INFRASTRUCTURE
#

_pragma(classify_level=restricted)
_method simple_dataset_test.set_up()
	## 
	## 
	.dataset << _unset
	.collection << _unset 
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset( config_spec )
	## 
	## 
	.dataset << simple_dataset.new( :test_dataset, config_spec )

	>> _self.assert_is( :test_dataset, .dataset.name )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_collection( fields_spec )
	## 
	## 
	>> _if _self.create_dataset( property_list.new_with(
					     :test_collection,
					     fields_spec ) )
	   _then
		   .collection << .dataset.collections[ :test_collection ]
		   
		   >> _self.assert_not_unset( .collection, "No test collection found" )
	   _else
		   >> _false
	   _endif 
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_data_test_collection()
	## 
	## 
	>> _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :field2,
					      :type, :ds_string,
					      :size, 10,
					      :key?, _false )
		    } )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_geom_test_collection()
	## 
	## 
	>> _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :geom1,
					      :type, :simple_point )
		    } )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.create_dataset_with_joined_collections( join_flavour )
	## 
	##
	_local join_flavour_params <<
		property_list.new_with(
			:|0toN|, { _false, _true, _false, :children },
			:|1toN|, { _false, _true, _true,  :children  },
			:|0to1|, { _true , _true, _false, :child } )
					      
	( parent_simple_result?, child_simple_result?, parent_id_mandatory?, parent_join_name ) <<
		( _scatter join_flavour_params[ join_flavour ] )
	>> _self.create_dataset( property_list.new_with(
					 :parent,
					 { property_list.new_with(
						   :name, :id,
						   :type, :ds_int,
						   :key?, _true ),
					   property_list.new_with(
						   :name,           parent_join_name,
						   :join_type,      :follow,
						   :result_table,   :child,
						   :simple_result?, parent_simple_result?,
						   :condition,      { :id, :|=|, :parent_id } )
					 },
					 :child,
					 { property_list.new_with(
						   :name, :id,
						   :type, :ds_int,
						   :key?, _true ),
					   property_list.new_with(
						   :name,       :parent_id,
						   :type,       :ds_int,
						   :key?,       _false,
						   :mandatory?, parent_id_mandatory? ),
					   property_list.new_with(
						   :name,           :parent,
						   :join_type,      :follow,
						   :result_table,   :parent,
						   :simple_result?, child_simple_result?,
						   :condition,      { :parent_id, :|=|, :id } )
					 } ) )
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.collection( name )
	## 
	## 
	>> .dataset.collections[ name ]
_endmethod
$

#
# CUSTOM ASSERTIONS
#

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_collection_size( expected_size )
	## 
	## 
	_self.assert_is( expected_size, .collection.size,
			 write_string( "Expected ",
				       expected_size,
				       " elements in the collection, got ",
				       .collection.size ) )
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_collection_fields( key_field_names, phys_field_names, geom_field_names, join_field_names )
	## 
	##
	_self.int!assert_collection_fields( :key_field_names, key_field_names )
	_self.int!assert_collection_fields( :physical_field_names, phys_field_names )
	_self.int!assert_collection_fields( :geometry_field_names, geom_field_names )
	_self.int!assert_collection_fields( :join_field_names, join_field_names )
_endmethod
$

_pragma(classify_level=restricted)
_private _method simple_dataset_test.int!assert_collection_fields( which_fields, expected_values )
	## 
	##
	_local expected_set << set.new_from( expected_values )
	_local actuals_set << set.new_from( .collection.perform( which_fields ) )

	_local extra_actuals << actuals_set.difference( expected_set )
	_local extra_expected << expected_set.difference( actuals_set )

	_self.assert_is ( 0, extra_actuals.size,
			  write_string( "Unexpected ",
					which_fields,
					":- ",
					extra_actuals.as_simple_vector().join_as_strings( %, ) ) )
	_self.assert_is ( 0, extra_expected.size,
			  write_string( "Missing ",
					which_fields,
					":- ",
					extra_expected.as_simple_vector().join_as_strings( %, ) ) )
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_phys_field_properties( field_name, key?, value_class, _optional size, mandatory? )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_physical?,
			       write_string( "Expected ", field_name, " to be physical but it wasn't" ) )
	_then
		_self.assert_is( key?, fd.is_key?,
				 write_string( "Expected key? for ",
					       field_name,
					       " to be ",
					       key?, ", got ", fd.is_key? ) )
		_self.assert_true( value_class.is_class_of?( fd.type.class ),
				   write_string( "Expected value class for ",
						 field_name,
						 " to be ",
						 value_class, ", got ", fd.type.class ) )
		_if size _isnt _unset 
		_then
			_self.assert_is( size, fd.type.size,
					 write_string( "Expected size for ",
						       field_name,
						       " to be ",
						       size, ", got ", fd.type.size ) )
		_endif

		_if mandatory? _isnt _unset 
		_then
			_self.assert_is( mandatory?, fd.mandatory?,
					 write_string( "Expected mandatory? for ",
						       field_name,
						       " to be ",
						       mandatory?, ", got ", fd.mandatory? ) )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_derived_field_properties( field_name, value_class )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_derived?,
			       write_string( "Expected ", field_name, " to be derived but it wasn't" ) )
	_then
		_self.assert_true( value_class.is_class_of?( fd.type.class ),
				   write_string( "Expected value class for ",
						 field_name,
						 " to be ",
						 value_class, ", got ", fd.type.class ) )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_geom_field_properties( field_name, geom_type )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_geometry?,
			       write_string( "Expected ", field_name, " to be geometry but it wasn't" ) )
	_then
		_self.assert_is( geom_type, fd.geom_type,
				 write_string( "Expected geom_type for ",
					       field_name,
					       " to be :",
					       geom_type, ", got :", fd.geom_type ) )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.assert_non_mandatory_field_properties( field_name, value_class )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) )
	_then
		
	    _self.assert_false( fd.mandatory?,
			       write_string( "Expected ", field_name, " to be non mandatory but it wasn't" ) )
	_endif
_endmethod
$


_pragma(classify_level=restricted)
_method simple_dataset_test.assert_join_field_properties( field_name, result_table_name, join_type, simple_result? )
	## 
	## 
	_if _self.assert_not_unset( fd << .collection.field( field_name ), write_string( "Didn't find ", field_name ) ) _andif
	    _self.assert_true( fd.is_join?,
			       write_string( "Expected ", field_name, " to be join but it wasn't" ) )
	_then
		_self.assert_is( join_type, fd.join_type,
				 write_string( "Expected join_type for ",
					       field_name,
					       " to be :",
					       join_type, ", got :", fd.join_type ) )
		_self.assert_is( result_table_name, fd.result_table_name,
				 write_string( "Expected ", result_table_name,
					       " to be the result of join ", field_name,
					       " but got ", fd.result_table_name ) )

		_self.assert_is( simple_result?, fd.simple_result?,
				 write_string( "Expected ", field_name, ".simple_result? ",
					       " to return ", simple_result?, 
					       " but got ", fd.simple_result? ) )
	_endif 
_endmethod
$


#
# ACTUAL TESTS
#

_pragma(classify_level=restricted)
_method simple_dataset_test.test_create_empty_dataset()
	## 
	## 
	_if ( _self.create_dataset( property_list.new() ) )
	_then 
		_self.assert_is( 0, .dataset.collections.size )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_create_no_fields_collection()
	## 
	##
	_if _self.create_dataset_with_collection( {} )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( {}, {}, {}, {} )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.int!test_create_one_key_field_collection( type, size, expected_class )
	## 
	##
	_local field_params <<
		property_list.new_with( :name,   :field1,
					:type,   type,
					:key?,   _true )
	_if size _isnt _unset 
	_then
		field_params[ :size ] << size
	_endif

	_if _self.create_dataset_with_collection( { field_params } ) _then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1 }, {}, {} )

		_self.assert_phys_field_properties( :field1, _true, expected_class )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.define_one_key_field_test( type, size, expected_class_string )
	## 
	## 
	_local method_template <<
		write_string(
			"_proc()", newline_char,
			"        _self.int!test_create_one_key_field_collection( :#1, #2, #3 )", newline_char,
			"_endproc", newline_char )
	_local method_text << message_handler.format_text_with( method_template, { type, size, expected_class_string } )

	_self.define_method( :test_create_one_key_ + type + :_field_collection|()|, method_text.evaluate(), _false )
_endmethod
$

simple_dataset_test.define_one_key_field_test( :ds_int, _unset, "integer" )
$
simple_dataset_test.define_one_key_field_test( :ds_float, _unset, "float" )
$
simple_dataset_test.define_one_key_field_test( :ds_string, 10, "char16_vector" )
$
simple_dataset_test.define_one_key_field_test( :ds_date, _unset, "ds_date" )
$
simple_dataset_test.define_one_key_field_test( :date_time, _unset, "date_time" )
$
simple_dataset_test.define_one_key_field_test( :ds_bool, _unset, "_true" )
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_two_physical_fields_collection()
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :field2,
					      :type, :ds_float ) } )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1, :field2 }, {}, {} )
		
		_self.assert_phys_field_properties( :field1, _true,  integer )
		_self.assert_phys_field_properties( :field2, _false, float )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_non_mandatory_field_collection()
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name,       :field2,
					      :type,       :ds_float,
					      :mandatory?, _false ) } )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1, :field2 }, {}, {} )
		
		_self.assert_phys_field_properties( :field1, _true,  integer, _unset, _true )
		_self.assert_phys_field_properties( :field2, _false, float, _unset, _false )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.int!test_geom_field_collection( geom_type )
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ),
		      property_list.new_with( :name, :geom1,
					      :type, geom_type ) } )
	_then
		_self.assert_collection_size( 0 )
		_self.assert_collection_fields( { :field1 }, { :field1 }, { :geom1 }, {} )
		
		_self.assert_phys_field_properties( :field1, _true,  integer )
		_self.assert_geom_field_properties( :geom1, geom_type )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.define_geom_field_collection_test( geom_type )
	## 
	## 
	_local method_template <<
		write_string(
			"_proc()", newline_char,
			"        _self.int!test_geom_field_collection( :#1 )", newline_char,
			"_endproc", newline_char )
	_local method_text << message_handler.format_text_with( method_template, { geom_type } )

	_self.define_method( :test_ + geom_type + :_geom_field_collection|()|, method_text.evaluate(), _false )
_endmethod
$

simple_dataset_test.define_geom_field_collection_test( :simple_point )
$
simple_dataset_test.define_geom_field_collection_test( :simple_chain )
$
simple_dataset_test.define_geom_field_collection_test( :simple_area )
$
simple_dataset_test.define_geom_field_collection_test( :text )
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_define_follow_0n_join_between_two_tables()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then 
		.collection << _self.collection( :parent )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_join_field_properties( :children, :child, :follow, _false )
		
		.collection << _self.collection( :child )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_phys_field_properties( :parent_id, _false, integer, _unset, _false )
		_self.assert_join_field_properties( :parent, :parent, :follow, _true )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_define_follow_1n_join_between_two_tables()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|1toN| )
	_then 
		.collection << _self.collection( :parent )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_join_field_properties( :children, :child, :follow, _false )
		
		.collection << _self.collection( :child )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_phys_field_properties( :parent_id, _false, integer, _unset, _true )
		_self.assert_join_field_properties( :parent, :parent, :follow, _true )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_define_follow_01_join_between_two_tables()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0to1| )
	_then 
		.collection << _self.collection( :parent )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_join_field_properties( :child, :child, :follow, _true )
		
		.collection << _self.collection( :child )
		_self.assert_phys_field_properties( :id, _true, integer )
		_self.assert_phys_field_properties( :parent_id, _false, integer, _unset, _false )
		_self.assert_join_field_properties( :parent, :parent, :follow, _true )
	_endif 
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_insert_one_record_increases_collection_size()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )

		.collection.insert( { 1, "string" } )

		_self.assert_collection_size( 1 )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_inserted_record_can_be_retrieved()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		.collection.insert( { 1, "string" } )

		_local rec << .collection.an_element()

		_self.assert_is( 1, rec.field1 )
		_self.assert_equals( "string", rec.field2 )
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_two_inserted_records_can_be_retrieved()
	## 
	##
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_self.assert_collection_size( 2 )

		_local i << 1
		_for r _over .collection.fast_elements()
		_loop
			_self.assert_is( data[ i ][ 1 ], r.field1 )
			_self.assert_is( data[ i ][ 2 ], r.field2 )
			i +<< 1
		_endloop
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_cant_insert_duplicate_key()
	## 
	## 
	_if _self.create_dataset_with_data_test_collection()
	_then
		_local rec << .collection.insert( { 1, "string" } )
		_self.assert_not_unset( rec, "First insertion failed" )

		_local rec2 << .collection.insert( { 1, "different string" } )
		_self.assert_unset( rec2, "Second insertion successful" )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_retrieve_by_key()
	## 
	## 
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec, "Failed to retrieve by key" )
		_then
			_self.assert_is( 2, rec.field1 )
			_self.assert_equals( "another_string", rec.field2 )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_delete()
	## 
	## 
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_self.assert_collection_size( 2 )

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			rec.delete()
			_self.assert_collection_size( 1 )

			rec2 << .collection.at( 2 )
			_self.assert_unset( rec2 )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_retrieve_records_not_deleted()
	## 
	## 
	_local data << { { 1, "string" },
			 { 2, "another_string" },
			 { 3, "last_string" } }
	_local rec1, rec2, rec3
	
	_if _self.create_dataset_with_data_test_collection()
	_then
		_self.assert_collection_size( 0 )
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		# We won't check the collection size or access to a deleted record
		# as this is included in test_can_delete()
		rec2 << .collection.at( 2 )
		rec2.delete()

		rec1 << .collection.at( 1 )
		_self.assert_not_unset( rec1 )
		_self.assert_equals( 1, rec1.field1 )
		
		rec3 << .collection.at( 3 )
		_self.assert_not_unset( rec3 )
		_self.assert_equals( 3, rec3.field1 )

		rec1.delete()
		# Check I can still access record 3
		rec3 << .collection.at( 3 )
		_self.assert_not_unset( rec3 )
		_self.assert_equals( 3, rec3.field1 )

		rec3.delete()
		rec3 << .collection.at( 3 )
		_self.assert_unset( rec3 )		
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_update()
	## 
	##
	_local data << { { 1, "string" },
			 { 2, "another_string" } }
	_if _self.create_dataset_with_data_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop
		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			rec.field2 << "a different string"

			_local from_coll_rec << .collection.at( 2 )
			_self.assert_equals( "another_string", from_coll_rec.field2 )

			.collection.update( rec )

			from_coll_rec << .collection.at( 2 )
			_self.assert_equals( "a different string", from_coll_rec.field2 )
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_associate_geometry()
	## 
	## 
	_local data << { { 1 },
			 { 2 } }
	_if _self.create_dataset_with_geom_test_collection()
	_then
		_for d _over data.fast_elements()
		_loop
			.collection.insert( d )
		_endloop

		_local rec << .collection.at( 2 )
		_if _self.assert_not_unset( rec )
		_then
			_self.assert_unset( rec.geom1 )

			geom << uds_simple_point.new_at( .collection.field( :geom1 ), coordinate.new( 0, 0 ) )
			rec.set_geometry( geom )

			_if _self.assert_not_unset( retrieved_geom << rec.geom1 )
			_then
				_self.assert_equals( 0, retrieved_geom.x )
				_self.assert_equals( 0, retrieved_geom.y )
			_endif 
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_default_record_exemplar_is_simple_record_exemplar()
	## 
	## 
	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name, :field1,
					      :type, :ds_int,
					      :key?, _true ) } )

	_then
		_self.assert_is( simple_record_exemplar, .collection.descriptor.record_exemplar )
		_self.assert_true( .collection.record_exemplar.is_kind_of?( simple_record_exemplar ) )
	_endif
_endmethod
$

def_slotted_exemplar( :simple_dataset_test_exemplar, {}, { :uds_rwo_record } )
$

_pragma(classify_level=restricted)
_method simple_dataset_test_exemplar.derived_field
	## 
	## 
	>> 2
_endmethod
$


_pragma(classify_level=restricted)
_method simple_dataset_test.test_explicit_record_exemplar_gets_set()
	## 
	## 
	_if _self.create_dataset_with_collection(
		    property_list.new_with( :exemplar, simple_dataset_test_exemplar,
					    :fields, { property_list.new_with( :name, :field1,
									       :type, :ds_int,
									       :key?, _true ) } ) )
		    
	_then
		_self.assert_is( simple_dataset_test_exemplar, .collection.descriptor.record_exemplar )
		_self.assert_true( .collection.record_exemplar.is_kind_of?( simple_dataset_test_exemplar ) )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_derived_field_is_derived()
	## 
	##

	_if _self.create_dataset_with_collection(
		    property_list.new_with( :exemplar, simple_dataset_test_exemplar,
					    :fields, { property_list.new_with( :name,     :field1, 
									       :type,     :ds_int,
									       :key?,     _true ),
						       property_list.new_with( :name,     :derived_field, 
									       :type,     :ds_int,
									       :derived?, _true ) }))

	_then
		_self.assert_derived_field_properties( :derived_field, integer )

		rec << .dataset.collections[:test_collection].insert ( {1} )
		_self.assert_equals ( 2, rec.derived_field, "Expected the value of derived_field to be 2 but is " + rec.derived_field.write_string )
	_endif
	
_endmethod
$
_pragma(classify_level=restricted)
_method simple_dataset_test.test_non_mandatory_field()
	## 
	##

	_if _self.create_dataset_with_collection(
		    { property_list.new_with( :name,       :field1, 
					      :type,       :ds_int,
					      :key?,       _true ),
		      property_list.new_with( :name,       :field2, 
					      :type,       :ds_int,
					      :mandatory?, _false ) })

	_then
		_self.assert_non_mandatory_field_properties( :field2, integer )

		rec << .dataset.collections[:test_collection].insert ( {1} )
		_self.assert_equals ( _unset, rec.field2, "Expected the value of derived_field to be unset but is " + rec.field2.write_string )
	_endif
	
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_0n_join_with_no_child_records_is_empty()
	## 
	##
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_self.assert_true( parent.children.empty?, "Expected no child records but got some" )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_add_and_retrieve_child_records_from_a_0n_join()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then
		_local child_collection << _self.collection( :child )
		child_collection.insert( { 1, _unset } )
		_local child1 << child_collection.at( 1 )
		child_collection.insert( { 2, _unset } )
		_local child2 << child_collection.at( 2 )

		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		record_transaction.new_update( child1,
					       property_list.new_with(
						       :parent, parent ) ).run()

		_local children << parent.children
		_if _self.assert_is( 1, children.size, write_string( "Expected 1 child record but got ", children.size ) )
		_then
			_local found_child << children.an_element()
			_self.assert_true( child1.is_same_record_as?( found_child ),
					   write_string( "Expected children collection to contain ", child1,
							 " but instead it contained ", found_child ) )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_deleted_record_no_longer_appears_in_a_0n_join()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then
		_local child_collection << _self.collection( :child )
		child_collection.insert( { 1, _unset } )
		_local child1 << child_collection.at( 1 )
		child_collection.insert( { 2, _unset } )
		_local child2 << child_collection.at( 2 )

		parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		record_transaction.new_update( child1,
					       property_list.new_with(
						       :parent, parent ) ).run()
		record_transaction.new_update( child2,
					       property_list.new_with(
						       :parent, parent ) ).run()

		_local children << parent.children
		_self.assert_is( 2, children.size, write_string( "Expected 2 child records but got ", children.size ) )

		record_transaction.new_delete( child2 ).run()
		children << parent.children
		_if _self.assert_is( 1, children.size, write_string( "Expected 1 child record but got ", children.size ) )
		_then
			_local found_child << children.an_element()
			_self.assert_true( child1.is_same_record_as?( found_child ),
					   write_string( "Expected children collection to contain ", child1,
							 " but instead it contained ", found_child ) )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_parent_records_can_be_set_and_retrieved_in_a_0n_join()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then
		_local child_collection << _self.collection( :child )
		child_collection.insert( { 1, _unset } )
		_local child1 << child_collection.at( 1 )
		child_collection.insert( { 2, _unset } )
		_local child2 << child_collection.at( 2 )

		_self.assert_unset( child1.parent, write_string( "Expected child1 to have no parent, but got ", child1.parent ) )
		_self.assert_unset( child2.parent, write_string( "Expected child2 to have no parent, but got ", child2.parent ) )
		
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		record_transaction.new_update( child1,
					       property_list.new_with(
						       :parent, parent ) ).run()

		# Reget child record to get newly joined information
		 child1 << child_collection.at( 1 )
		_local found_parent << child1.parent
		_if _self.assert_not_unset( found_parent, "Failed to find parent joined to child1" )
		_then
			_self.assert_true( found_parent.is_same_record_as?( parent ),
					   write_string( "Expected child1 to have parent of ", parent,
							 " but got ", found_parent ) )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_1n_join_with_no_child_records_is_empty()
	## 
	##
	_if _self.create_dataset_with_joined_collections( :|1toN| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_self.assert_true( parent.children.empty?, "Expected no child records but got some" )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_cannot_insert_child_record_in_1n_join_without_parent()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|1toN| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_local child_collection << _self.collection( :child )
		_self.assert_raised_condition(
			:dd_mandatory_field,
			record_transaction.new_insert( child_collection, property_list.new_with( :id, 1 ) ),
			:run|()| )
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_add_and_retrieve_child_records_from_a_1n_join()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0toN| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_local child_collection << _self.collection( :child )
		_local child1 << record_transaction.new_insert( child_collection,
								property_list.new_with( :id, 1,
											:parent, parent ) ).run()

		_local children << parent.children
		_if _self.assert_is( 1, children.size, write_string( "Expected 1 child record but got ", children.size ) )
		_then
			_local found_child << children.an_element()
			_self.assert_true( child1.is_same_record_as?( found_child ),
					   write_string( "Expected children collection to contain ", child1,
							 " but instead it contained ", found_child ) )
		_endif 
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_can_set_child_record_on_a_01_join()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0to1| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_local child_collection << _self.collection( :child )
		_local child1 << record_transaction.new_insert( child_collection,
								property_list.new_with( :id, 1,
											:parent, parent ) ).run()

		_local child << parent.child
		_if _self.assert_not_unset( child, "Expected child record but got none" )
		_then
			_self.assert_true( child1.is_same_record_as?( child ),
					   write_string( "Expected child to be ", child1,
							 " but instead it was ", child ) )
		_endif

		found_parent << child1.parent
		_if _self.assert_not_unset( found_parent, "Expected parent record but got none" )
		_then
			_self.assert_true( parent.is_same_record_as?( found_parent ),
					   write_string( "Expected parent to be ", parent,
							 " but instead it was ", found_parent ) )
			
		_endif
	_endif
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_default_records_on_01_join_are_unset()
	## 
	## 
	_if _self.create_dataset_with_joined_collections( :|0to1| )
	_then
		_local parent_collection << _self.collection( :parent )
		parent_collection.insert( { 1 } )
		_local parent << parent_collection.at( 1 )

		_local child_collection << _self.collection( :child )
		child_collection.insert( { 1 } )
		_local child << child_collection.at( 1 )

		_self.assert_unset( parent.child, "Expected no child record on parent" )
		_self.assert_unset( child.parent, "Expected no parent record on child" )
	_endif
_endmethod
$


_pragma(classify_level=restricted)
_method simple_dataset_test.test_ds_bool_is_vector_returns_false()
	## 
	## Test the ds_bool field type.
	##
	## Make sure that the .is_vector? method returns false. 
	##

	_self.create_dataset_with_data_test_collection()
	field_type << .dataset.get_field_type ( :ds_bool )

	_self.assert_false ( field_type.is_vector? )
	
_endmethod
$

_pragma(classify_level=restricted)
_method simple_dataset_test.test_default_value_can_be_defined()
	##
	## Test that a field's default_value can be defined.
	##
	fields_spec <<  {
			       property_list.new_with( :name, :field1,
						       :type, :ds_bool,
						       :mandatory?, _true,
						       :default_value, _true,
						       :key?, _true ),
			       property_list.new_with( :name, :field2,
						       :type, :ds_bool,
						       :mandatory?, _false,
						       :default_value, _false,
						       :key?, _false )
		       }
	
	_self.create_dataset_with_collection( fields_spec )
	field1 << _self.collection( :test_collection ).field( :field1 )
	field2 << _self.collection( :test_collection ).field( :field2 )

	_self.assert_equals( _true,  field1.default_value, "Field 1 expected default_value is _true")
	_self.assert_equals( _false, field2.default_value, "Field 2 expected default_value is _false")
_endmethod
$
