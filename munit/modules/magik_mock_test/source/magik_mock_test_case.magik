#% text_encoding = iso8859_1
_package sw 
$


remex(:magik_mock_test_case)
$

_pragma(classify_level=advanced, topic={service, test})
def_slotted_exemplar( :magik_mock_test_case,
		      {},
		      :test_case )
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_no_then_return_returns_unset()

	m << mock(:dummy)

	stub(m).gotcha()

	_self.assert_unset(m.gotcha())

_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_doesnt_understand_undeclared_messages()

	m << mock(:dummy)

	_self.assert_raised_condition(:does_not_understand, m, :|gotcha()|)

_endmethod
$



_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_no_args_accepts_any_args()

	m << mock(:dummy)

	stub(m).gotcha()

	_try _with cond
		m.gotcha(:extra_arg)
	_when error
		_self.fail("Like any Magik method, a mock method should ignore extra arguments")
	_endtry
		
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_call_gotcha_as_often_as_necessary()

	m << mock(:dummy)

	stub(m).gotcha()

	_try _with cond	
		m.gotcha()
		m.gotcha()
		m.gotcha()	
	_when error
		_self.fail("Should be able to call a stub method as often as necessary.")
	_endtry		
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_two_behaviours()

	m << mock(:dummy)

	stub(m).gotcha()
	stub(m).wotcha()

	_self.assert_unset(m.gotcha())
	_self.assert_unset(m.wotcha())
		
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_two_behaviours_any_order_allowed()

	m << mock(:dummy)

	stub(m).gotcha()
	stub(m).wotcha() # declared after gotcha ..

	_self.assert_unset(m.wotcha())	# .. but called before gotcha
	_self.assert_unset(m.gotcha())

		
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_return_value()

	m << mock(:dummy)

	value << rope.new()
	
	stub(m).gotcha().then_return(value)

	_self.assert_is(value, m.gotcha())
		
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_return_values_dont_get_mixed_up()

	m << mock(:dummy)

	avalue << "aaa"
	zvalue << "zzz"
	
	stub(m).aaa().then_return(avalue)
	stub(m).zzz().then_return(zvalue)

	_self.assert_is(zvalue, m.zzz()) # called in different order to declared
	_self.assert_is(avalue, m.aaa())
		
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_one_parameter_behaviour_match()

	m << mock(:dummy)

	stub(m).doit(:parameter_value).then_return(:return_value)

	_self.assert_is(:return_value, m.doit(:parameter_value))
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_one_parameter_behaviour_no_match()

	m << mock(:dummy)

	stub(m).doit(:parameter_value_AAA).then_return(:return_value)

	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|doit()|, {:parameter_value_ZZZ})
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_one_parameter_multiple_behaviours()

	m << mock(:dummy)

	stub(m).doit(:|parameter_value_AAA|).then_return(:|return_value_AAA|)
	stub(m).doit(:|parameter_value_ZZZ|).then_return(:|return_value_ZZZ|)	

	_self.assert_is(:|return_value_ZZZ|, m.doit(:|parameter_value_ZZZ|))		
	_self.assert_is(:|return_value_AAA|, m.doit(:|parameter_value_AAA|))
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_one_parameter_string_behaviours()

	m << mock(:dummy)

	stub(m).doit("AAA").then_return(:|return_value_AAA|)
	stub(m).doit("ZZZ").then_return(:|return_value_ZZZ|)	

	_self.assert_is(:|return_value_ZZZ|, m.doit("ZZZ"))
	_self.assert_is(:|return_value_AAA|, m.doit("AAA"))
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_one_parameter_float_behaviours()

	m << mock(:dummy)

	stub(m).doit(1.0).then_return(:|return_value_AAA|)
	stub(m).doit(2.0).then_return(:|return_value_ZZZ|)	

	_self.assert_is(:|return_value_ZZZ|, m.doit(2.0))
	_self.assert_is(:|return_value_AAA|, m.doit(1.0))
	
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_two_parameter_string_behaviours()

	m << mock(:dummy)

	stub(m).doit("AAA", "BBB").then_return(:|AAA_BBB|)
	stub(m).doit("ZZZ").then_return(:|ZZZ|)	

	_self.assert_is(:|AAA_BBB|, m.doit("AAA", "BBB"))
	_self.assert_is(:|ZZZ|, m.doit("ZZZ"))

	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|doit()|, {"AAA", "CCC"}, "AAA_CCC behaviour wrong!")
	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|doit()|, {"CCC", "BBB"}, "CCC_BBB behaviour wrong!")
	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|doit()|, {"AAA"}, "AAA behaviour wrong!")	
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_returns_two_results()

	m << mock(:dummy)

	stub(m).return_two().then_return(:one, :two)

	(return1, return2) << m.return_two()

	_self.assert_is(:one, return1)
	_self.assert_is(:two, return2)
	
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_returns_three_results_one_vector()

	m << mock(:dummy)

	v << {:abc, :def}
	stub(m).call().then_return(:one, v, :two)

	(return1, return2, return3) << m.call()

	_self.assert_is(:one, return1)
	_self.assert_is(v,    return2)
	_self.assert_is(:two, return3)	
	
_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_no_stub_method_provided()

	m << mock(:test)

	_try _with cond
		stub(m).then_return(:xyz)
		_self.fail("Should have raised a condition")
	_when error
		_self.assert_equals(:mmock!stub_error, cond.name)
		_self.assert_equals("API is stub(obj).method_to_stub.then_return(). You seem to have called stub(obj).then_return()", cond[:string])
	_endtry


_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_two_stub_methods_provided()

	m << mock(:test)

	_try _with cond
		stub(m).ok().doh()
		_self.fail("Should have raised a condition")
	_when error
		_self.assert_equals(:mmock!stub_error, cond.name)
		_self.assert_equals("API is stub(obj).method_to_stub.then_return(). You seem to have called stub(obj).method_to_stub.doh()", cond[:string])
	_endtry


_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_can_stub_an_existing_class()

	m << mock(:test, rope).new()

	_self.assert_is(0, m.size)

	stub(m).size.then_return(73)

	_self.assert_is(73, m.size)

_endmethod
$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_show_on_works_correctly()

	m << mock(:test, rope)
	stream << internal_text_output_stream.new()
	m.show_on(stream)
	a_string << stream.string
	_self.assert_equals("test", a_string.subseq(1, 4))  # Ahem. Should really be sw:rope:, not test:
	_self.assert_equals(":[1-1]", a_string.subseq(a_string.size - 5, 6))

_endmethod
$



#_pragma(classify_level=advanced, topic={service, test})
#_method magik_mock_test_case.test_stub_can_stub_write_string()
#
#	# FIXME Can't currently stub methods that exist on object
#	
#	m << mock(:test, rope)
#
#	_self.assert_equals("test:[1-1]", m.write_string)   # Yes, really. The rope exemplar has size = 1
#
#	stub(m).write_string.then_return("blah")
#
#	_self.assert_equals("blah", m.size)
#
#_endmethod
#$


_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_then_raise()

	m << mock(:test)
	stub(m).should_raise().then_raise(:error, :string, "blerk")

	_try _with cond
		m.should_raise()
		_self.fail("Should have raised a condition")
	_when error
		_self.assert_equals(:error, cond.name)
		_self.assert_equals("blerk", cond[:string])
	_endtry

_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_match_any_object_really_does_match_any_object()

	m << mock(:test)
	stub(m).match_wildcard(match.any_object).then_return(:ok)
	_self.assert_equals(:ok, m.match_wildcard(1))
	_self.assert_equals(:ok, m.match_wildcard(2))
	_self.assert_equals(:ok, m.match_wildcard("abc"))
	_self.assert_equals(:ok, m.match_wildcard(1.0))
	_self.assert_equals(:ok, m.match_wildcard(:abc))
	_self.assert_equals(:ok, m.match_wildcard({:abc}))
	_self.assert_equals(:ok, m.match_wildcard(property_list.new()))
	_self.assert_equals(:ok, m.match_wildcard(_unset))		
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_match_any_object_only_matches_its_argument()

	m << mock(:test)
	stub(m).stubbed_method(1, match.any_object).then_return(:one)
	stub(m).stubbed_method(match.any_object, 2).then_return(:two)

	_self.assert_equals(:one,  m.stubbed_method( 1,                      :arbitray_value ))
	_self.assert_equals(:two,  m.stubbed_method( {{{:arbitrary_value}}}, 2               ))
	
	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|stubbed_method()|, {999, :arbitrary_value})
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_match_any_object_and_multiple_behaviour_ordering()

	m << mock(:test)
	stub(m).stubbed_method(1, match.any_object).then_return(:one)
	stub(m).stubbed_method(match.any_object, 2).then_return(:two)
	stub(m).stubbed_method(match.any_object, match.any_object).then_return(:backstop)	

	_self.assert_equals(:one,  m.stubbed_method( 1,                      :arbitrary_value  ))
	_self.assert_equals(:two,  m.stubbed_method( {{{:arbitrary_value}}}, 2                 ))
	_self.assert_equals(:backstop, m.stubbed_method( :arbitrary_value1,  :arbitrary_value2 ))	
_endmethod
$


_method magik_mock_test_case.test_match_empty()

	m << mock(:test)
	stub(m).a_method(match.empty).then_return(:matched)

	_self.assert_equals(:matched, m.a_method(simple_vector.new(0)))
	_self.assert_equals(:matched, m.a_method(rope.new()))
	_self.assert_equals(:matched, m.a_method(set.new()))
	_self.assert_equals(:matched, m.a_method(property_list.new()))	

	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|a_method()|, {{1}})
	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|a_method()|, {:blah})
	_self.assert_raised_condition(:mmock!no_behaviour_defined, m, :|a_method()|, {1})		
_endmethod
$


_method magik_mock_test_case.test_empty_iterator_noargs()

	m << mock(:test_iterator)
	stub(m).iter_method().then_iterate()

	r << rope.new_from_iter(m, :|iter_method()|)
	_self.assert_true(r.empty?)
			    
_endmethod
$


_method magik_mock_test_case.test_iterator_noargs()

	m << mock(:test_iterator)
	stub(m).iter_method().then_iterate({:a}, {:b})

	r << rope.new_from_iter(m, :|iter_method()|)
	_self.assert_equals(2, r.size)
	_self.assert_equals(:a, r[1])
	_self.assert_equals(:b, r[2])
			    
_endmethod
$

_method magik_mock_test_case.test_iterator_args()

	m << mock(:test_iterator)
	stub(m).iter_method(1).then_iterate({:a}, {:b})
	stub(m).iter_method(2).then_iterate({:c}, {:d}, {:e})

	r1 << rope.new_from_iter(m, :|iter_method()|, 1)
	r2 << rope.new_from_iter(m, :|iter_method()|, 2)
	_self.assert_equals(2, r1.size)
	_self.assert_equals(:a, r1[1])
	_self.assert_equals(:b, r1[2])
			    
	_self.assert_equals(3, r2.size)
	_self.assert_equals(:c, r2[1])
	_self.assert_equals(:d, r2[2])
	_self.assert_equals(:e, r2[3])
_endmethod
$

_method magik_mock_test_case.test_iterator_multiple_iter_values_noargs()

	m << mock(:test_iterator)
	stub(m).iter_method().then_iterate({:a, :x}, {:b, :y})

	i << 0
	r << rope.new()
	_for val1, val2 _over m.iter_method()
	_loop
		i +<< 1
		r.add({val1, val2})
	_endloop
	
	_self.assert_equals(2, i)
	_self.assert_equals(:a, r[1][1])
	_self.assert_equals(:x, r[1][2])
	_self.assert_equals(:b, r[2][1])	
	_self.assert_equals(:y, r[2][2])
			    
_endmethod
$

_method magik_mock_test_case.test_mock_theme_geometry()

	tgm << mock(:tgm, theme_geometry).new_with(:geom, "dummy name")

	# tgm didn't used to have a key (or value) method, so check
	# that it is there and returns unset
	_self.assert_unset(tgm.key)

_endmethod
$

_method magik_mock_test_case.test_stub_with_no_args_procedure_sets_method()
	## 
	## 
	m << mock( :test_mock_with_proc )

	_local ret << "something"
	stub( m ).my_method().with_method( _proc()
						   _import ret
						   >> ret
					   _endproc )

	_self.assert_is( ret, m.my_method() )
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_with_args_procedure_sets_method()
	## 
	## 
	m << mock( :test_mock_with_proc )

	stub( m ).my_method().with_method( _proc( arg )
						   >> arg
					   _endproc )

	_local ret << "something"
	_self.assert_is( ret, m.my_method( ret ) )
	
_endmethod
$

_pragma(classify_level=advanced, topic={service, test})
_method magik_mock_test_case.test_stub_with_procedure_can_call_self()
	## 
	## 
	m << mock( :test_mock_with_proc )

	_local ret << "something"
	
	stub( m ).standard_method.then_return( ret )
	stub( m ).my_method.with_method( _proc()
						 >> _self.standard_method
					 _endproc )

	_self.assert_is( ret, m.my_method )
_endmethod
$
