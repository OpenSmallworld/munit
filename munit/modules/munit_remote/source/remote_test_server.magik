#% text_encoding = iso8859_1
_package sw
$

def_slotted_exemplar(:remote_test_server,
	{
		{:connection,      _unset},
		{:thread,          _unset},
		{:port,            _unset},
		{:remote_tests,    _unset},
		{:machine_mapping, _unset},
		{:step_id,          _unset}
	},
	{:test_suite, :sw_task_owner})
$


remote_test_server.method_table.resolve_conflicts(:test_suite)
$


_pragma(classify_level=debug)
_method remote_test_server.new(port, step_id, _gather test_product_names)
	## 
	## 

	>> _clone.init(port, step_id, test_product_names)
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_server.init(port, step_id, test_product_names)
	##
	## 

	_super.init()

	.step_id << step_id
	.port    << port
        .connection << tcpip_connection_stream.new(port)

        _if .connection _is _unset
        _then
                condition.raise(:error, :string, "No connection stream created on " + port)
        _endif

	test_list_provider << test_list_provider.default(slow_tests_first_provider)
	.remote_tests << test_list_provider.get_list(test_product_names)

	.machine_mapping << hash_table.new()
	_for test _over .remote_tests.fast_elements()
	_loop
		.machine_mapping[test.class_name] << ""
	_endloop
	
        >> _self
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.init_tests(test_list_provider, _gather test_product_names)
	## 
	## TEST_LIST_PROVIDER should be slow_tests_first_provider or a
	## subclass.  It defaults to slow_tests_first_provider.
	##
	## TEST_PRODUCT_NAMES is a list of test products to run tests
	## for.
	##

	test_list_provider << test_list_provider.default(slow_tests_first_provider)
	.remote_tests << test_list_provider.get_list(test_product_names)
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.run()
	## 
	## Listen for connections from clients and send tests to the
	## clients.  This method will block until all tests have been
	## send to the clients.
	##

	queue << atomic_queue.new(1)
	_self.report_tests_to_run()
	
        task  << _self.do_work(_self, :|listen()|, queue)

	_loop
		# Wait 30 minutes (for very slow tests) to make sure that some
		# client requested a test
		something << queue.get(30 * 60 * 1000)
		
		_if something _is _unset _orif # no client requested a test
		    something _is :done        # all tests are done
		_then
			task.cancel()
			_self.close_server()
			_leave 
		_endif
		
	_endloop

	_self.report_machines()
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.close_server()
        ## Closes down the server listener. Note that this does not
        ## shut down any client connections.
        
        _if .connection _isnt _unset
        _then
                conn << .connection ^<< _unset
                conn.close()
        _endif
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.listen(queue)
	##
	##
	
        write(_self.class_name, " listening on ", .port)
        conn << .connection
        inc << system.incarnation
        
        _loop
                _try _with cond
                        # Ensure this loop terminates correctly on image restart with
                        # active client
                        client << _unset
                        client << conn.get()
                _when stream_is_closed
                        # Generally occurs on image restart
                        _if inc _is system.incarnation
                        _then
                                cond.invoke()
                        _endif
		_when error
			show("Error getting client: ", cond.report_contents_string)
                _endtry

                _if client _is _unset
		_then
			queue.put(:done)
			_leave
		_endif

                done? << _self.send_test_to_client(client)
		_if done?
		_then
			queue.put(:done)
			_leave 
		_endif

		queue.put(client)
		
        _endloop
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_server.send_test_to_client(client)
	## 
	##

	done? << _false
	_try

		nchars         << client.input.get_signed_int()
		client_step_id << client.input.get_ascii_chars(nchars)
		_if client_step_id = .step_id
		_then 
			test  << _self.get_test_to_run()
			done? << test _is :done
		
			_if test _isnt :done
			_then
				
				module_name << test.module_name
				test_name   << test.class_name
				_if test.class_name _is :test_suite _andif
				    (suite_name << test.get_name()) _isnt _unset
				_then
					test_name << suite_name
				_endif
				
				_self.send_name_to_client(module_name, client)
				_self.send_name_to_client(test_name, client)
				
				.machine_mapping[test_name] << system.get_host_by_addr(client.remote_address).an_element()
				
			_else
				_self.send_name_to_client("done", client)
			_endif
		_else
			_self.send_name_to_client("done", client)
		_endif

	_when generic_prim_failure # Client died, return the test to the queue
		_if test _isnt :done
		_then 
			_self.return_test_to_queue(test)
		_endif
	_endtry

	>> done?
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_server.get_test_to_run()
	## 
	##

	_if .remote_tests.empty?
	_then
		test << :done
	_else 
		test << .remote_tests.remove_first()
	_endif

	>> test
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_server.send_name_to_client(name, client)
	## 
	##
	
	client.output.put_signed_int(name.size)
	client.output.put_ascii_chars(name)
	client.output.flush()

	# Wait for the client to acknowledge receipt of the message
	client.input.get_signed_int()
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_server.return_test_to_queue(test)
	## 
	##
	
	.remote_tests.add_last(test)
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.report_tests_to_run()
	## 
	##

	show("Remote tests to run:")
	_for test _over .remote_tests.fast_elements()
	_loop
		show(test)
	_endloop
	
_endmethod
$


_pragma(classify_level=debug)
_method remote_test_server.report_machines()
	## 
	##

	_for test_name, client _over .machine_mapping.fast_keys_and_elements()
	_loop
		# On the machine that runs the server, a client is running in a
		# different thread.  This lock is to ensure that the server and
		# client write a complete line to the !output! without
		# interfering with one another.
		_lock !output!
		      show(write_string("Ran ", test_name, " on ", client))
		_endlock
	_endloop 
	
_endmethod
$
