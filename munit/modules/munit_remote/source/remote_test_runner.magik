#% text_encoding = iso8859_1
_package sw
$

def_slotted_exemplar(:remote_test_runner,
	{
		{:retry?, _unset}
	},
	{:xml_test_runner})
$


_pragma(classify_level=debug)
_method remote_test_runner.run_remote(address, port, step_id)
	## 
	##

	start << date_time.now(:milliseconds)
	count << 0
	tests_ok? << _true
	.retry? << _true
	test_times << rope.new()
	tf << test_suite_finder.new()

	_loop
		
		(module_name, test_name) << _self.get_new_test(address, port, step_id)

		_if module_name _is :done _then _leave _endif

		show("Running tests in class: ", module_name, test_name)

		count +<< 1

		_if _not sw_module_manager.module(module_name).loaded?
		_then 
			sw_module_manager.load_module(module_name)
		_endif
		
		(test, identifier) << tf.test_and_identifier(module_name, test_name)

		_self.properties[:output_identifier] << identifier
		a_stream << _self.new_stream(identifier, test_name + "_" + system.host_name)
		
		_protect
			test_start << date_time.now(:milliseconds)
			new_runner << _self.new(a_stream, _scatter _self.properties.for_scatter())
			new_runner.int!run(test)
			a_stream.flush()
			time << date_time.now(:milliseconds) - test_start
			test_time << write_string("Test ", module_name, "___", test_name, " ran in ", time)
			test_times.add_last(test_time)
		_protection
			a_stream.close()
		_endprotect
		
		tests_ok? << tests_ok? _andif
			     new_runner _isnt _unset _andif
			     new_runner.test_result _isnt _unset _andif 
			     new_runner.test_result.error_count() = 0 _andif
			     new_runner.test_result.failure_count() = 0
				
	_endloop

	# On the machine that runs the server, a client is running in a
	# different thread.  This lock is to ensure that the server and
	# client write a complete line to the !output! without
	# interfering with one another.
	_lock !output!
	      show(write_string("Ran ", count, " tests in ", date_time.now(:milliseconds) - start))
	_endlock
	_for test_time _over test_times.fast_elements()
	_loop
		_lock !output!
		      show(test_time)
		_endlock
	_endloop 
	
	>> tests_ok?
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_runner.connect(address, port)
	## 
	##

	count << 0
	_loop 
		_try
			connection << tcpip_connection.new(address, port)
			.retry? << _false
		_when sw_net_connection_failed
			connection << _unset
			.retry? << .retry? _andif count < 50
		_endtry
		_if .retry? _isnt _true _then _leave _endif
		# The combination of sleeping for 150ms and 50 retries is
		# roughly 1 minutes.
		# The connection << tcpip_connection.new(address, port) line
		# takes some time as well. The 50 retries came from looking at
		# the log file of an actual run where the client was trying to
		# connect to a server that has gone away. 50 was more or less
		# 1 minute later than 1 
		_thisthread.sleep(150)
		show("Trying to connect on... ", address, port, count)
		count +<< 1
	_endloop 

	>> connection
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_runner.get_new_test(address, port, step_id)
	## 
	##

	_protect
		
		module_name << :done
		connection  << _self.connect(address, port)

		_if connection _isnt _unset
		_then

			connection.output.put_signed_int(step_id.size)
			connection.output.put_ascii_chars(step_id)
			connection.output.flush()

			_try _with error_variable
				# Get the module name
				module_name << _self.get_name_from_connection(connection)
				
				# Get the test name
				_if module_name _isnt :done
				_then 
					test_name << _self.get_name_from_connection(connection)
				_endif
			_when error
				_if module_name _isnt :done
				_then
					show("Problem getting new test: ", error_variable.report_contents_string)
					show("Got: ", module_name, test_name)
					condition.raise(error_variable.name, _scatter error_variable.data)
				_endif
			_endtry
			
		_endif
			
	_protection
		_self.close_connection(connection)
	_endprotect

	>> (module_name, test_name)
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_runner.get_name_from_connection(connection)
	## 
	##
	
	nchars << connection.input.get_signed_int()
	_if nchars _isnt _unset
	_then
		name << connection.input.get_ascii_chars(nchars).as_symbol()
	_else
		name << :done
	_endif

	# Acknowledge to the server that the message was read
	connection.output.put_signed_int(1)
	connection.output.flush()

	>> name
	
_endmethod
$


_pragma(classify_level=debug)
_private _method remote_test_runner.close_connection(connection)
	## 
	##

	_if connection _isnt _unset
	_then 
		connection.close()
	_endif
	
_endmethod
$


_pragma(classify_level=advanced,topic=MUnit)
_method remote_test_runner.new_stream(identifier, test_name)
	##returns a new stream to output xml results

	fname << write_string("test__", identifier, "__", test_name, "__", system.host_name, ".", .properties[:output_format])
	
	a_file << system.name_new_file(
			  system.pathname_from_components(fname, .properties[:output_dir]))

	show(a_file)
	
	_return external_text_output_stream.new(a_file)
_endmethod
$
