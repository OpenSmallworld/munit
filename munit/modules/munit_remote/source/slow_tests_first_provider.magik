#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug, usage={subclassable})
def_slotted_exemplar(:slow_tests_first_provider,
	{},
	{} )
$


_pragma(classify_level=debug, usage={subclassable})
_method slow_tests_first_provider.get_list(test_product_names)
	## 
	## This method returns a rope of test cases.
	##
	## It loops over the PRODUCT_NAMES and for each one create a
	## product_test_suite.  It then loops over all the module tests
	## in the product test suite and for each module test loop over
	## all the tests in the module.  It adds the test to the end of
	## the rope of tests, except if the test is a slow_test? in
	## which case it is added first in the list of tests.
	##

	remote_tests << rope.new()
	
	_for test_product_name _over test_product_names.fast_elements()
	_loop
		_self.add_product_test_suite(remote_tests, test_product_name.as_symbol())
	_endloop

	>> remote_tests
	
_endmethod
$


_pragma(classify_level=debug, usage={subclassable})
_private _method slow_tests_first_provider.add_product_test_suite(remote_tests, product_name)
	## 
	##

	tests << product_test_suite.new(product_name)

	# Allows ant tests/build.xml calls to turn off the slow tests.
	skip_slow_tests? << _self.skip_slow_tests?()
		
	_for module_test _over tests.tests()
	_loop
		_for test _over module_test.tests()
		_loop
			_if test.slow_test?
			_then
				_if _not skip_slow_tests?
				_then 
					remote_tests.add_first(test)
				_else
					show(write_string("Skip slow test: ", test.class_name))
				_endif 
			_else
				remote_tests.add_last(test)
			_endif 
		_endloop
	_endloop
	
_endmethod
$


_pragma(classify_level=debug, usage={subclassable})
_private _method slow_tests_first_provider.skip_slow_tests?()
	## 
	##
	
	skip_slow_tests_var << system.getenv("SKIP_SLOW_TESTS").default("FALSE")
	write("skip_slow_tests_var: ", skip_slow_tests_var)
	
	skip_slow_tests? << _if skip_slow_tests_var = "FALSE"
			    _then
				    >> _false
			    _elif skip_slow_tests_var = "TRUE"
			    _then
				    write("Skipping slow tests")
				    >> _true
			    _else
				    # incorrect value passed from ant
				    >> _false 
			    _endif

	>> skip_slow_tests?
	
_endmethod
$
