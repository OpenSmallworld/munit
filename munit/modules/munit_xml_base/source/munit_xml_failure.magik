#% text_encoding = iso8859_15
_package sw


_pragma(classify_level=restricted,topic=MUnit)
def_slotted_exemplar(:munit_xml_failure,
{},:munit_xml_exception)
$

_pragma(classify_level=restricted,topic=MUnit)
## text written out as a label for number of failures happend
munit_xml_failure.define_shared_constant(:counter_text, "failures", :public)
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_failure.write_on(stream, _optional level)
	## writes out a failure item
	## 
	level << level.default(0)
	stream.write(space_char*2*level,"<failure")
	_if .message _isnt _unset
	_then
		stream.write(" message=",%",_self.coded_message(),%")
        _endif 
	stream.write(" type=",%",_self.coded_type(),%")
	_if .text _is _unset 
	_then
		stream.write("/>")
	_else
		stream.write(">")
		stream.newline()
		stream.write(space_char*2*(level+1),"<![CDATA[")
		stream.newline()
		stream.write(.text)
		stream.newline()
		stream.write(space_char*2*(level+1),"]]>")
		stream.newline()
		stream.write(space_char*2*level,"</failure>")
	_endif
	stream.newline()
_endmethod
$
