#% text_encoding = iso8859_15
_package sw
$

_pragma(classify_level=restricted,topic=MUnit)
def_slotted_exemplar(:munit_xml_testcase,
{
	{:classname, "", :writable, :public},
	{:exceptions, _unset}
}, :munit_xml_testcontainer)
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method munit_xml_testcase.init(classname, name, parent)
	## initialises new xml testcase
	## 
	.classname << classname
	.exceptions << rope.new()
	>> _super.init(name, parent)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testcase.add_exception(item)
	## adds a new exception to this testcase
	##
	.parent.incr_counter(item.class_name)
	>> .exceptions.add_last(item)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testcase.exceptions
	## delivers all recorded exceptions
	## 
	>> .exceptions
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testcase.write_on(stream, _optional level)
	## writes out the testcase
	## 
	level << level.default(0)
	stream.write(space_char*2*level,"<testcase classname=",%",.classname,%"," name=",%",.name,%"," time=",%",_self.time,%")
	_if .exceptions.empty?
	_then
		stream.write(" status=", %", "Passed", %", "/>")
	_else
		stream.write(" status=", %", "Failed", %", ">")
		stream.newline()
		_for f _over .exceptions.fast_elements()
		_loop
			f.write_on(stream, level+1)			
		_endloop
		stream.write(space_char*2*level,"</testcase>")
	_endif
	stream.newline()
_endmethod
$

