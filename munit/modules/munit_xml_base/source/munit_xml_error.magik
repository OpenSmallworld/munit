#% text_encoding = iso8859_15
_package sw


_pragma(classify_level=restricted,topic=MUnit)
def_slotted_exemplar(:munit_xml_error,
{},:munit_xml_exception)
$

_pragma(classify_level=restricted,topic=MUnit)
## text written out as a label for number of errors happend
munit_xml_error.define_shared_constant(:counter_text, "errors", :public)
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_error.write_on(stream, _optional level)
	## writes out an error item
	## 
	level << level.default(0)
	stream.write(space_char*2*level,"<error")
	_if .message _isnt _unset
	_then
		stream.write(" message=",%",_self.coded_message(),%")
        _endif 
	stream.write(" type=",%",_self.coded_type(),%")
	_if .text _is _unset 
	_then
		stream.write("/>")
	_else
		stream.write(">")
		stream.newline()
		stream.write(space_char*2*(level+1),"<![CDATA[")
		stream.newline()
		stream.write(.text)
		stream.newline()
		stream.write(space_char*2*(level+1),"]]>")
		stream.newline()
		stream.write(space_char*2*level,"</error>")
	_endif
	stream.newline()
_endmethod
$

