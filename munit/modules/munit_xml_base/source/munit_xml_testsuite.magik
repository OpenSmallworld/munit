#% text_encoding = iso8859_15
_package sw

_pragma(classify_level=restricted,topic=MUnit)
def_slotted_exemplar(:munit_xml_testsuite,
{
	{:counter, _unset, :writable, :public}
}, :munit_xml_testcontainer)
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testsuite.init(_gather args)
	## initialises a xml testsuite
	##
	.counter << property_list.new()
	>> _super.init(_scatter args)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testsuite.incr_counter(exception_classname)
	## increments counter for a exception class
	## 
	.counter[exception_classname] <<
		_if .counter[exception_classname] _is unset
		_then
			>> 1
		_else
			>> .counter[exception_classname]+1
		_endif
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method munit_xml_testsuite.write_on(stream, _optional level)
	## writes out a xml testsuite
	##

	# <testsuite errors="0" failures="0" hostname="vmgump.apache.org" name="org.dom4j.ThreadingTest" tests="100" time="12.064" timestamp="2007-02-14T03:25:52">
	level << level.default(0)
	stream.write(space_char*2*level,"<testsuite ")
	_for k,e _over .counter.fast_keys_and_elements()
	_loop
		stream.write(get_global_value(k).counter_text,"=",%",e,%",space_char)
	_endloop
	stream.write("tests=",%",.children.size,%",space_char)
	stream.write("name=",%",.name,%"," time=",%",_self.time,%",">")
	stream.newline()
	_for c  _over .children.fast_elements() 
	_loop
		c.write_on(stream, level+1)
	_endloop
	stream.write(space_char*2*level,"</testsuite>")
	stream.newline()
_endmethod
$
