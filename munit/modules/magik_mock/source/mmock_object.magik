#% text_encoding = iso8859_1
_package sw 
$


## Magik Mock - a mock/stub framework for Magik.
##
## The syntax and 'philosophy' is inspired by (but not
## identical to) Mockito (mockito.org). The biggest difference
## is that there is no verify support at the moment, so it's
## geared towards state-based rather than behaviour-based
## verification. See the excellent "Mocks Aren't Stubs"
## essay[*] by Martin Fowler for details of the distinction. In
## fact, according to that essay, this should actually be
## called 'Fake Magik' or 'Stub Magik' but that doesn't
## alliterate so nicely. 
##
## [*] http://martinfowler.com/articles/mocksArentStubs.html
## 
## Examples
## ========
## See also the tests in the magik_mock_test module.
##
## m << mock(:blah)
##   m is now an 'empty' object (actually has all the
##   slotted_format_mixin methods as usual) 
##
## stub(m).my_stub_method
##   m now responds to my_stub_method, returning unset
##   Other messages cause does_not_understand in the usual way
##
## stub(m).another_stub_method().then_return(133)
##   m now responds to another_stub_method(), returning 133
##
## stub(m).more_methods(:abc).then_return(blah)
##   m.more_methods(:abc) will return blah
##   m.more_methods(<anything else>) will raise mmock!no_behaviour_defined
##
## stub(m).more_methods(:def).then_return(blee)
##   m.more_methods() will now return blah if passed :abc, blee
##   if passed :def, and will raise mmock!no_behaviour_defined
##   otherwise 
##
## Parameters are tested by equality, in order, so that the
## first matching behaviour is used. So for example:
##
##   stub(m).yet_another(:abc).then_return(:alpha)
##   stub(m).yet_another(:abc).then_return(:beta)
##   m.yet_another(:abc) # => returns :alpha
##
## Of course, you can also have multi-parameter methods:
##
##   stub(m).multi_param(1, 2).then_return(rope.new())
##   m.multi_param(1, 2) # => returns the new rope
##
## And multiple return results:
##
##   stub(m).a_method().then_return(:value1, "value2")
##   (v1, v2) << m.a_method() # => v1 = :value1, v2 = "value2"
##
## Wildcards
## ---------
## If you don't care about the exact parameter value, or need
## to handle tricky cases (like vectors or other containers,
## for which equality comparisons don't really do anything
## useful), then you can ask for any object to be matched:
##
##   stub(m).match_wildcard(match.any_object).then_return(:ok)
##   m.match_wildcard(1) # => returns ok
##   m.match_wildcard(2) # => returns ok
##   m.match_wildcard("anything") # => returns ok	
##
## Conditions
## ----------
## You can use then_raise(<condition name>, <condition
## keys_and_values args>) to raise a condition rather than
## return a value.
##
## Iterators
## ---------
## You can use then_iterate(<first iteration values>,
##                          <second iteration values>,...)
## as follows:
##   stub(m).iter_method().then_iterate({:key1, val1}, {:key2, val2})
##   _for key, val over m.iter_method()
##   _loop
##      # on first iter, key=key1, val=val1
##      # on second iter, key=key2, val=val2
##   endloop
## You can't yet supply arguments to iter methods, or have
## return values.
##
## Subclassing
## -----------
## You can also subclass an existing class and add/stub methods on
## that:
##   m << mock(:stubbed_rope, rope).new(100) # note call to new()
##   stub(m).new_method().then_return(:xyz)  # new method
##   stub(m).size.then_return(173)           # stub existing method
##   m.new_method()                          # => :xyz
##   m.size                                  # => 173
##
## 
## Bugs/missing features
## =====================
## - you can't stub methods defined on object/slotted_format_mixin:
##   stub(m).write_string.then_return("abcdef") # => fails
## - limited wild-card parameter matching, but can be added on demand
## - no mechanism for stubbing out references to globals. For
##   example, suppose the method under test had the following code:
##     ace << gis_program_manager.ace(ace_name)
##   You can't intercept the gis_program_manager global
##   reference to return something which doesn't go to the
##   database when it has .ace() called on it
## - you get conflict method errors when stubbing an existing class
## - the code creates a new method table for each call to
##   mock(). Because the method table inheritance tree has
##   links from parents to children as well as vice-versa, I'm
##   not sure that old mock objects will get cleaned up
##   properly. In other words, there's a memory leak.


remex(:mmock_object)
$

def_slotted_exemplar(:mmock_object,
		     {},
		     {})
$

_method mmock_object.mmock!new_mock_object(name, _optional super_class)

	super_method_tables <<
		_if super_class _is _unset
		_then
			>> {}
		_else
			>> {super_class.method_table}
		_endif 
	
	(method_tbl, new_mock_object) << method_table.new_for_slotted(name, {}, super_method_tables, {})

	_return new_mock_object
	
_endmethod
$
