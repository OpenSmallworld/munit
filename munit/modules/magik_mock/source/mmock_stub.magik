#% text_encoding = iso8859_1
_package sw 
$

remex(:mmock_stub)
$

def_slotted_exemplar(:mmock_stub,
	{{:object,            _unset},
	 {:current_behaviour, _unset}
	},
	{})
$

_method mmock_stub.new(obj)
	>> _clone.init(obj)
_endmethod
$

_method mmock_stub.init(obj)
	.object << obj
	>> _self 
_endmethod
$

_method mmock_stub.does_not_understand(msg, private?)
	
	_if _self _is mmock_stub # Avoid cockups with the exemplar
	_then
		condition.raise(:does_not_understand,
			:object, _self,
			:selector, msg.selector,
			:arguments, msg.args,
			:iterator?, _false,
			:private?, private?)
	_endif

	_if .current_behaviour _isnt _unset
	_then
		msg << write_string("API is stub(obj).method_to_stub.then_return(). You seem to have called stub(obj).method_to_stub.", msg.selector)
		condition.raise(:mmock!stub_error, :string, msg)
	_endif
	

	default_type         << :returns
	default_return_value << {_unset}
	.current_behaviour << {msg.selector, msg.args, default_type, default_return_value}

	_self.install_mock( .object, .current_behaviour[1], .current_behaviour[2],
	      .current_behaviour[3], _scatter .current_behaviour[4] )
	_return _self
_endmethod
$

_method mmock_stub.then_return(_gather values)

	_self.int!check_api("then_return()")

	_self.install_mock( .object, .current_behaviour[1], .current_behaviour[2],
			    :returns, _scatter values)

_endmethod
$

_method mmock_stub.then_raise(condition, _gather keys_and_values)

	_self.int!check_api("then_raise()")

	_self.install_mock( .object, .current_behaviour[1], .current_behaviour[2],
			    :raises, condition, _scatter keys_and_values)

_endmethod
$

_method mmock_stub.then_iterate(_gather iter_values)

	_self.int!check_api("then_iterate()")	
	
	(selector, args, type, return_val) << (_scatter .current_behaviour)

	iter_values << iter_values.map(_proc(val)
					      >> {:returns, _scatter val}
				      _endproc)
	_self.install_mock( .object, selector, args, :iterates _scatter iter_values )

_endmethod
$

_method mmock_stub.with_method( method_proc )
	## 
	## 
	_self.int!check_api("with_method()")

	_self.install_mock( .object, .current_behaviour[ 1 ], .current_behaviour[ 2 ],
			    :method, method_proc )
_endmethod
$

_private _method mmock_stub.int!check_api(caller)
	_if .current_behaviour _is _unset
	_then
		msg << write_string("API is stub(obj).method_to_stub.", caller, ". You seem to have called stub(obj).", caller)
		condition.raise(:mmock!stub_error,
				:string, msg)
	_endif
_endmethod
$


_method mmock_stub.install_mock( an_object, selector, args, _gather behaviour )
	_local mock_parts << rope.new()
	_if _not args.empty?
	_then
		_for an_arg _over args.fast_elements()
		_loop
			mock_parts.add_all_last( { _if an_arg.is_kind_of?(match)
						   _then
							   >> :with_wildcard
						   _else
							   >> :with_arg
						   _endif,
						   an_arg } )
		_endloop
	_endif
	mock_parts.add_all_last( behaviour )
	
	mock_manager.install_mock( an_object, selector, _scatter mock_parts )
_endmethod
$
