_package sw
$

## Magik Mock Manager - a framework for safely creating and
## removing mocks.
##
## This is a framework designed to allow methods to be safely
## mocked for a test and for those mocks to be removed again at
## the end of the test, no matter what might have gone wrong
## during that test.
##
## An Example
## ==========
## See also the mock_manager_test tests in the magik_mock_test module.
##
## m << mock(:blah) # Create a class that will be thrown away later.
## mock_manager.run_with_mocks(
##   { {m, :my_stub_method, :returns, _unset} } ) (
##     _proc ()
##         m.my_stub_method # Actually call the stubbed method.
##     _endproc )
##
## This may look a little strange, so let's break down exactly
## what's going on here. mock_manager.run_with_mocks() takes
## arguments that describe the mocks we want to use, and
## returns a procedure. We then call this procedure with an
## argument of another procedure which contains our test code.
##
## Why do things this way?
## =======================
##
## In the example above we are mocking behaviour o a dummy
## object, so if our mocking behaviour were not removed there
## wouldn't be any serious problems, but we would also like the
## ability to mock behaviour on global objects (such as
## gis_program_manager) that already exist, and our tests
## should not leave them with unintended behaviour that might
## affect others' tests.

def_slotted_exemplar( :mock_manager,
	{ } )
$

mock_manager.define_shared_variable( :mock_data, weak_hash_table.new(), :private )
$

_method mock_manager.run_with_mocks( mocks )
	_local mock_args << mocks
	_local this << _self
	_return _proc( code_to_run )
			_import this, mock_args
			_protect
				this.install_mocks( mock_args )
				_return code_to_run()
			_protection
				this.uninstall_mocks( mock_args )
			_endprotect
		_endproc
_endmethod
$

_method mock_manager.install_mocks( mock_specs )
	_for i _over 1.upto(mock_specs.size)
	_loop
		(an_object, a_method, _gather mock_spec) << (_scatter mock_specs[i])
		_self.install_mock( an_object, a_method, _scatter mock_spec )
	_endloop
_endmethod
$

_method mock_manager.uninstall_mocks( mock_specs )	
	_for i _over mock_specs.size.downto(1)
	_loop
		(an_object, a_method, _gather mock_spec) << (_scatter mock_specs[i])
		_self.uninstall_mock( an_object, a_method, _scatter mock_spec )
	_endloop
_endmethod
$

_method mock_manager.install_mock( an_object, a_method, _gather mock_spec )
	_local mock_data << _self.get_or_create_mocking_data( an_object, a_method )
	_local (mock_part, _gather mock_rest) << (_scatter mock_spec )
	_local mock_type << _self.mock_method(mock_part, mock_data, _scatter mock_rest )
	_self.ensure_mock_proc_installed( an_object, a_method, mock_data, mock_type )
_endmethod
$

_method mock_manager.mock_method_returns( mock_data, _gather ret_vals )
	mock_data[:returns] << ret_vals
	_return :proc
_endmethod
$

_method mock_manager.mock_method_raises( mock_data, cond_name, _gather cond_args )
	mock_data[:raises] << {cond_name, cond_args}
	_return :proc
_endmethod
$

_method mock_manager.mock_method_iterates( mock_data, _gather iteration_values )
	mock_data[:iter_returns] << rope.new()
	_local iter_values << rope.new_from( iteration_values )
	_for ret_vals _over iter_values.elements()
	_loop
		_if _not ret_vals.is_kind_of?( {} )
		_then _leave _else iter_values.remove_first() _endif
		_local iter_mock_data << hash_table.new()
		mock_data[:iter_returns].add_last( iter_mock_data )
		_local (iter_part, _gather iter_data) << ( _scatter ret_vals )
		_self.mock_method(iter_part, iter_mock_data, _scatter iter_data )
	_endloop
	_if _not iter_values.empty?
	_then
		_local (mock_part, _gather mock_rest) << ( _scatter iter_values )
		_local mock_type << _self.mock_method( mock_part, mock_data, _scatter mock_rest )	
	_endif
	_return :iter
_endmethod
$

_method mock_manager.mock_method_with_arguments( mock_data, arguments, _gather mock_rest )
	_local new_arg_list << rope.new()
	_for an_arg _over arguments.fast_elements()
	_loop new_arg_list.add_last(:with_arg); new_arg_list.add_last(an_arg); _endloop
	new_arg_list.add_all_last( mock_rest )
	_return _self.mock_method(new_arg_list.remove_first(), mock_data, _scatter new_arg_list)
_endmethod
$

_method mock_manager.mock_method_with_wildcard( mock_data, wildcard, mock_part, _gather mock_rest )
	_if _not mock_data.includes_key?(:wildcard)
	_then
		mock_data[:wildcard] << equality_property_list.new()
	_endif
	_local args_mock_data << mock_data[:wildcard]
	args_mock_data[wildcard] << args_mock_data[wildcard].default(hash_table.new())
	_return _self.mock_method(mock_part, args_mock_data[wildcard], _scatter mock_rest )
_endmethod
$

_method mock_manager.mock_method_with_arg( mock_data, arg, mock_part, _gather mock_rest )
	_if _not mock_data.includes_key?(:arg)
	_then
		mock_data[:arg] << equality_hash_table.new()
	_endif
	_local args_mock_data << mock_data[:arg]
	args_mock_data[arg] << args_mock_data[arg].default(hash_table.new())
	_return _self.mock_method(mock_part, args_mock_data[arg], _scatter mock_rest )
_endmethod
$

_method mock_manager.mock_method_method( mock_data, method_proc )
	## 
	## 
	mock_data[ :method_proc ] << method_proc

	>> :method_proc
_endmethod
$

_method mock_manager.mock_method( mock_part, mock_data, _gather mock_rest )
	_return _self.perform( :mock_method_ + mock_part + :|()|, mock_data, _scatter mock_rest )
_endmethod
$

_method mock_manager.ensure_mock_proc_installed( an_object, a_method, mock_data, mock_type )
	an_object.define_method( 
		a_method,
		_self.perform( :mock_ + mock_type + :|()|, mock_data ),
		mock_data[ :private? ] )
	_return mock_data
_endmethod
$

_method mock_manager.mocking_data_for_args( mock_data, args, _optional strict? )
	_local return_data << _self.int!get_mocking_data_with_args( mock_data, args )

	_if return_data _is _unset _andif strict? _isnt _true
	_then
		return_data <<  mock_data
	_endif
	
	_return return_data
_endmethod
$

_method mock_manager.int!get_mocking_data_with_args( mock_data, args )
	>> _if _not args.empty?
	   _then >> _self.get_mocking_data_arg_and_remainder( mock_data, args ).
		 default( _self.get_mocking_data_wildcard_and_remainder( mock_data, args ) )
	   _else >> mock_data
	   _endif
_endmethod
$												  											 

_method mock_manager.get_mocking_data_arg_and_remainder( mock_data, args )
	_local (arg, _gather args_rest) << (_scatter args)
	_if mock_data.includes_key?(:arg) _andif
	    mock_data[:arg][arg] _isnt _unset 
	_then
		_return _self.mocking_data_for_args( mock_data[:arg][arg], args_rest, _true )
	_endif
_endmethod
$

_method mock_manager.get_mocking_data_wildcard_and_remainder( mock_data, args )
	_local (arg, _gather args_rest) << (_scatter args)
	_local wc_data << _unset
	_if mock_data.includes_key?(:wildcard) _andif
	    (wc_data << _self.get_matching_wildcard(
				 mock_data[:wildcard], arg ) )_isnt _unset
	_then
		_return _self.mocking_data_for_args( wc_data, args_rest, _true )
	_endif
_endmethod
$
	
_method mock_manager.get_matching_wildcard( wildcard_list, arg )
	_for wc, md _over wildcard_list.fast_keys_and_elements()
	_loop
		_if wc.matches?( arg ) _then _return md _endif
	_endloop
_endmethod
$

_method mock_manager.ok_to_continue?( call_data )
	_if call_data.includes_key?(:raises)
	_then
		_if call_data[:raises].size = 1
		_then 
			condition.raise(call_data[:raises][1])
		_else
			condition.raise(
				call_data[:raises][1],
				_scatter call_data[:raises][2])
		_endif
	_endif
	_return _true
_endmethod
$

_method mock_manager.get_return_values( call_data )
	_if call_data.includes_key?(:returns)
	_then _return _true, _scatter call_data[:returns]
	_else _return _false
	_endif
_endmethod
$	

_method mock_manager.return_underlying_method_result( mock_data, obj, args )
	_if mock_data[:stored_name] _is _unset
	_then
		condition.raise( :mmock!no_behaviour_defined, :string,
				 "MMock: no behaviour defined on " + _self.write_string + " for args (" +
					 args.join_as_strings(",")+")")
	_else
		# Intercept if need otherwise...
		_return _scatter _allresults
		obj.sys!perform( mock_data[:stored_name], _scatter args )
	_endif
_endmethod
$

_iter _method mock_manager.return_underlying_iter_result( mock_data, obj, args )
	_if mock_data[:stored_name] _is _unset
	_then
		condition.raise( :mmock!no_behaviour_defined, :string,
				 "MMock: no behaviour defined on " + _self.write_string + " for args (" +
					 args.join_as_strings(",")+")")
	_else
		_for _gather iter_vals _over
		obj.sys!perform_iter( mock_data[:stored_name], _scatter args )
		_loop
			_loopbody( _scatter iter_vals )
		_finally _with _gather ret_vals
			 _return _scatter ret_vals
		_endloop	
	_endif
_endmethod
$

_iter _method mock_manager.get_iter_vals( call_data )
	_if call_data.includes_key?(:iter_returns)
	_then
		_for ret_vals _over call_data[:iter_returns].fast_elements()
		_loop
			_if _not _self.ok_to_continue?( ret_vals ) _then _return _endif
			_local (return?, _gather iter_vals) <<
				_self.get_return_values( ret_vals )
			_if return? _then _loopbody( _scatter iter_vals ) _endif
		_endloop
		_local (return?, _gather ret_vals) << _self.get_return_values( call_data )
		_return _true _scatter ret_vals
	_else
		_return _false
	_endif
_endmethod

_method mock_manager.mock_proc( mock_data )
	_local this << _self
	_local a_proc <<
		_proc @mocking_proc (_gather args)
			_import this
			_import mock_data
			_local call_data << this.mocking_data_for_args( mock_data, args )
			_if _not this.ok_to_continue?( call_data ) _then _return _endif
			_local (return?, _gather ret_vals) << this.get_return_values( call_data )
			_if return? _then _return _scatter ret_vals _endif
			_return _scatter _allresults this.return_underlying_method_result( call_data, _self, args )
		_endproc
	_return a_proc
_endmethod
$

_method mock_manager.mock_iter( mock_data )
	_local this << _self
	_local a_proc <<
		_iter _proc @mocking_iter (_gather args)
			_import this
			_import mock_data
			_local call_data << this.mocking_data_for_args( mock_data, args )
			_if _not this.ok_to_continue?( call_data ) _then _return _endif
			_for _gather iter_vals _over this.get_iter_vals( call_data)
			_loop
				_loopbody( _scatter iter_vals )
			_finally _with done?, _gather ret_vals
				 _if done? _then _return _scatter ret_vals _endif
			_endloop 						 
			_for _gather ret_vals _over this.return_underlying_iter_result( call_data, _self, args)
			_loop _loopbody( _scatter ret_vals )
			_finally _with _gather ret_vals
				 _return _scatter ret_vals
			_endloop
		_endproc
	_return a_proc
_endmethod
$

_method mock_manager.mock_method_proc( mock_data )
	## 
	##
	>> mock_data[ :method_proc ]
_endmethod
$

_method mock_manager.get_mocking_data( an_object, a_method )
	_local method_table_mocks << _self.mock_data[an_object.method_table]
	_if method_table_mocks _isnt _unset
	_then
		_return method_table_mocks[a_method]
	_endif
_endmethod
$

_method mock_manager.get_or_create_mocking_data( an_object, a_method )
	_local mocking_data << _self.get_mocking_data( an_object, a_method )
	_if mocking_data _is _unset
	_then 
		# Install our new mocking stuff in place of the old method and
		# store that old method.
		_local method_table_mocks << _self.mock_data[an_object.method_table]
		_if method_table_mocks _is _unset
		_then
			method_table_mocks <<
				_self.mock_data[an_object.method_table] << hash_table.new()
		_endif
		method_table_mocks[a_method] << mocking_data << hash_table.new()
		( mocking_data[:stored_name],
		  mocking_data[:private?],
		  mocking_data[:abstract?] ) <<
			   _self.store_old_behaviour( an_object, a_method )
		mocking_data[ :pre_existing? ] << _self.pre_existing_on_self?( an_object, a_method )
	_endif
	_return mocking_data
_endmethod
$

_method mock_manager.store_old_behaviour( an_object, a_method )
	_local old_method_name << a_method
	_loop
		_if an_object.method(old_method_name) _is _unset _then _leave _endif
		old_method_name << :mm! + old_method_name
	_endloop
	# Put the old method in with that name and return the old
	# method name.
	>> _if a_method _isnt old_method_name
	   _then
		   old_method << an_object.method( a_method )
		   old_method_proc << _if old_method.value.is_kind_of?( _proc() _endproc )
				      _then
					      >> old_method.value
				      _else
					      _local old_method_value << old_method.value 
					      >> _proc() _import old_method_value; _return old_method_value _endproc
				      _endif
		   an_object.define_method( old_method_name, old_method_proc,
					 old_method.private?, old_method.abstract? )
		   >> ( old_method_name, old_method.private?, old_method.abstract? )
	   _else
		   >> (_unset, _false, _false)
	   _endif
_endmethod
$

_method mock_manager.pre_existing_on_self?( an_object, a_method )
	_local object_method_table << an_object.method_table
	_local method_entry << an_object.method(a_method)
	_local method_method_table << _if method_entry _isnt _unset
				      _then >> method_entry.owner
				      _else >> _unset _endif
	_return method_method_table _is object_method_table
_endmethod

_method mock_manager.uninstall_mock( an_object, a_method, _gather mock_spec )
	_local mock_data << _self.get_mocking_data( an_object, a_method )
	_if mock_data _isnt _unset
	_then
		_self.restore_old_behaviour( an_object, a_method, mock_data, mock_spec  )
	_endif
_endmethod
$

_method mock_manager.mocks_left?( mock_data )
	_return  mock_data.includes_key?( :returns ) _orif
		mock_data.includes_key?( :raises ) _orif
		mock_data.includes_key?( :with_args ) _orif
		mock_data.includes_key?( :arg ) _orif
		mock_data.includes_key?( :wildcard ) _orif
		mock_data.includes_key?( :method_proc )
_endmethod
$

_method mock_manager.remove_mocking_behaviour( an_object, a_method, mock_data, mock_spec )
	_local (mock_part, _gather mock_rest) << (_scatter mock_spec )
	_self.perform( :unmock_method_ + mock_part + :|()|, mock_data, _scatter mock_rest )
_endmethod
$

_method mock_manager.unmock_method_returns( mock_data, _gather ret_vals )
	mock_data.remove_key( :returns )
	_return mock_data.empty?
_endmethod
$

_method mock_manager.unmock_method_raises(mock_data, cond_name, _gather cond_keys_and_values)
	mock_data.remove_key( :raises )
	_return mock_data.empty?
_endmethod
$

_method mock_manager.unmock_method_with_arguments( mock_data, arguments, _gather mock_rest )
	_local new_arg_list << rope.new()
	_for an_arg _over arguments.fast_elements()
	_loop new_arg_list.add_last(:with_arg); new_arg_list.add_last(an_arg); _endloop
	new_arg_list.add_all_last( mock_rest )
	_self.perform( :unmock_method_ + new_arg_list.remove_first() + :|()|, mock_data, _scatter new_arg_list )
_endmethod
$

_method mock_manager.unmock_method_with_arg( mock_data, an_arg, mock_part, _gather mock_rest )
	_local arg_mock_data << mock_data[:arg][an_arg]
	_if _self.perform( :unmock_method_ + mock_part + :|()|,
			   arg_mock_data, _scatter mock_rest ) _is _true
	_then
		mock_data[:arg].remove_key(an_arg)
		_if mock_data[:arg].empty?
		_then
			mock_data.remove_key(:arg)
		_endif
	_endif
	
	_return mock_data.empty?
_endmethod
$

_method mock_manager.unmock_method_with_wildcard( mock_data, wildcard, mock_part, _gather mock_rest )
	_local arg_mock_data << mock_data[:wildcard][wildcard]
	_if _self.perform( :unmock_method_ + mock_part + :|()|,
			   arg_mock_data, _scatter mock_rest ) _is _true
	_then
		mock_data[:wildcard].remove_key(wildcard)
		_if mock_data[:wildcard].empty?
		_then
			mock_data.remove_key(:wildcard)
		_endif
	_endif
	
	_return mock_data.empty?
_endmethod
$
	
_method mock_manager.unmock_method_iterates( mock_data, _gather iteration_values )
	mock_data.remove_key( :iter_returns )
_endmethod
$

_method mock_manager.unmock_method_method( mock_data )
	## 
	## 
	mock_data.remove_key( :method_proc )

	_return mock_data.empty?
_endmethod
$

_method mock_manager.restore_old_behaviour( an_object, a_method, mock_data, mock_spec )
	_self.remove_mocking_behaviour( an_object, a_method, mock_data, mock_spec )
	_if _not _self.mocks_left?( mock_data )
	_then
		_self.restore_old_method( an_object, a_method, mock_data )
	_endif
_endmethod
$

_method mock_manager.restore_old_method( an_object, a_method, mock_data )
	an_object.remove_method( a_method )
	old_method << an_object.method( mock_data[:stored_name] )
	_if mock_data[ :pre_existing? ] _is _true
	_then 
		an_object.define_method( a_method, old_method.value,
					 old_method.private?, old_method.abstract? )
	_endif
	an_object.remove_method( mock_data[:stored_name] )
_endmethod
$

_method mock_manager.remove_all_mocks_for( an_object )
	_self.mock_data[an_object.method_table] << _unset
_endmethod
$
