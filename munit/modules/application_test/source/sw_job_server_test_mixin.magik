#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
def_mixin(:sw_job_server_test_mixin, {:json_assert_mixin})
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.tear_down()
	##
	##

	_if (app << smallworld_product.applications.an_element()) _isnt _unset 
	_then
		app.close()
	_endif 	
	
	# Stop all job servers and wait for them to terminate
	job_engines << rope.new_from(sw_job_engine.all_job_engines)
	job_engines.add_last(job_server_framework.job_server)
	_for je _over job_engines.fast_elements()
	_loop 
		je.stop()
		cnt << 0
		# Only wait for a maximum of 1 minute to prevent the test from hanging if
		# something goes wrong with stopping the job engine.
		_while je.running? _andif cnt < 600
		_loop
			_thisthread.sleep(100)
			cnt +<< 1
		_endloop
	_endloop 

	job_server_framework.job_server.set_types_and_groups(_unset)
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.int!test_logger_is_registered(logger_name)
	## 
	## Check that the log_manager has a logger registered called LOGGER_NAME
	
	fail_str << write_string("log_manager does not have a logger named ", logger_name, " registered.")
	_self.assert_not_unset(log_manager.get_logger(logger_name), fail_str)
	
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.given_an_application()
	##
	##

	_if (app << smallworld_product.applications.an_element()) _is _unset 
	_then 
		smallworld_product.application_definition(_self.application_name).start()
		app << smallworld_product.applications.an_element()
	_endif	
	_self.properties[:app] << app

	>> _self

_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.given_job_engine_is_stopped()
	##
	##

	job_server_framework.job_server.stop()

	# Wait for the job server to terminate
	_while job_server_framework.job_server.running?
	_loop
		_thisthread.sleep(100)
	_endloop
	
	# Wait for the job server to update the log with information that it was
	# stopped. 
	_thisthread.yield_processor()
	
	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.when_job_engine_is_started()
	##
	##
	
	job_server_framework.job_server.start()
	_self.wait_for_job_server_to_start()

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.when_job_engine_is_stopped()
	##
	##
	
	_return _self.given_job_engine_is_stopped()
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.given_test_null_job_in_job_queue()
	##
	##

	stub_method_helper.replace_method(date_time,
					  :|now()|,
					  _proc()
						  _return date_time.new_from_components(2022, 1, 1, _unset,
											12, 0, 0, _unset, _unset)
					  _endproc)

	job << _self.properties[:null_job] << job_server_framework.job_server.create_new_job(:type, :null)

	stub_method_helper.replace_method(job, :ds!version,
					  _proc() _return 123 _endproc)
	stub_method_helper.replace_method(job, :user,
					  _proc() _return "test_user" _endproc)	
	stub_method_helper.replace_method(sw_job_engine, :|get_server_identifier()|,
					  _proc() _return "test_server" _endproc)	

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.when_test_job_is_processed()
	##
	##
	
	# Wait for the job to be processed
	status << _self.properties[:null_job].status
	_while _not (status = "Completed") _andif 
		_not (status = "ABANDONED")
	_loop
		_thisthread.sleep(100)
		status << _self.properties[:null_job].status
		show(:job_status, status)
	_endloop 	

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.then_log_content_is_correct(file_name)
	##
	## FILE_NAME - the file with expected JSON content
	##

	act_json << _self.get_last_four_entries_from_job_server_log_file()
	
	_self.assert_json_file(file_name, act_json, "Log is incorrect: #1")

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.get_last_four_entries_from_job_server_log_file()
	##
	## Gets last four lines from job server log.
	##

	stream << log_manager.get_loggers[:job_server].sys!slot(:logger).sys!slot(:stream)
	stream.sys!slot(:stream).flush()

	# Wait a second to let all log content be correctly written to
	# a file by OS.
	_thisthread.yield_processor()
	_thisthread.sleep(1000)
	
	current_file << stream.sys!slot(:current_file)
	
	four_lines << rope.new()
	file << external_text_input_stream.new(current_file)
	_protect
		_loop
			line << file.get_line()
			
			_if line _is _unset
			_then
				_leave
			_endif
			
			_if _not line.empty?
			_then
				four_lines.add_last(line)
			_endif

			_if four_lines.size > 4
			_then
				four_lines.remove_first()
			_endif
		_endloop
	_protection
		file.close()
	_endprotect
	
	_return %[ + four_lines.join_as_strings(%,) + %]
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.given_job_engine_types_and_groups(types)
	##
	## 
	
	job_server_framework.job_server.set_types_and_groups(types)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_test_mixin.assert_json_file(exp_json_fname, actual_json _optional msg _gather sort_data)
	##
	## Changes module name that is used for getting resource files.
	##
	(str, filename) << _self.resource_file_as_string(exp_json_fname,
							 _unset,
							 sw_job_server_test_mixin.module_name)
	_self.last_expected_file_path << filename
	>> _self.assert_json(str, actual_json, msg, _scatter sort_data)
_endmethod
$

_pragma(classify_level=debug)
_private _method sw_job_server_test_mixin.wait_for_job_server_to_start()
	##
	## Wait for the job server to start
	##
	
	cnt << 0
	_while _not job_server_framework.job_server.running? _andif 
		cnt < 100
	_loop
		_thisthread.sleep(100)
		cnt +<< 1
	_endloop 
	show(:done_waiting, cnt, job_server_framework.job_server.running?)
_endmethod
$
