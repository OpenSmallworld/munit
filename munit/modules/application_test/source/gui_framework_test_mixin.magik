#% text_encoding = iso8859_1
_package sw
$


_pragma(classify_level=debug)
## This mixin defines when/then methods for simple gui components 
## that can be used on its own without needing an application etc..
## Hence - useful for unit tests 
##
def_mixin( :gui_framework_test_mixin,  { } )
$


_pragma(classify_level=debug)
_method gui_framework_test_mixin.then_container_has_item_with_identifier_and_enabled( container, identifier,
										      expected_enabled?,
										      _optional expected_managed? )
	## 
	##

	items << container.get_items( identifier )

	fail_str << write_string( "The container ", container, " should have a GUI element with identifier " )
	fail_str << write_string( fail_str, identifier, ", but it doesn't" )

	_self.assert_false( items.empty?, fail_str )

	_if ( item << items.an_element() ) _isnt _unset
	_then
		_self.then_item_is_enabled( item, expected_enabled? )
	_endif

	_if expected_managed? _isnt _unset
	_then
		_self.then_item_is_managed( item, expected_managed? )
	_endif

	>> _self
	
_endmethod
$

_pragma(classify_level=debug)
_method gui_framework_test_mixin.then_no_container_item_with_identifier_exists(container, identifier)
	## 
	## 
	items << container.get_items(identifier)

	fail_str << write_string("The container ", container, " should not have a GUI element with identifier ")
	fail_str << write_string(fail_str, identifier, ", but it does")

	_self.assert_true(items.empty?, fail_str)

	>> _self
_endmethod
$


_pragma(classify_level=debug)
_method gui_framework_test_mixin.then_item_is_enabled( item, expected_enabled? )
	## 
	## Verify the enabled state of ITEM.
	##
	## ITEM is a swift widget.  Compare ITEM.enabled? with
	## EXPECTED_ENABLED?
	##
	## If ITEM is a sw_text_item, compare ITEM.editable? with
	## EXPECTED_STATE
	##

	enabled? << item.enabled?
	_if item.is_kind_of?( sw_text_item ) _andif
	    _not item.is_choice_item?
	_then
		enabled? << item.editable?
	_endif
	
	_if expected_enabled?
	_then 
		fail_str << write_string( "Expected ", item, " to be enabled, but it is not" )
	_else
		fail_str << write_string( "Expected ", item, " to not be enabled, but it is" )
	_endif
	
	_self.assert_equals( expected_enabled?, enabled?, fail_str )

	>> _self
	
_endmethod
$

_pragma(classify_level=debug)
_method gui_framework_test_mixin.then_item_is_managed( item, expected_managed? )
        ## 
        ## Verify the managed state of ITEM.
        ##

        managed? << item.managed?
        
        _if expected_managed?
        _then 
                fail_str << write_string( "Expected ", item, " to be managed, but it is not" )
        _else
                fail_str << write_string( "Expected ", item, " to not be managed, but it is" )
        _endif
        
        _self.assert_equals( expected_managed?, managed?, fail_str )

        >> _self
        
_endmethod
$

_pragma(classify_level=debug)
_method gui_framework_test_mixin.then_container_has_action_gui_element_and_enabled( container, action_string,
											 expected_enabled?,
											 _optional gui_type )
	## 
	##

	items << _self.get_action_items( container, action_string, gui_type )
	
	fail_str << write_string( "The ", container, " should have a GUI element for the ", action_string )
	fail_str << write_string( fail_str, " action on the ", gui_type, ", but it doesn't" )

	_self.assert_false( items.empty?, fail_str )

	_if ( item << items.an_element() ) _isnt _unset
	_then
		_self.then_item_is_enabled( item, expected_enabled? )
	_endif

	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_private _method gui_framework_test_mixin.get_action_items( container, action_string, _optional gui_type )
	## 
	## Return the items of CONTAINER that are actions where
	## engine_and_action_string() equals ACTION_STRING.
	##
	## GUI_TYPE can be:
	## - :toolbar
	## - :menu
	##
	## If GUI_TYPE is specified, filter the items to only return
	## those that are present on the specified GUI_TYPE.
	##

	items << set.new()
	
	_for item _over container.all_items()
	_loop
		_if item.responds_to?( :model ) _andif
		    ( item_model << item.model ).responds_to?( :engine_and_action_string|()| ) _andif
		    item_model.engine_and_action_string( _true ) = action_string _andif
		    _self.correct_parent?( item, gui_type )
		_then
			items.add( item )
		_endif
	_endloop
	
	>> items
	
_endmethod
$

_pragma(classify_level=debug)
_private _method gui_framework_test_mixin.correct_parent?( item, _optional gui_type )
	## 
	## Check if ITEM has a parent item of GUI_TYPE.
	##
	## GUI_TYPE can be:
	## - :toolbar
	## - :menu
	##
	## Always return true if GUI_TYPE is not specified
	##

	correct_parent? << _true 

	_if gui_type _is :toolbar
	_then
		correct_parent? << item.get_parent_of_type( :tag!sw_toolbar_container ) _isnt _unset
		
	_elif gui_type _is :menu
	_then 
		correct_parent? << item.get_parent_of_type( :tag!menubar ) _isnt _unset
	_endif

	>> correct_parent?
	
_endmethod
$

_pragma(classify_level=debug)
_private _method gui_framework_test_mixin.get_top_container_of_frame_with_title(frame_title)
	##
	## Returns the top container of a frame with title FRAME_TITLE.
	##
	## If no such frame exists, returns _unset.
	##
	## If mulitple frames with title FRAME_TITLE exist, the first one found will be
	## returned.
	## 
	_for top_container _over sw_swift_manager.active_top_containers().fast_elements()
	_loop
		_if top_container.top_frame.title = frame_title
		_then
			_return top_container
		_endif
	_endloop
_endmethod
$

_pragma(classify_level=debug)
_private _method gui_framework_test_mixin.wait_for_frame_to_be_active(frame_title, _optional timeout)
	##
	## Wait for a frame with title FRAME_TITLE to be active.
	##
	## TIMEOUT specified the maximum time to wait in milliseconds. It defaults to
	## 60000 (i.e. 1 minute).
	##

	timeout << timeout.default(60000)
	
	start_time << date_time.now(:milliseconds)
	_loop
		container << _self.get_top_container_of_frame_with_title(frame_title)
		_if container _isnt _unset _andif container.active?
		_then
			_leave
		_endif

		current_time << date_time.now(:milliseconds)
		elapsed_time << (current_time - start_time).milliseconds
		_if elapsed_time > timeout
		_then
			condition.raise(:error, :string, write_string("Timeout: Waited ", elapsed_time, " milliseconds for frame with title ", frame_title, " to be active."))
		_endif
		
		_thisthread.sleep( 10 )
	_endloop
_endmethod
$
