#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=debug)
def_slotted_exemplar(:sw_job_server_session_itest,
  {},
  {:test_case, :sw_job_server_test_mixin})
$

_pragma(classify_level=debug)
sw_job_server_session_itest.method_table.resolve_conflicts(:test_case)
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.tear_down()
	##
	##
	
	_super(sw_job_server_test_mixin).tear_down()
	_super(test_case).tear_down()
	
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_window_system_is_not_set()
	## 
	##
	
	_self.assert_unset(!window_system!,
			   "!window_system! global value is set while it should be unset.")
	
	_self.assert_equals(system.window_system,
			    :none,
			    "Wrong value of system.window_system: #1")	
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_only_one_application_configured_in_session()
	## 
	##
	
	_if (actual << smallworld_product.command_line_options[:application]) _isnt _unset
	_then
		expected << _self.application_name
		fail_str << write_string("Wrong application started. Expected: ", expected, "Actual: ", actual) 
		_self.assert_equals(expected, actual, fail_str)
	_else
		_self.fail("Application is not started.")
	_endif

_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_job_server_is_running()
	##
	##
	
	_self.given_an_application()
	_self.wait_for_job_server_to_start()
	_self.assert_true(job_server_framework.job_server.running?, "Job Server is not running.")

_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_expected_plugins_are_available()
	## 
	##

	_self.given_an_application()
	_if (app << _self.properties[:app]) _isnt _unset
	_then
		_for plugin_name, plugin_class _over _self.expected_plugins.fast_keys_and_elements()
		_loop
			_if (plugin << app.component(plugin_name)) _isnt _unset
			_then
				_self.assert_equals(plugin_class, plugin.class_name,
						    "Plugin " + plugin_name + " is of wrong class: #1")
			_else
				_self.fail("Plugin not available: " + plugin_name)
			_endif
		_endloop
	_else
		_self.fail("Application is not started.")
	_endif
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_job_server_logger_is_registered()
	##
	##
	
	_self.assert_not_unset(log_manager.get_loggers[:job_server],
			       "Job Server logger is not registered.")
_endmethod
$


_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_job_server_logging()
	##
	## Checks if Job Server logging works fine and writes correct
	## log entries to a log file.
	##

	_self.given_an_application()
	
	_if log_manager.get_loggers[:job_server] _isnt _unset
	_then
		_self.
			given_job_engine_is_stopped().
			given_job_engine_types_and_groups({"null"}).
			given_test_null_job_in_job_queue().
			when_job_engine_is_started().
			when_test_job_is_processed().
			when_job_engine_is_stopped().
			then_log_content_is_correct("log.json")
	_else	
		_self.fail("Job Server logger is not registered.")
	_endif
_endmethod
$

_pragma(classify_level=debug)
_method sw_job_server_session_itest.test_sw_job_server_logging_module_is_loaded()
	##
	##
	
	_self.assert_not_unset(sw_module_manager.module(:sw_job_server_logging).loaded?,
			       "sw_job_server_logging module is not loaded.")
_endmethod
$