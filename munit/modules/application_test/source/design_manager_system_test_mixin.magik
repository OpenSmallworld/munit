#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug)
##
## This mixin defines given/when/then methods for designs.
##
## All classes that inherits from this mixin must define a
## .properties method that returns a property_list.
##
## Method get_or_create_project() may create a new project for
## the design. The state model use will default to the first
## one found unless it is explicitly specified.
##
## The state model to use can be specified in one of two ways:
## - call given_a_state_model( name ) will cached the supplied
## name in .properties[:state_model_name] OR
## - redefine the constant default_job_type on the subclass
##
## If the state model name is not explicitly configured, then
## the standard DM behaviour applies:
## the project will pick up a state model from 
## (swg_dsn_project.configuration[:state_model] and if this
## gives no valid model, will just pick an_element() from the
## state model table
def_mixin( :design_manager_system_test_mixin, { :application_system_test_mixin } )
$


_pragma(classify_level=debug, usage=subclassable)
## Defines the Job type for the project - used to look up the
## state model. Can be subclassed.
design_manager_system_test_mixin.define_shared_constant( :default_state_model_name, _unset, :public )
$


_pragma(classify_level=debug, usage=subclassable)
## Defines the number of steps to post the active scheme to
## "Design top".  The default is 1.
design_manager_system_test_mixin.define_shared_constant( :number_of_steps_to_post_active_scheme_to_design_top, 1, :public )
$

_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_no_active_design()
	## 
	##
	
	swg_dsn_admin_engine.clear_current_design()

	>> _self
	
_endmethod
$

_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_a_state_model( state_model_name )
	##
	## STATE_MODEL_NAME is the name of the state model you want to
	## use for a new project.
	## Sets .properties[:state_model_name]

	_self.properties[:state_model_name] << state_model_name
_endmethod
$

_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_a_design( project_name, design_name, _optional xmin, ymin, xmax, ymax )
	## 
	## If a design with DESIGN_NAME exists, use it, else create a
	## new one.
	##
	
	_if ( design << _self.get_existing_test_design( project_name, design_name )) _is _unset
	_then
		_self.given_a_new_design( project_name, design_name, xmin, ymin, xmax, ymax )		
	_else
		_self.activate_design( design )

		_self.properties[ :design  ] << design
		_self.properties[ :project ] << design.project
		
	_endif

	>> _self 
	
_endmethod
$


_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_a_top_level_design(project_name, design_name, _optional xmin, ymin, xmax, ymax)
	## 
	## Create a new design named DESIGN_NAME in project named PROJECT_NAME
	## The new design has no parent design.
	##
	design << _self.int!given_a_new_design(project_name, design_name)
	_self.properties[design_name.as_symbol()] << design
	_self.properties[:project] << design.project

	_return _self 
_endmethod
$


_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_a_new_design(project_name, design_name, _optional xmin, ymin, xmax, ymax)
	##
	## Create a new design named DESIGN_NAME in project named PROJECT_NAME
	## If active scheme exists, it is used as the parent design of
	## the newly created design.
	## See method get_or_create_project() for argument description
	##
	parent_design << swg_dsn_admin_engine.active_scheme
	
	design << _self.int!given_a_new_design(project_name, design_name, parent_design, xmin, ymin, xmax, ymax)
	_self.properties[:design] << design
	_self.properties[:project] << design.project

	_return _self 
	
_endmethod
$


_pragma(classify_level=debug)
_private _method design_manager_system_test_mixin.int!given_a_new_design(project_name, design_name, _optional parent_design, xmin, ymin, xmax, ymax )
	## 
	## Create a new design with name DESIGN_NAME in the project
	## with name PROJECT_NAME  which can be either new or an
	## existing project.
	## This method will fail if a design with DESIGN_NAME exists
	## already.
	## 
	_try _with cond
		
		swg_dsn_admin_engine.clear_current_design()

		project << _self.get_or_create_project( project_name, xmin, ymin, xmax, ymax )
		views   << _self.ds_view_names
		swg_dsn_admin_engine.get_admin_view().commit()
		design  << swg_dsn_admin_engine.create_scheme( project, parent_design, design_name, views, _unset )
		
		_self.activate_design( design )

		_return design
	_when ds_write_switch_failed
		# We ought to be able to use the :view parameter of the
		# condition, but this doesn't get set :-(
		_local view << swg_dsn_admin_engine.get_admin_view()
		write( "Failed to get write access to to view ", view, " as it is being written to by ", view.current_writer )
		cond.continue_handling()
	_endtry

_endmethod
$


_pragma(classify_level=debug)
_method design_manager_system_test_mixin.given_no_active_design()
	## 
	##
	
	swg_dsn_admin_engine.activate_design( _unset )
	>> _self
	
_endmethod
$


_pragma(classify_level=debug)
_method design_manager_system_test_mixin.when_changing_design_status( new_status )
	## 
	## Change the status of the current design to NEW_STATUS

	design << swg_dsn_admin_engine.active_scheme	

	_if (design.status <> new_status)
	_then 	
		_self.when_transitioning_design_to_next_state( design, new_status )
		swg_dsn_admin_engine.activate_scheme( design )
	_endif

	>> _self
	
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method design_manager_system_test_mixin.when_transitioning_active_design_to_future_state( transitions, future_state,
											   _optional current_application, assert_transition_is_successful? )
	## 
	## Transition the current design from the current state to
	## a future state.  TRANSITIONS is an equality hash table keyed
	## on current state and the value being the state to transition
	## to.
	##
	## Once a state is reached that does not have an entry in
	## TRANSITIONS, this is the final future state.
	##
	## FUTURE_STATE is the goal state.  Check that this state is
	## reached. 
	##
	## A transition that runs QM requires the dynamic
	## !current_application! to be set.  In this case the optional
	## CURRENT_APPLICATION argument should be provided.
	##
	## The last step is to open the current design again, since
	## performing the transitions might have resulted in DM Top
	## being the current alternative.
	##
	## Ensure that the active scheme is still set to the current
	## design set after transition
	## NOTE: if you transition to Post Pending, the design will be
	## auto transitioned to Posted and this will cause the assert
	## to fail, but when ASSERT_TRANSITION_IS_SUCCESSFUL? is false (default true)
	## then assert is not called
	## 

	# Always post only to the direct parent design
	_local me << _self 
	stub_method_helper.replace_method( swg_dsn_vmds_integrator, :|number_of_steps_to_post_active_scheme_to_design_top()|,
					   _proc()
						   _import me
						   >> me.number_of_steps_to_post_active_scheme_to_design_top
					   _endproc )

	scheme << swg_dsn_admin_engine.active_scheme

	visited_states << equality_set.new()

	_loop

		# If the status didn't change from the previous iteration,
		# something went wrong.  Leave now to prevent an endless loop
		_if scheme.status = status _then _leave _endif
		
		status << scheme.status.copy()
		visited_states.add( status )

		# No more transitions specified, hopefully reached goal state
		_if ( next_state << transitions[ status ] ) _is _unset _then _leave _endif
		
		_if visited_states.includes?( next_state ) _then _continue _endif
		
		_self.when_transitioning_design_to_next_state( scheme, next_state, current_application )
		
	_endloop

	fail_str << write_string( "The transition to ", future_state, " failed.  The design's current status is ",
				  scheme.status, ".  The job that failed had the following description: ", newline_char )
	_if _self.properties[ :last_job ] _isnt _unset
	_then
		_protect
			job_queue_view << _self.go_to_job_queue_test_alternative()
			fail_str << write_string( fail_str, _self.properties[ :last_job ].outcome_description )
		_protection
			job_queue_view.goto_top_alternative()
		_endprotect
			
	_endif

	_if assert_transition_is_successful?.default(_true)
	_then 	
		_self.assert_equals( future_state, scheme.status, fail_str )
	_endif 
	
	swg_dsn_admin_engine.activate_scheme( scheme )
			
	>> _self
	
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method design_manager_system_test_mixin.when_transitioning_design_to_next_state( scheme, next_state, _optional current_application )
	## 
	## Transition SCHEME to NEXT_STATE.  NEXT_STATE must be a
	## potential subsequent state of the current state of SCHEME.
	##
	## A transition that runs QM requires the dynamic
	## !current_application! to be set.  In this case the optional
	## CURRENT_APPLICATION argument should be provided.
	##

	_dynamic !current_application!
	_if current_application _isnt _unset
	_then
		!current_application! << current_application
	_endif

	_if scheme = swg_dsn_admin_engine.active_scheme
	_then 
		swg_dsn_admin_engine.save_design_changes()
	_endif

	stub_method_helper.replace_method( swg_dsn_admin_engine, :|merge_to_build_plans()|,
					   _proc()
						   >> property_list.new_with( :result, _true )
					   _endproc )
	_local properties << _self.properties
	stub_method_helper.replace_method( sw_job, :|run()|, _proc( _gather args )
								     _import properties
								     properties[ :last_job ] << _self
								     >> _self.saved!run( _scatter args )
					   _endproc )

	je << _self.job_engine()

	_protect
		_handling swg_dsn_confirm_integrate_changes _with _proc() >> _true _endproc
		_handling swg_dsn_confirm_clear_tables_for_integration _with _proc() >> _true _endproc
		job_queue_view << _self.go_to_writable_job_view_test_alternative()
		
		swg_dsn_admin_engine.activate_scheme( scheme )
		swg_dsn_admin_engine.find_and_perform_transition( scheme, scheme.status, next_state )
		
		done_proc << _proc()
				     _import scheme, next_state
				     >>scheme.status = next_state
			     _endproc
		_self.run_job_manager_jobs(done_proc)
	_protection
		_self.ensure_job_view_is_in_top_alternative()
	_endprotect

	>> _self
	
_endmethod
$


_pragma(classify_level=debug)
_method design_manager_system_test_mixin.scenario_create_design( xmin, ymin, xmax, ymax, project_name, design_name, new_status, dataset_light )
	## 
	## Create a writable design.  An application must be running
	## before executing this scenario.
	##
	## GIVEN an application is running
	##  
	## WHEN I create a design with 
	##  Name="<PROJECT_NAME>"
	##  Type="<TYPE>"
	##  Bounds=(<XMIN,YMIN,XMAX,YMAX>)
	## AND I transitioned the Design to "<NEW_STATUS>"
	##
	## THEN Masthead_title= "<_self.masthead_title>"
	##  AND Dataset Light=<DATASET_LIGHT>
	##
			
	>> _self.given_no_active_design().
		when_going_to_bounds( xmin, ymin, xmax, ymax ).
		given_a_new_design( project_name, design_name ).
		when_changing_design_status( new_status ).
		then_masthead_title_is( _self.parameter_masthead_title ).
		then_dataset_light_is( dataset_light )
	
_endmethod
$

_pragma(classify_level=debug)
_method design_manager_system_test_mixin.run_job_manager_jobs(_optional done_proc)
	##
	##

	je << _self.job_engine()
	_loop
		jobs << je.find_and_run_next_jobs()
		_if done_proc _isnt _unset
		_then
			_if done_proc() _then _leave _endif
		_endif
		_if jobs.empty? _then _leave _endif
	_endloop
_endmethod
$

_pragma(classify_level=debug)
_method design_manager_system_test_mixin.ensure_job_view_is_in_top_alternative()
                ##
                ## If not already in top, commit and move to top
                ##
                job_queue_view << sw_job_engine.job_view
                _if job_queue_view.alternative_path.size _isnt 0
                _then
                                job_queue_view.commit()
                                job_queue_view.goto_top_alternative()
                _endif
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.get_existing_test_design( project_name, design_name )
	##
	## Returns the test design if it exists and _unset otherwise
	##

	>> swg_dsn_admin_engine.find_scheme( design_name, project_name, _false )
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.get_or_create_project( project_name, xmin, ymin, xmax, ymax )
	## 
	## Create a new project record with PROJECT_NAME and bounds
	## given by XMON,YMON,XMAX,YMAX.
	
	project << swg_dsn_admin_engine.find_project_or_scheme( project_name, :project, _false )
	_if project _is _unset 
	_then
		
		_if xmin _isnt _unset
		_then
			bounds << bounding_box.new( xmin, ymin, xmax, ymax )
		_else
			manager << _self.properties[ :application ].get_service_provider( :map_manager )
			bounds  << manager.current_map_view.current_view_bounds
		_endif
		job_attributes << property_list.new_with(:job_type, _self.properties[:state_model_name].default( _self.default_state_model_name ) )
		project  << swg_dsn_admin_engine.create_project( project_name, _self.ds_view_names, bounds.as_sector_rope(), job_attributes )
		
	_endif

	>> project
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.ds_view_names
	## 
	##	
		
	dataset_names << rope.new()
	_for dataset _over swg_dsn_admin_engine.dm_managed_datasets().fast_elements()
	_loop
		dataset_names.add_last( dataset.name )
	_endloop

	>> dataset_names
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.parameter_masthead_title
	## 
	## This method should be subclassed to provide the correct
	## masthead title for the application the test is testing.
	##

	>> ""
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.delete_project()
	## 
	## Delete the project and designs created by this test.
	##
	## This method can be called in the tear_down() method of tests
	## inheriting from this mixin.
	##

	# Wait for all GUI and application threads to finish
	_self.wait_for_application_threads_to_finish()
	
	_if ( project << _self.properties[ :project ] ) _isnt _unset
	_then
		swg_dsn_admin_engine.activate_design( _unset )
		swg_dsn_admin_engine.delete_project( project, _true )
		swg_dsn_admin_engine.rollforward()
	_endif
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method design_manager_system_test_mixin.activate_design( design )
	## 
	##
	
	swg_dsn_admin_engine.activate_design( design )
	
_endmethod
$


_pragma(classify_level=debug,topic={MUnit, Test})
_private _method design_manager_system_test_mixin.go_to_writable_job_view_test_alternative()
	## 
	##
	
	job_queue_view << _self.go_to_job_queue_test_alternative()
	job_queue_view.switch( :write )

	>> job_queue_view
	
_endmethod
$


_pragma(classify_level=debug,topic={MUnit, Test})
_private _method design_manager_system_test_mixin.go_to_job_queue_test_alternative()
	## 
	##

	job_queue_view   << _self.job_engine().job_view
	alternative_name << system.host_name

	_if _not job_queue_view.alternative_path.empty?
	_then
		job_queue_view.goto_top_alternative()
	_endif
	
	_if _not job_queue_view.has_alternative?( alternative_name )
	_then
		job_queue_view.spawn( alternative_name )
	_endif
	
	job_queue_view.go_to_alternative( alternative_name )

	>> job_queue_view
	
_endmethod
$


_pragma(classify_level=debug,topic={MUnit, Test})
_private _method design_manager_system_test_mixin.job_engine()
	## 
	##	

	_if (je << sw_job_engine.job_engine()) _is _unset 
	_then
		je << sw_job_engine.new()
	_endif
		
	>> je
	
_endmethod
$


