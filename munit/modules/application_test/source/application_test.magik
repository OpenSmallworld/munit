#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug)
##
## Top level test_case class providing infrastructure for tests
## that require an application to be running.
##
## This class provides a framework for writing tests that
## require an application to be running by implementing the
## following behaviour: 
##
## * set_up() 
##   * ensure that the required application (as specified by application_name) is running. 
##     * If it is already running, the test will run
##     * If it is available but not yet running, it will be started and the test will run
##     * If it is not available, the test will fail. 
##   * ensure that the database is writable 
##     * It creates an in-memory scratchpad in any
##       datasets (as specified by dataset_names) in which the test
##       will make any changes.  
## * tear_down() 
##   * Remove the scratchpad so the dataset reverts to its original state. 
##
## Subclasses of application_test should implement the following methods:
##
## * application_name - This should return the name of the application to be used for these tests.
## * writable_dataset_names - This should return the names of any datasets that need to be writable. 
##
## application_test provides the following API methods:
##
## * application - This returns the application that is running
## * dataset( ds_name ) - This returns the dataset identified by ds_name  
##
def_slotted_exemplar( :application_test,
        {
		{ :application,  _unset }
	},
        { :database_test, :application_system_test_mixin } )
$


application_test.method_table.resolve_conflicts( :database_test )
$

application_test.define_shared_constant(:test_aspects,
	property_list.new_with( :never, "NEVER" ), :public )
$

_pragma(classify_level=debug)
application_test.define_slot_access( :application, :write, :private )
$

_pragma(classify_level=debug)
## The application to open, it actually only needs an open database
application_test.define_shared_constant(:application_name, "swaf_professional", :public)
$

_pragma(classify_level=debug)
_method application_test.set_up()
	##
	## This gets called before each test and ensures that the
	## correct application is running.
	## It also creates a scratchpad to hold any transient data.
	##

	_super.set_up()
	
	_self.given_an_application( _self.application_name )
	_self.application << .properties[ :application ]
_endmethod
$


_pragma(classify_level=debug)
_method application_test.note_change( who, what, data )
	## 
	## Conflict resolution method
	##

	>> _super( application_system_test_mixin ).note_change( who, what, data )
	
_endmethod
$
_pragma(classify_level=debug)
_method application_test.one_time_tear_down()
	## close application before calling super implementation
	##

	_self.close_application()
	
	_super(database_test).one_time_tear_down()
_endmethod
$
_pragma(classify_level=debug)
_private _method application_test.close_application()
	_if .properties _is _unset _orif
	    _self.force_close? _is _false _orif
	    (app<< .properties[ :application ].default(.application)) _is _unset 
	_then
		_return
	_endif
	
	app?<< app.is_kind_of?(application)
	_if app?
	_then 
		# to prevent dialog 'Do you want to log of start another application?'
		stub_method_helper.replace_method(app, :only_one_application_available?, _proc () >> _false _endproc)
		stub_method_helper.replace_method(app, :anything_running?, _proc () >> _true _endproc)
		app.simple_application_shutdown?<< _false
	_endif 
	app.close()
	_if app?
	_then 
		_self.wait_for_application_threads_to_finish()
	_endif 
	.properties[ :application ]<< .application<< _unset
_endmethod
$
