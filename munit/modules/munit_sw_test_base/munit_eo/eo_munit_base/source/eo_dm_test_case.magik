#% text_encoding = iso8859_1
_package sw
$


_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
##
## A class that sets up a Design and Project to perform Munit testing.
## In subclasses checkpoint_name, project_name and design_name
## shared constants should be set. 
##
## You need to define the extent for the project area: subclass
## and redefine the shared constants: start_coord and
## :data_bounds_size
##
def_slotted_exemplar(:eo_dm_test_case,
	{
	},
	{ :design_manager_test_case, :eo_start_application_mixin })
$

_pragma(classify_level=debug, usage=subclassable)
## Defines the Job type for the project - used to look up the
## state model. Can be subclassed.
eo_dm_test_case.define_shared_constant( :default_state_model_name,
	"Electric Meta Publish Proposed", :public )
$


_pragma(classify_level=debug,topic=MUnit,usage=subclassable)
## The status to transition the design to to ensure that it is writable
eo_dm_test_case.define_shared_constant( :writable_design_status, "In Design", :public )
$


_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
## Coordinate used as starting point for Design area. The
## design extent will be centred on this coordinate.
eo_dm_test_case.define_shared_constant(:start_coord,
	coordinate.new(-847711299, 504960200),
	:public)
$


_pragma(classify_level=debug,topic=MUnit,usage=subclassable)
## Return a hash table keyed on the current design state and
## the value being the state to transition to.  This is
## configured as the shortest path from "In Design" to "Posted"
eo_dm_test_case.define_shared_constant( :state_transitions_to_posted,
	equality_hash_table.new_with( "In Design",        "Design Complete",
				      "Design Complete",  "As Built Changes",
				      "As Built Changes", "Post Pending" ),
	:private )
$


_pragma(classify_level=debug,topic=MUnit,usage=subclassable)
## Return a hash table keyed on the current design state and
## the value being the state to transition to.  This is
## configured as the shortest path from "In Design" to "Publish"
eo_dm_test_case.define_shared_constant( :state_transitions_to_publish,
	equality_hash_table.new_with( "In Design",        "Design Complete",
				      "Design Complete",  "Publish" ),
	:private )
$

_pragma(classify_level=debug)
_private _method eo_dm_test_case.int!get_current_application()
	##
	## If _self.application_name, start the application and then
	## return it.
	## Otherwise, return a dummy application.
	## 
	_if _self.application_name _isnt _unset
	_then
		_self.given_an_application(_self.application_name, 1500, 1000)
		_if (real_app << _self.get_application()) _is _unset
		_then
			condition.raise(:error, :string, "Failed to start application: " +_self.application_name)
		_endif
		_return real_app
	_endif
	
	_return dummy_application.new()	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_method eo_dm_test_case.current_application()
	## 
	## eo_db_test_case inherits from eo_start_application_mixin
	## if test started application using application() then
	## application contains real application othervise it
	## returns dummy application.
	
	>> _if (real_app << _self.get_application()) _isnt _unset
	   _then >> real_app
	   _else >> dummy_application.new()
	   _endif 
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method eo_dm_test_case.set_up()
	##
	##
	
	_super.set_up()	
	.properties[:application] << _self.int!get_current_application()
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method eo_dm_test_case.tear_down()
	## 
	## Enable business rules again.
	##

	_for app _over smallworld_product.applications()
	_loop
		
		provider << app.get_service_provider ( :swo_business_rules )
		_if provider _isnt _unset _then 
			provider.set_preference ( :validate_business_rules, _true )
		_endif
		
	_endloop

	_super.tear_down()
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit)
_private _method eo_dm_test_case.get_existing_test_design_for_project( _optional a_design_name)
	##
	## Returns the test design if it exists and _unset otherwise
	##
	
	>> _super.get_existing_test_design( _self.project_name, a_design_name.default( _self.design_name ))
	
_endmethod
$


_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_private _method eo_dm_test_case.objects_dump_file
	## Default data dump file name for loading design from flat file.
	>> _self.class_name + "_dump.magik"
_endmethod 
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
## Checkpoint name for one time setup of specs.
## If the value is _unset, no specs will be loaded.
## Override in subclass with a checkpoint name if the test
## needs to load specs. Subclass the method
## one_time_setup_insert_specs() to actually load the specs.
eo_dm_test_case.define_shared_constant(:spec_checkpoint_name,
	_unset,
	:public)
$


_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_private _method eo_dm_test_case.one_time_setup_database()
	##
        ## Subclass this method if test case requires database to be
        ## updated prior to design creation.
	##

	_if _self.spec_checkpoint_name _isnt _unset
	_then
		_self.one_time_setup_specs()
	_endif
	_self.one_time_setup_load_design_data()
_endmethod
$

_pragma(classify_level=restricted, topic=MUnit)
_private _method eo_dm_test_case.one_time_setup_specs()
	##
        ## Insert spec records required by this test.
	##
	elec_view << _self.ds_views[:electric]
	# The superclass manages data setup with checkpoints in the
	# test design, but we need to do the same in the frozen top
	# alternative.  The checkpoint in the test design will mean
	# that is doesn't set up the data twice for the same design,
	# but we want to stop it from being set up twice if run by a
	# different test user.  
	_if _not elec_view.perform_frozen( :|has_checkpoint?()|, _self.spec_checkpoint_name )
	_then
		write("Inserting specs for " + _self.class_name)
		_self.one_time_setup_insert_specs()
		elec_view.perform_frozen( :|switch()|, :write )
		elec_view.perform_frozen( :|checkpoint()|, _self.spec_checkpoint_name )
		elec_view.perform_frozen( :|switch()|, :hard_readonly)
	_endif
_endmethod
$

_pragma(classify_level=restricted, topic=MUnit, usage=subclassable)
_abstract _method eo_dm_test_case.one_time_setup_insert_specs()
	##
        ## Subclasses should implement this method to insert spec
        ## records required by this test.
	##
	## Use self.insert_spec_record() to insert spec records.
	##
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_private _method eo_dm_test_case.one_time_setup_load_design_data()
	## Creates test data by loading data dump file.

	dump_file_name << _self.objects_dump_file

	_dynamic !notify_database_data_changes?! << _false
	_dynamic !global_auto_declare?!
	_dynamic !temporarily_disabled_business_rule_names!
	_dynamic !magik_object_import_transform!

	# Try to load the dump file.  If it doesn't exist, do nothing. 
	_try
		# Don't write out warnings - e.g. db_dangling_references
		_handling warning _with _proc() _endproc
		load_file(smallworld_product.get_data_file(dump_file_name,_self.module_name))
		
	_when resource_not_found_in_module_error,
		resource_not_found_error
		# Do nothing.  This test doesn't have a dump file to load
	_endtry
	
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method eo_dm_test_case.insert_spec_record ( spec_table_name, spec_name )
	##
	## Insert a new spec record if it doesn't already exist.
	##
	## SPEC_TABLE_NAME specifies the table name for the spec as a symbol.
	##
	## SPEC_NAME specified the name of the spec. The properties of the spec are
	## retrieved from eo_shared_test_specs. Having the spec properties specified
	## centrally ensures that specs which are used across different tests always
	## have the same field values.
	##
	elec_view << _self.ds_views[:electric]
	spec_table << elec_view.collections[spec_table_name]
        properties << eo_shared_tests_specs.get_properties_for(spec_table_name, spec_name)
        >> _self.insert_spec_record_with_properties( spec_table, properties )	
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
_method eo_dm_test_case.insert_spec_record_with_properties( spec_table, properties )
	## 
	## Insert a new spec record into SPEC_TABLE. Where possible, use
	## insert_spec_record() instead.
	##
	## If a spec record is found that match the supplied values,
	## nothing is inserted.
	##
	## PROPERTIES[:spec_name] must be supplied
	##
	## If values are not supplied for mandatory fields, defaults
	## are used.
	##

	pred << predicate.eq ( :spec_name, properties[:spec_name] )
	_if ( manufacturer << properties[:manufacturer] ) _isnt _unset _then 
		pred << pred.and ( predicate.eq ( :manufacturer, manufacturer ))
	_endif
	_if ( manufacturer_code << properties[:manufacturer_code] ) _isnt _unset _then 
		pred << pred.and ( predicate.eq ( :manufacturer_code, manufacturer_code ))
	_endif

	_if ( spec_record << spec_table.select ( pred ).an_element() ) _is _unset _then

		properties[:obsolete] << properties[:obsolete].default ( _false )
		
		_for field_name _over {:lv, :mv, :hv, :ehv, :sub, :real_spec}.fast_elements()
		_loop
			_if spec_table.has_field?( field_name )
			_then 
				properties[field_name] << properties[field_name].default ( _true )
			_endif 
		_endloop 

		dsview << spec_table.source_view
		dsview.perform_frozen ( :|switch()|, :write )
		
		_protect
			
			spec_record << record_transaction.new_insert ( spec_table, properties ).run()
			dsview.perform_frozen ( :|commit()| )
			dsview.commit()
			
		_protection
			
			dsview.perform_frozen ( :|rollback()| )
			dsview.perform_frozen ( :|switch()|, :hard_readonly )
			
		_endprotect
	_else
		_self.check_spec_record_fully_matches(spec_record, properties)
	_endif

	>> spec_record
	
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_method eo_dm_test_case.check_spec_record_fully_matches(actual_spec_record, expected_properties)
	## 
	##
	matches? << _true
	_for key, expected_prop _over expected_properties.fast_keys_and_elements()
	_loop
		actual_prop << actual_spec_record.perform(key)

		props_match? << _if expected_prop.is_kind_of?(unit_value)
				_then
					>> _self.unit_values_match?(actual_prop, expected_prop)
				_else
					>> actual_prop = expected_prop
				_endif

		_if _not props_match?
		_then
			show("Spec property mismatch: Expected:", expected_prop, "Actual:", actual_prop)
			_if actual_prop _isnt _unset
			_then
				show(actual_prop.value, expected_prop.value)
			_endif 
			matches? << _false
		_endif
	_endloop
	_if _not matches?
	_then
		fail_str << write_string("Spec properties don't match for spec ", actual_spec_record.spec_name)
	_endif
	_self.assert_true(matches?, fail_str)
_endmethod
$

_pragma(classify_level=restricted,topic=MUnit)
_private _method eo_dm_test_case.unit_values_match?(actual, expected)
	## 
	##

	actual_converted << actual.convert_to(expected.unit)
	
	# Compare string versions of values to avoid coping with rounding errors for
	# unit values

	>> actual_converted.write_string = expected.write_string
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.get_asset(rwo_type, _gather field_and_value_pairs)
	## 
	## This returns the object of rwo_type with its field having the
	## given value

	_local pred
	_for field, value _over field_and_value_pairs.fast_elements_in_pairs()
	_loop
		_local p << predicate.eq(field,value)
		_if pred _is _unset
		_then 
			pred << p
		_else
			pred << pred.and(p)
		_endif
	_endloop
	
	assets << _self.ds_views[:electric].collections[rwo_type].select(pred)
	_if assets.size > 1
	_then
		_self.int!handle_more_than_one_asset(assets.size, rwo_type, pred)
	_endif
	_return assets.an_element()
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_private _method eo_dm_test_case.int!handle_more_than_one_asset(number, rwo_type, pred)
	##
	## Error handling in the case where more than one matching
	## asset was found in get_asset().
	##
	## The default implementation just writes a message out to the CLI.
	##
	## This could be subclassed to raise an error.
	##
	write("There are ",number," ", rwo_type," records satisfying ", pred)
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.when_running_design_transition_qm_routines()
	## 
	##

	database << _self.active_scheme_database()
	
	config_file << smallworld_product.get_resource_file( "qm_routine_config.xml", "data", :sweo_base_user_application )
        qm_config   << qm_configuration.new( config_file )

	en << ipa_qm_engine.new( database, qm_config )
	en.run_checks( :eo_qm_design_assurance, eo_qm_design_source.new( database ), :application, app )

	>> _self
	
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.when_ignoring_all_flags_created_in_design()
	## 
	##
	
	database << _self.active_scheme_database()

	ifm  << info_flag_manager.new( database )
	flags << rope.new_from_iter( ifm, :|flags()|, _unset, :this_alt_only?, _true )

	en << qm_engine.new( database, _unset )
	en.set_flags_status( flags, :ignore, "Ignored all flags" )

	>> _self
	
_endmethod
$

_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.when_posting_design()
	## 
	## 
	>> _self.post_design(_true)
_endmethod
$

_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.when_publishing_design()
	## 
	## 
	>> _self.publish_design(_true)
_endmethod
$


_pragma(classify_level=debug)
_private _method eo_dm_test_case.post_design(use_state_transition?) 
	##
	## Post the design.
	## If USE_STATE_TRANSITION? is _true, use state model
	## transitions to post the design.
	## If not, post the data directly (which is much quicker).
	##

	_if use_state_transition?
	_then
		_self.transition_design( _self.state_transitions_to_posted, "Posted" )
	_else
		_self.run_merge_and_post_scheme(_false)
	_endif
	>> _self
	
_endmethod
$

_pragma(classify_level=debug)
_private _method eo_dm_test_case.publish_design(use_state_transition?, _optional add_fake_transition_history?)
	## 
	## Publish the design.
	## If USE_STATE_TRANSITION? is _true, use state model
	## transitions to post the design.
	## If not, post the data directly (which is much quicker).
	##
	## If USE_STATE_TRANSITION? and ADD_FAKE_TRANSITION_HISTORY? is
	## _true, add transition history records to make it look like
	## the design has been through the "Publish" state.
	##
	## ADD_FAKE_TRANSITION_HISTORY? is ignored if
	## USE_STATE_TRANSITION? is _true.
	##
	## Note that using the state transition will only work if the
	## :default_state_model_name shared constant on the test is set
	## to "Electric Meta Publish Proposed" (or other state model
	## with a publish state that follows "In Design")
	##

	scheme << swg_dsn_admin_engine.active_scheme
	
	_if use_state_transition?
	_then
		_dynamic !current_application! << _self.current_application()

		_self.transition_design( _self.state_transitions_to_publish, "Design Complete" )
		_self.when_changing_design_status( "Publish" )
	_else
		_self.run_merge_and_post_scheme(_true)

		_if add_fake_transition_history? _is _true
		_then
			# Fake the transition history so that it will appear to be published
			_self.given_transition_history("In Design", "Publish", "In Design")
		_endif
	_endif
	
	swg_dsn_admin_engine.activate_scheme( scheme )

	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dm_test_case.when_transition_design_from_design_complete_to_in_design()
	## 
	## 
	>> _self.
		when_transitioning_active_design_to_future_state(
			equality_hash_table.new_with("Design Complete", "In Design"),
			"In Design",
			_self.current_application()
		)
_endmethod
$
_pragma(classify_level=debug)
_private _method eo_dm_test_case.transition_design( transitions, future_state, _optional assert_transition_is_successful? )
	## 
	##

	stub_method_helper.replace_method(swg_dsn_scheme, :|can_become_singular_state?|, _proc() >> _true _endproc)
	stub_method_helper.replace_method( swg_dsn_admin_engine, :|merge_scheme()|,
					   _proc()
						   >> property_list.new_with( :result, _true )
					   _endproc )

	stub_method_helper.replace_method(swo_qm_state_model_transition_engine,
					  :|flag_check_predicate()|,
					  _proc()
						  >> predicate.not
					  _endproc)
	
	>> _self.
		when_transitioning_active_design_to_future_state( transitions, future_state, _self.current_application(), assert_transition_is_successful? )
	
_endmethod
$

_pragma(classify_level=debug)
_private _method eo_dm_test_case.run_merge_and_post_scheme(keep_temporary_data?)
	##
	## Run swg_dsn_admin_engine.merge_and_post_scheme() on the
	## active scheme.
	## The keep_temporary_data? parameter will be set to
	## KEEP_TEMPORARY_DATA?.
	##
	_self.stub_number_of_steps_to_post_active_scheme_to_design_top()
	
	_dynamic !current_application! << _self.current_application()

	scheme << swg_dsn_admin_engine.active_scheme

	params << property_list.new_with(
			  :scheme, scheme,
			  :original_state, scheme.status.as_charvec(),
			  :project, scheme.project,
			  :original_project_state, scheme.project.status.as_charvec(),
			  :conflict_mode, :operator_intervention,
			  :interactive?, _false,
			  :keep_temporary_data?, keep_temporary_data?)
	
	swg_dsn_admin_engine.perform_short_transaction(_unset, :|merge_and_post_scheme()|, {params, scheme}, :suppress_auto_locking?, _true)	
_endmethod
$

_pragma(classify_level=debug)
_private _method eo_dm_test_case.stub_number_of_steps_to_post_active_scheme_to_design_top()
	## 
	## 
	# Always post only to the direct parent design
	_local me << _self 
	stub_method_helper.replace_method( swg_dsn_vmds_integrator, :|number_of_steps_to_post_active_scheme_to_design_top()|,
					   _proc()
						   _import me
						   >> me.number_of_steps_to_post_active_scheme_to_design_top
					   _endproc )

_endmethod
$

_pragma(classify_level=debug, topic={Munit})
_private _method eo_dm_test_case.active_scheme_database()
	## 
	##

	scheme << swg_dsn_admin_engine.active_scheme

	datasets << set.new_from( scheme.datasets )
	>> dataset_group.new( datasets )
	
_endmethod
$


_pragma(classify_level=debug, topic={Munit})
_method eo_dm_test_case.run_bare()
	## 
	## 
	_dynamic !current_application!

	# Starting the application before the test runs requires the
	# .properties slot to be set
	_if .properties _is _unset
	_then
		.properties << property_list.new()
	_endif
	
	!current_application! << _self.int!get_current_application()

	_super.run_bare()
_endmethod
$

_pragma(classify_level=debug)
_method eo_dm_test_case.activate_design(design)
	##
	## Subclassed to speed up the tests.
	## Super's version would set up the job queue and run any jobs
	## that are created by the transition. However, in this case we
	## know there won't be any, so that's unecessary overhead.
	##
	swg_dsn_admin_engine.activate_design( design )
	_if design.status ~= _self.writable_design_status
	_then 
		swg_dsn_admin_engine.perform_short_transaction(_unset, :|find_and_perform_transition()|, {design, design.status, _self.writable_design_status}, :suppress_auto_locking?, _true)
	_endif
_endmethod
$

#
# Test scheme relationships
#

# Current design

_pragma(classify_level=debug)
_method eo_dm_test_case.then_the_number_of_records_inserted_in_the_current_design_according_to_scheme_relationships_is( table_name, num_expected )
	##
	##

	>> _self.then_the_number_of_records_inserted_in_the_design_according_to_scheme_relationships_is( swg_dsn_admin_engine.active_scheme, table_name, num_expected )
_endmethod
$


_pragma(classify_level=debug)
_method eo_dm_test_case.then_the_number_of_records_updated_in_the_current_design_according_to_scheme_relationships_is( table_name, num_expected )
	##
	##

	>> _self.then_the_number_of_records_updated_in_the_design_according_to_scheme_relationships_is( swg_dsn_admin_engine.active_scheme, table_name, num_expected )
_endmethod
$



_pragma(classify_level=debug)
_method eo_dm_test_case.then_the_number_of_records_inserted_in_the_design_according_to_scheme_relationships_is( design, table_name, num_expected )
	##
	##

	num_actual << _self.number_of_records_modified_in_the_design_according_to_scheme_relationships( design, table_name, 1 )

	_self.assert_equals( num_expected, num_actual,
			     write_string( "Design should have ", num_expected, " ", table_name, 
					   " records inserted in ", design, ", but it has ", num_actual ))

	>> _self
_endmethod
$


_pragma(classify_level=debug)
_method eo_dm_test_case.then_the_number_of_records_updated_in_the_design_according_to_scheme_relationships_is( design, table_name, num_expected )
	##
	##

	num_actual << _self.number_of_records_modified_in_the_design_according_to_scheme_relationships( design, table_name, 2)

	_self.assert_equals( num_expected, num_actual,
			     write_string( "Design should have ", num_expected, " ", table_name, 
					   " records updated in ", design, ", but it has ", num_actual ))

	>> _self
_endmethod
$




_pragma(classify_level=debug)
_private _method eo_dm_test_case.number_of_records_modified_in_the_design_according_to_scheme_relationships( design, table_name, operation )
	##
	## Returns the count of scheme relationship records associated
	## with
	## DESIGN - a scheme record
	## TABLE_NAME - the name of source collection of interest
	## OPERATION - 1 insert, 2 update, 3 delete
	##

	_local recs <<  swg_dsn_scheme_relationship.get_for_scheme( design, _unset, _unset, operation )
	_local num_actual << 0

	table_code << swg_dsn_admin_engine.table_name_to_code( table_name )

	_for a_scheme_rel _over recs.fast_elements()
	_loop
		_if a_scheme_rel.table_code = table_code
		_then
			num_actual +<< 1
		_endif
	_endloop

	>> num_actual
_endmethod
$

_pragma(classify_level=debug)
_method eo_dm_test_case.stub_get_option(a_class, _gather keys_and_values)
	
	## Stub the get_option() method on A_CLASS to return the values provided in KEYS_AND_VALUES
	## This is intended to be used by tests that use an application that does not include
	## the options plugin.
	## For example:
	## To return :ed_structure_tolerance and :et_structure+_tolerance as 35' and :eo_auto_attach as true
	## tol << unit_value.new( 35, :feet )
	## _self.stub_get_option(:ed_structure_tolerance, tol, :et_structure_tolerance, tol, :eo_auto_attach, _true)
	
	_local data << property_list.new_from_gathered(keys_and_values)
	
	stub_method_helper.replace_method( a_class, :|get_option()|, 
		_proc(option) 
			_import data
			_return data[option]
		_endproc)
	
_endmethod
$
