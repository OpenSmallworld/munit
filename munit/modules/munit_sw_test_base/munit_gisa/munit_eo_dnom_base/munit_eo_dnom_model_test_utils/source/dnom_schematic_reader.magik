#% text_encoding = iso8859_1
_package sw

_pragma(classify_level=debug)
def_slotted_exemplar(:dnom_schematic_reader,
	##
	## Reads given DNOM XML with a schematic and creates
	## an object model using dnom_schematic_objects.
	## Performs basic sanity check of the file by confronting it
	## with the DNOM model from the XSD.
	##
	## api: dnom_schematic_reader.new(FILEPATH)
	## 
	{
		{:filepath, _unset},
		{:xml, _unset},
		{:types, _unset}, # DNOM types read from the XSD from the sw_dnom_model
		{:refs, _unset}, # stores dnom reference objects keys by the dnom_obj_id
		{:connections, _unset}, # stores sets of dnom_obj_ids grouped by common coordinates in order to find connections between objects
		{:substation, _unset} # link to the top level element of the scehamtic model (skips the distribution system as irrelevant)
	}, _unset)
$

_pragma(classify_level=debug)
dnom_schematic_reader.define_slot_access(:substation, :read, :public)
$

_pragma(classify_level=debug)
dnom_schematic_reader.define_slot_access(:refs, :read, :public)
$

_pragma(classify_level=debug)
dnom_schematic_reader.define_slot_access(:connections, :read, :public)
$

_pragma(classify_level=restricted)
_private _method dnom_schematic_reader.magik_name(xml_name)
	##
	## Returns a lower cased magik symbol from the given XML_NAME
	## e.g. maps ReferenceObject to :reference_object for easier
	## interaction with dnom_schematic_objects.
	## Does not list all possible names, only ones which are
	## actually in use in the current DNOM schematic implementation.
	##
	_constant mapping <<
		equality_property_list.new_with(
			"Id", :id,
			"Name", :name,
			"Substation", :substation,
			"DnomObjId", :dnom_obj_id,
			"ObjectType", :object_type,
			"SymbolPlacement", :symbol_placement,
			"GeometryType", :geometry_type,
			"X", :x,
			"Y", :y,
			"Rotation", :rotation,
			"ReferenceObject", :reference_object,
			"PolyPlacement", :poly_placement,
			"Vertex", :vertex,
			"LabelPlacement", :label_placement,
			"Text", :text,
			"CharacterRotation", :character_rotation,
			"ConnectionPoint", :connection_point,
			"PolyVertex", :poly_vertex,
			"xs:string", :string,
			"xs:double", :string,
			"xs:int", :string,
			"eLablePlacementConnectionPoint", :string,
			"PointPlacement", :point_placement
			)
	mapped << mapping[xml_name]
	_if mapped _is _unset
	_then
		msg << write_string("Unknown xml to magik name mapping for ", xml_name)
		_self.assert_not_unset(mapped, msg)
		condition.raise(:error, :string, msg)
	_endif	
	_return mapped
_endmethod
$

_pragma(classify_level=debug)
_method dnom_schematic_reader.new(filepath)
	## 
	## Create a new instance of the class that will read the XML
	## file from the FILEPATH
	## Caches the DNOM model from the XSD.
	##
	copy << _clone
	_if .types _is _unset
	_then
		.types << dnom_xsd_parser.get_types()
	_endif
	copy.read_file(filepath, .types)
	_return copy
_endmethod
$

_pragma(classify_level=debug)
_method dnom_schematic_reader.read_file(filepath, types)
	## Use .new()
	.types << types
	.filepath << filepath
	.xml << simple_xml.read_document_file(.filepath)
	.refs << equality_hash_table.new()
	.connections << equality_hash_table.new()
	_self.read_substation()
_endmethod
$

_pragma(classify_level=debug)
_private _method dnom_schematic_reader.assert(cond, _gather cause)
	##
	## Check if the COND is valid, if not raises an error condition
	## with strings combined from the CAUSE
	##
	_if _not cond
	_then
		condition.raise(:error, :string, write_string(_scatter cause))
	_endif	
_endmethod
$

_pragma(classify_level=debug)
_private _method dnom_schematic_reader.xml_substation
	##
	## Return simple_xml_element for the substation
	##
	distribution_system << .xml.top_element
	_self.assert(distribution_system _isnt _unset, "Cannot read DistributionSystem from the file")

	substation << distribution_system.elements.an_element()
	_self.assert(substation _isnt _unset, "Cannot read Substation from the file")
	
	_return substation	 
_endmethod
$

_pragma(classify_level=debug)
_private _method dnom_schematic_reader.read_substation()
	##
	## Reads the xml element for the substation, in recursive reads
	## the whole file, field by field using the .read_xml_element()
	##
	.substation << _self.read_xml_element(_self.xml_substation, "Substation")
_endmethod
$

_pragma(classify_level=restricted)
_private _method dnom_schematic_reader.read_xml_element(xml_elem, xsd_typename, _optional parent)
	##
	## Reads and processes the XML_ELEM into dnom_schematic_object.
	## XSD_TYPENAME is the DNOM type name from the XSD (which sometimes 
	## differs from the xml tag name).
	## For simple types reads the field value into the object,
	## for complex types calls the read_xml_element in recurvie or
	## calls a reflective methods in a form read_sometypenema()
	## with an aim to extend the read_xml_element().
	##
	object << dnom_schematic_object.new()
	xml_type << xml_elem.type
	object[:int!xml] << xml_elem
	object[:int!xsd_typename] << _self.magik_name(xsd_typename)
	object[:int!tag_name] << _self.magik_name(xml_elem.type)
	object[:int!dsr] << _self
	_if parent _isnt _unset
	_then
		object[:int!parent] << parent
	_endif
	
	_for elem _over xml_elem.elements.fast_elements()
	_loop
		field_name << elem.type		
		magik_field_name << _self.magik_name(field_name)
		field_xsd_typename << .types.data_type_for_field(xsd_typename, field_name)
		magik_field_xsd_typename << _self.magik_name(field_xsd_typename)
		
		_if magik_field_xsd_typename _is :string
		_then
			_self.assert(object[magik_field_name] _is _unset, write_string("Duplicated value for ", field_name))
			object[magik_field_name] << elem.xml_contents

		_elif magik_field_xsd_typename _is :number
		_then
			_self.assert(object[magik_field_name] _is _unset , write_string("Duplicated value for ", field_name))
			object[magik_field_name] << elem.xml_contents.as_number()
		_else
			method_name << :read_ + magik_field_xsd_typename + :|()| # e.g. read_reference_object()
			_if _self.responds_to?(method_name)
			_then
				complex_object << _self.perform(method_name, elem, object)
			_else
				complex_object << _self.read_xml_element(elem, field_xsd_typename, object)
			_endif
			object.at_or_new_if_absent(magik_field_name, rope).add_last(complex_object)
		_endif		
	_endloop	
	_return object
_endmethod
$

_pragma(classify_level=restricted)
_method dnom_schematic_reader.read_reference_object(xml_elem, parent)
	##
	## Reads ReferenceObject from the xml element.
	## Stores reference object inunded  the .refs slot.
	##
	ref << _self.read_xml_element(xml_elem, "ReferenceObject", parent)
	_self.assert(_not .refs.includes_key?(ref.dnom_obj_id), "There is an already a reference object with DnomObjId=", ref.dnom_obj_id)

	.refs[ref.dnom_obj_id] << ref
	_return ref
_endmethod
$


_pragma(classify_level=restricted)
_method dnom_schematic_reader.read_poly_vertex(xml_elem, parent)
	##
	## Reads PolyVertex
	## If the PolyVertex belongs to a reference object,
	## then stores adds its coordinates to the .connections.
	##
	vertex << _self.read_xml_element(xml_elem, "PolyVertex", parent)
	_if parent.int!parent.int!tag_name _is :substation
	_then
		_return vertex

	_else # reference_object
		ref << parent.int!parent
		vertex[:int!reference_object] << ref
		_self.register_connection(vertex, ref)
	_endif
	_return vertex
_endmethod
$

_pragma(classify_level=restricted)
_method dnom_schematic_reader.read_point_placement(xml_elem, parent)
	##
	## Reads PointPlacement (assumed ReferenceObject location) and
	## stores it in the .connections.
	##
	point << _self.read_xml_element(xml_elem, "PointPlacement", parent)
	point[:int!reference_object] << parent
	_self.register_connection(point, parent)
	_return point
_endmethod
$

_pragma(classify_level=restricted)
_private _method dnom_schematic_reader.register_connection(geo_object, reference_object)
	##
	## Takes given GEO_OBJECT (a dnom_shcematic_object with .x and
	## .y coordinates), and ats the REFERENCE_OBJECT to the common group
	##
	coord << _self.coordinate(geo_object)
	.connections.at_or_new_if_absent(coord, equality_set).add(reference_object.dnom_obj_id)
_endmethod
$

_pragma(classify_level=restricted)
_private _method dnom_schematic_reader.coordinate(object)
	##
	## Given dnom_schematic_object with x, y coordinates
	## converts them to integer value, rounding the number.
	## Uses integer as these can be compared without any issues,
	## when the actual coordinates do not matter for the
	## connectivity validation.
	##
	x << (object.x.as_number() * 1000).rounded
	y << (object.y.as_number() * 1000).rounded
	_return coordinate.new(x,y)
_endmethod
$

_pragma(classify_level=restricted)
_method dnom_schematic_reader.connected_reference_object_ids(geo_object)
	##
	## Returns set of DnomObjIds connected with given
	## dnom_schematic_object with .x and .y coordinates.
	## Excludes the ReferenceObject to which the given GEO_OBJECT belongs.
	coord << _self.coordinate(geo_object)
	own_id << geo_object.int!reference_object.dnom_obj_id
	refs_at_coordinate << .connections[coord]
	_if refs_at_coordinate _is _unset
	_then
		_return equality_set.new()
	_endif
	ids << refs_at_coordinate.copy()
	ids.remove(own_id)
	_return ids
_endmethod
$

