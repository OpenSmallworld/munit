#% text_encoding = iso8859_1
##
_package sw
$

_pragma(classify_level=debug)
##
def_slotted_exemplar(:eo_dnom_inc_update_itest_base, 
{
}, 
{:eo_dnom_base_case})
$

_pragma(classify_level=restricted)
## A list of golden files which don't match the calculated differences.
## In some cases a golden file is used by more than one test. For now we assume
## that if a golden file is incorrect for one test, it is incorrect for all -
## the assumption seems to be valid for now.
eo_dnom_inc_update_itest_base.define_shared_constant( :incorrect_golden_files, {
	}, :public )
$

_pragma(classify_level=restricted)
## Module name with the golden files for initial export used to find the
## differences in the incremental update export tests
eo_dnom_inc_update_itest_base.define_shared_constant(:initial_export_module_name, :munit_eo_dnom_station_export_tests, :private)
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.base_station_export_file_name_to_use(station_name)
	## Defines a file name of base station export file to be used
	## when comparing golden files. By default returns the given STATION_NAME.
	_return station_name
_endmethod
$

_pragma(classify_level=debug,topic={MUnit, Test})
_method eo_dnom_inc_update_itest_base.set_up()
	## 
	##
	_super.set_up()

	.properties[:not_alive_substations] << rope.new()
	.properties[:alive_substations] << rope.new()
	
	
	.properties[:dont_want_increments_substations] << rope.new()
	.properties[:want_increments_substations] << rope.new()
	
	_self.set_properties_to_export_everything()

	.properties[:deterministic_identifiers_mode] << :inc_updates
_endmethod
$


_pragma(classify_level=debug,topic={MUnit, Test})
_method eo_dnom_inc_update_itest_base.tear_down()
	## 
	## 
	
	_super.tear_down()
	
	_for i_substation_id _over .properties[:not_alive_substations].fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _true )
	_endloop
	
	_for i_substation_id _over .properties[:alive_substations].fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _false )
	_endloop
	
	_for i_substation_id _over .properties[:dont_want_increments_substations].fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _true , _true)
	_endloop
	
	_for i_substation_id _over .properties[:want_increments_substations].fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _true, _false )
	_endloop
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_substations_are_not_alive(_gather substation_ids)
	## 
	## 

	_for i_substation_id _over substation_ids.fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _false )
		.properties[:not_alive_substations].add(i_substation_id)
	_endloop
	
	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_substations_want_increments(_gather substation_ids)
	## 
	## 

	_for i_substation_id _over substation_ids.fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata(i_substation_id, _true, _true)
		.properties[:want_increments_substations].add(i_substation_id)
	_endloop
	
	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_substations_dont_want_increments(_gather substation_ids)
	## 
	## 

	_for i_substation_id _over substation_ids.fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata(i_substation_id, _true, _false)
		.properties[:dont_want_increments_substations].add(i_substation_id)
	_endloop
	
	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_substations_are_alive(_gather substation_ids)
	## 
	## 

	_for i_substation_id _over substation_ids.fast_elements()
	_loop
		eo_dnom_test_helper.set_substation_live_status_in_metadata( i_substation_id, _true )
		.properties[:alive_substations].add(i_substation_id)
	_endloop
	
	>> _self 
	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_deterministic_project_ids()
	## 
	## Stub out the project ID creation logic so that it returns a deterministic
	## result that can be used in golden file comparisons. Without this, the project
	## ID will contain the scheme name, which is dependent on the machine name and
	## time the tests are run
	##
	_local test_framework << _self
	stub_method_helper.replace_method(eo_dnom_mapper,
		:|project_id_for_schemes()|,
		_proc(schemes)
			_import test_framework
			_local nondeterministic_project_id << _self.saved!project_id_for_schemes(schemes)
			_local latest_scheme << schemes.as_sorted_collection(_proc (o1, o2) _return o1.erfasst_am > o2.erfasst_am _endproc).an_element()

			_if test_framework.properties[:design].name = latest_scheme.name
			_then
				# This is the project created as part of the test, check the standard method would
				# have returned something, then return a deterministic value
				test_framework.assert_not_unset(nondeterministic_project_id, "Expected the default project ID to not be unset")
				_return write_string(test_framework.class_name(), " - mock_scheme")
			_else
				# Return the original value
				_return nondeterministic_project_id
			_endif
		_endproc
	)	
	>> _self 	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.potential_files(file_sets)
	##
	sets << rope.new(file_sets.size)
	_for i, file _over file_sets.fast_keys_and_elements()
	_loop		
		sets[i] << property_list.new_with(:substation, file + "_fullsub.xml",
						  :ortho_schematic, file + "_schem_ortho.xml",
						  :geo_schematic, file + "_schem_geo.xml")
	_endloop
	_return sets
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.present_goldenfiles(file_sets)
	## Returns the self.potential_files() filled with the actual goldenfiles,
	## e.g. a lack of the schem_geo goldenfile, indicates that it
	## should not be exported, the list is _unset there,
	## e.g. returns a rope of file_sets.size with elements:
	## property_list:
	## :substation 	"3_add_phase_cable.xml"
	## :ortho_schematic 	unset 
	## :geo_schematic 	unset 
	##	
	all_goldenfiles << sw_module_manager.module(_self.get_module_name).resource_files(_self.resource_path, _true, _false)
	goldenfiles << _self.potential_files(file_sets)
	present_goldenfiles << equality_property_list.new()
	_for file_set _over goldenfiles.fast_elements()
	_loop
		_for type, filename _over file_set.keys_and_elements()
		_loop
			files << all_goldenfiles.all_elements_satisfying(predicate.wild(:yourself, %*+filename))
			_self.assert_true(files.size <=1, write_string("Expected a one matching file for ", filename))
			_if type _is :substation
			_then
				substation_file << files.an_element()
				_if _self.assert_not_unset(substation_file, write_string("No substation goldenfile present for ", filename))
				_then
					substation_name << _self.read_substation_name_from_file(substation_file)
				_endif
				_if _self.assert_not_unset(substation_name, "Substation name not found")
				_then
					_self.assert_false(present_goldenfiles.includes_key?(substation_name), write_string("Duplicated substation golden files for ", substation_name))
				_endif				
				present_goldenfiles[substation_name] << file_set
			_endif			
			_if files.empty?
			_then
				file_set[type] << _unset
			_else
				file_set[type] << filename
			_endif
		_endloop
	_endloop	
	_return present_goldenfiles	
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.written_substation_files()
	## Creates a list similar with self.potential_files(), filled up
	## with actually exported files; to be compared with the result
	## of the self.present_goldenfiles()
	written_substations << equality_property_list.new()
	_for substation_name, substation_request _over .properties[:affected_substation_requests].fast_keys_and_elements()
	_loop
		file_set << property_list.new_with(:substation, _unset, :ortho_schematic, _unset, :geo_schematic, _unset)
		written_substations[substation_name] << file_set
		_for file _over substation_request[:output_files].fast_elements()
		_loop
			_if file.index_of_seq("PLACEMENTS_1_to_1_Geo-schematic") _isnt _unset
			_then
				file_set[:geo_schematic] << file

			_elif file.index_of_seq("PLACEMENTS_MV_ortho-schematic") _isnt _unset
			_then
				file_set[:ortho_schematic] << file
				
			_else
				file_set[:substation] << file
			_endif			
		_endloop
	_endloop	
	_return written_substations
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.then_the_file_sets_are_exported(_gather file_sets)
	##
	## FILE_SETS gives a list of names which this method uses to build up the
	## expected file names xml, schematics....)
	## If FILE_SETS is not set, then this means that no changes were expected
	## This method is called then_the_file_sets_are_exported only for compatibility
	## reasons, it is expected that in the incremental DNOM process there are no
	## files exported, but substation are only marked to be exported in a batch export.
	## Given FILE_SETS are going to be compared against the full substation exports
	## created in the export_differences_from_current_design_locally().
	##
	actual_sets << _self.written_substation_files()
	expected_sets << _self.present_goldenfiles(file_sets)
	_for substation_name, actual_set _over actual_sets.fast_keys_and_elements()
	_loop
		expected_set << expected_sets[substation_name]
		_self.assert_not_unset(expected_set, write_string("Unexpected substation written for ", substation_name, " probably a missing golden file"))
		_for type, actual_file_path _over actual_set.fast_keys_and_elements()
		_loop
			expected_filename << expected_set.default(property_list)[type]
			_if actual_file_path _isnt _unset
			_then
				_if _self.assert_not_unset(expected_filename, write_string("Looking at goldenfiles there should be no export for ", type, " to ", actual_file_path))
				_then
					_self.assert_xml_files_equals(expected_filename, actual_file_path, type _isnt :substation)
				_else #  only for the canonicalizer to create  a missing schematic files
					missing_file_name << _self.potential_files(file_sets).an_element()[type]
					_self.assert_xml_files_equals(missing_file_name, actual_file_path, _true)
				_endif				
			_else
				_self.assert_unset(expected_filename, write_string("Expected a file be written for ", expected_filename))
			_endif			
		_endloop		
	_endloop
	_return _self
_endmethod
$

_pragma(classify_level=debug)
_private _method eo_dnom_inc_update_itest_base.read_substation_name_from_file(filepath)
	##
	##
	substation_name << _unset
	xml_substation_element << simple_xml.read_element_file(filepath)	
	_if xml_substation_element.type _is :|Substation| 
	_then 
		_for xml_elem _over xml_substation_element.elements_matching_name("Name")
		_loop
			substation_name << xml_elem.xml_result
			_leave
		_endloop 
	_endif
	_self.assert_not_unset(substation_name, write_string("Substation name not found in ", filepath))
	_return substation_name
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.then_the_exported_file_set_matches(_gather file_set)
	## 
	## 
	>> _self.then_the_file_sets_are_exported(_scatter file_set)
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_design_changes_have_been_published()
	##
	## Merge up all changes in the current design, this puts the design in the
	## same state as if all changes before have been published and sent to the
	## ADMS
	##
	_self.publish_design(_false)
	>> _self
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.given_design_changes_have_been_posted()
	##
	## Merge up all changes in the current design, this puts the design in the
	## same state as if all changes before have been posted and sent to the
	## ADMS
	##
	_self.post_design(_false)
	>> _self
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.when_design_differences_are_exported_via_proposed_export(_gather circuit_ids_to_update_future_objects)
	##
	## Export design differences using the proposed export workflow
	##
	_for circuit_id _over circuit_ids_to_update_future_objects.fast_elements()
	_loop
		circuit << inc_update_itest_helper.get_circuit(circuit_id)
		eo_circuit_builder_engine_for_future_objects_alone.new().run(circuit)
	_endloop
	>> _self.when_design_differences_are_exported(:proposed)
_endmethod
$

_pragma(classify_level=debug)
_method eo_dnom_inc_update_itest_base.when_design_differences_are_exported_via_as_built_export()
	##
	## Export design differences using the as-built export workflow
	##
	>> _self.when_design_differences_are_exported(:as_built)
_endmethod
$

_pragma(classify_level=debug)
_private _method eo_dnom_inc_update_itest_base.export_station(station_name)
	## 
	## 
	_self.given_a_station(station_name).
		when_the_station_is_exported()

	wrote_xmls << _self.properties[:written_substations].an_element()
	station_file << wrote_xmls[1]

	>> station_file	
_endmethod
$


_pragma(classify_level=debug)
_private _method eo_dnom_inc_update_itest_base.get_initial_export_file_for_station(station_name)
	## 
	## 

	station_name << sw_dnom_output_filename_generator.canonicalise_value(station_name)
	before_file_name << write_string(station_name, ".xml")
	before_file << smallworld_product.get_resource_file( before_file_name,
							     "data",
							     _self.initial_export_module_name )
	>> before_file
_endmethod
$
