#% text_encoding = iso8859_1
##
_package sw

_pragma(classify_level=debug)
##
## Singleton class which will generate unique deterministic CIM/DNOM identifiers for
## records which have been registered with the class.
##
## This is similar to sw_gisa_identifiers_for_update_tests, but is modified to cope
## with maintaining deterministic ID's once the data has been posted as part of a
## design transition.
##
## When records (and nodes) are posted, they are no longer equal to there un-posted
## equivalent (to which the deterministic ID is set against), so this class compares
## records to the list of records that have a deterministic ID via the records 
## collection name and ID, rather than using the equality_hash_table's equality function.
##
## This method involves looping over the records is the equality_hash_table which is
## slower than the method using by sw_gisa_identifiers_for_update_tests and hence this
## class should only be used when really needed (that is data is being posted and then
## exported again.)
##
## The class is also capable to deal with objects created and
## then deleted in the same design. In order to that the ids
## property has to store a mapping between a plain id of the
## deleted object and the assigned deterministic id, e.g.
## db_id -> deterministic_id_1 , instead of using the rwo as a key.
##
## To register IDs for records, set the IDS shared variable on this class. This
## should be an equality_hash_table which maps an RWO to an identifier.
##
## To replace the default identifier generation with this class, call:
##   sw_gisa_identifiers_for_update_tests.replace_identifier_manager()
## 
def_slotted_exemplar(:sw_gisa_identifiers_for_posting_data_tests,{},
	:sw_gisa_deterministic_identifiers)
$

_pragma(classify_level=debug)
sw_gisa_identifiers_for_posting_data_tests.define_shared_constant(:replace_id_for_network_element, _false, :private)
$

_pragma(classify_level=debug)
## IDS is a hash table indexed by RWO record holding the id assigned
## to the record in CIM/DNOM
sw_gisa_identifiers_for_posting_data_tests.define_shared_variable(:ids, _unset, :public)
$

_pragma(classify_level=debug)
_method sw_gisa_identifiers_for_posting_data_tests.collection_unique_id_for_rwo(rwo)
	##
	## Return an ID for RWO which is unique within its collection and
	## deterministic across test runs and posting of data
	##
	_local id << _unset
	# Check using source collection and ID for records
	_if rwo.responds_to?(:id) _andif
	    _not rwo.is_kind_of?(sw_cim_value_holder)
	_then		
		_for stored_rwo, stored_id _over _self.ids.fast_keys_and_elements()
		_loop
			_if stored_rwo.responds_to?(:id) _andif
			    stored_rwo.is_valid? _andif			    
			    stored_rwo.id = rwo.id _andif 
			    stored_rwo.source_collection.name = rwo.source_collection.name
			_then
				id << stored_id
				_leave
			_endif 
		_endloop
	_else
		id << _self.ids[rwo]
	_endif	

	_if id _is _unset
	_then
		id << rwo.perform(:key_value|()|).an_element() # .perform() is used to enable calling this method with sw_cim_value_holder as parameter
	_endif

	# Check for stored plain ids in case of objects which has been
	# created and then deleted in the same design.
	_if (deleted_id << _self.ids[id]) _isnt _unset
	_then
		_return deleted_id
	_endif	

	# Finally, if not found, return the records actual ID
	_return id
_endmethod
$

_pragma(classify_level=debug)
_method sw_gisa_identifiers_for_posting_data_tests.unique_id_for_node(p_node)
	##
	## Return a unique ID for P_NODE that is maintained if the node is
	## posted as part of a design transition
	##

	# Check for nodes using the node ID
	_for stored_rec, stored_id _over _self.ids.fast_keys_and_elements()
	_loop
		_if stored_rec.is_kind_of?(node) _andif
		    stored_rec.is_valid? _andif		    
		    stored_rec.node_id.unique_id = p_node.node_id.unique_id
		_then
			_return stored_id
		_endif
	_endloop

	# Check for stored plain ids in case of objects which has been
	# created and then deleted in the same design.
	_if (new_node_id << _self.ids[p_node.node_id.unique_id]) _isnt _unset
	_then
		_return new_node_id
	_endif
	
	# Fallback to returning the nodes actual ID
	_return p_node.node_id.unique_id
_endmethod
$

