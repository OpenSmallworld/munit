#% text_encoding = iso8859_1

_package sw
$

_pragma(classify_level=debug)
##
## Test case for eo_cim_segment_mapper methods.
##
def_slotted_exemplar(:munit_eo_cim_segment_mapper_test,
	{
		{ :properties, _unset }
	},
	{:test_case})
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.set_up()
	## 
	## 

	.properties << property_list.new()

	_return _super.set_up()
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.test_get_cim_length_for_no_world_owner_returns_the_value_and_the_geometry_is_not_moved()
	## 
	## 

	_self.
		given_an_rwo().
		given_a_cim_resource_for_the_rwo().
		given_network_element_geometry_for_the_cim_resource().
		given_world_owner_for_the_network_element_geometry_is(_unset).
		when_get_cim_length_is_called().
		then_the_result_is("10.00").
		then_the_geometry_is_not_moved()
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.test_get_cim_length_for_world_owner_and_set_actual_length_returns_the_value_and_the_geometry_is_moved()
	## 
	## 

	_self.
		given_an_rwo().
		given_actual_length_for_the_rwo_is(10).
		given_a_cim_resource_for_the_rwo().
		given_network_element_geometry_for_the_cim_resource().
		given_world_owner_for_the_network_element_geometry_is(:world_owner).
		given_stubbed_method_move_geom_to_geographic_world_from_world_owner().
		when_get_cim_length_is_called().
		then_the_result_is("10.00").
		then_the_geometry_is_moved()
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.test_get_cim_length_for_world_owner_and_unset_actual_length_and_not_diagram_owner_returns_the_value()
	## 
	## 

	_self.
		given_an_rwo().
		given_actual_length_for_the_rwo_is(_unset).
		given_a_cim_resource_for_the_rwo().
		given_network_element_geometry_for_the_cim_resource().
		given_world_owner_for_the_network_element_geometry_is(:world_owner).
		given_world_owner_is_diagram_owner?_is(_false).
		given_stubbed_method_move_geom_to_geographic_world_from_world_owner().
		when_get_cim_length_is_called().
		then_the_result_is("10.00")
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.test_get_cim_length_for_world_owner_and_unset_actual_length_and_diagram_owner_returns_unset()
	## 
	## 

	_self.
		given_an_rwo().
		given_actual_length_for_the_rwo_is(_unset).
		given_a_cim_resource_for_the_rwo().
		given_network_element_geometry_for_the_cim_resource().
		given_world_owner_for_the_network_element_geometry_is(:world_owner).
		given_world_owner_is_diagram_owner?_is(_true).
		given_stubbed_method_move_geom_to_geographic_world_from_world_owner().
		when_get_cim_length_is_called().
		then_the_result_is(_unset)
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_an_rwo()
	## 

	length << length_value(1.0, :m)

        rwo << mock(:mock_rwo)
        stub(rwo).length.then_return(length)
        stub(rwo).calculated_length.then_return(length)

	.properties[:rwo] << rwo

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_actual_length_for_the_rwo_is(actual_length)
	## 
	## 

	stub(.properties[:rwo]).actual_length.then_return(actual_length)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_a_cim_resource_for_the_rwo()
	##
	##

	.properties[:cim_resource] << res << mock(:mock_cim_resource)

	rwo << .properties[:rwo]
	source_record << mock(:mock_source_record)
	stub(res).source_record.then_return(source_record)
	stub(source_record).source.then_return(rwo)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_network_element_geometry_for_the_cim_resource()
	## 
	## 

	cim_resource << .properties[:cim_resource]
	network_element << mock(:mock_network_element)
	geometry << mock(:mock_geometry)
	world << mock(:mock_world)

	stub(cim_resource).network_element.then_return(network_element)
	stub(network_element).geometry.then_return(geometry)
	stub(geometry).world.then_return(world)
	stub(world).unit_name.then_return(:m)
	stub(geometry).line_length.then_return(10)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_world_owner_for_the_network_element_geometry_is(value)
	## 
	## 

	stub_method_helper.replace_method(eo_cim_mapper, :|get_world_owner_for_geom()|,
					  _proc()
						  _import value
						  _return value
					  _endproc
			   )

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_world_owner_is_diagram_owner?_is(value)
	## 
	## 

	stub_method_helper.replace_method(eo_cim_segment_mapper, :|is_world_owner_diagram_owner?()|,
					  _proc()
						  _import value
						  _return value
					  _endproc
			   )

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.given_stubbed_method_move_geom_to_geographic_world_from_world_owner()
	## 

	_local props << .properties

	stub_method_helper.replace_method(eo_cim_segment_mapper,
					  :|move_geom_to_geographic_world_from_world_owner()|,
					  _proc(geom)
						  _import props
						  props[:used?] << _true
						  _return geom
					  _endproc)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.when_get_cim_length_is_called()
	##
	##

	.properties[:result] << eo_cim_segment_mapper.get_cim_length(.properties[:cim_resource], :m)

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.then_the_result_is(expected_result)
	##
	##

	_self.assert_equals(expected_result, .properties[:result])

	_return _self
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.then_the_geometry_is_not_moved()
	## 
	## 

	_self.assert_unset(.properties[:used?], "The geometry was moved from internal to geographoc world that was not expected")
_endmethod
$

_pragma(classify_level=debug)
_method munit_eo_cim_segment_mapper_test.then_the_geometry_is_moved()
	## 
	## 

	_self.assert_true(.properties[:used?], "The geometry was not moved from internal to geographoc world as expected")
_endmethod
$
