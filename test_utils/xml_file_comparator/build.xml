<project name="com.gesmallworld.xml_file_comparator" xmlns:ivy="antlib:org.apache.ivy.ant" default="publish">
  <description>Compile XML File Comparator</description>
    
  <property file="${xml_file_comparator.home}/build.properties"/>
  
  <property name="xml_file_comparator.home"   location="."/>
  <property name="xml_file_comparator.build.dir"   value="build"/>
  <property name="xml_file_comparator.classes.dir" value="classes"/>
  <property name="xml_file_comparator.src.dir"     value="src/main/java"/>
  <property name="xml_file_comparator.libs.dir"     value="libs"/>

  <property name="xml_file_comparator_test.build.dir"               value="build"/>
  <property name="xml_file_comparator_test.classes.dir"             value="test_classes"/>
  <property name="xml_file_comparator_test.src.dir"                 value="src/test/java"/>
  <property name="xml_file_comparator_test.resources.dir"           value="src/test/resources"/>
 
   <!-- Note: java_interop_libs_dir should be set to a directory where the magik.interop lib is available
       If required it can be set explicitly to use SMALLWORLD_GIS environment variable instead
       by setting this property via command line. i.e, -Djava_interop_libs_dir=%SMALLWORLD_GIS%/libs -->
  <!-- core.product.dir is inheritted from eo_cim/build.xml from where targets in this file will usually be called  -->
  <property name="java_interop_libs_dir"        value="${core.product.dir}/libs"/>

  <!-- dir where alll OSS dependencies will be retrieved -->
  <property name="xml_file_comparator.deps.libs.dir"        value="${xml_file_comparator.build.dir}/xml_file_comparator_libs"/>

  <property name="run.tests.jar.location" value="${xml_file_comparator_test.build.dir}/test/test-jar"/>
  <property name="run.tests.src.jar" value="${run.tests.jar.location}/${ant.project.name}.jar"/>
  <property name="run.tests.test.jar" value="${run.tests.jar.location}/${ant.project.name}-tests.jar"/>

  <target name="clean-task">
      <delete dir="${xml_file_comparator.build.dir}"/>
      <delete dir="${xml_file_comparator.classes.dir}"/>
      <delete dir="${xml_file_comparator_test.build.dir}"/>
      <delete dir="${xml_file_comparator_test.classes.dir}"/>
      <delete dir="${xml_file_comparator.libs.dir}"/>
  </target>

  <target name="fetch-xml-file-comparator-libs-task">
      <mkdir dir="${xml_file_comparator.deps.libs.dir}"/>
      <echo message="java_interop_libs_dir:                    ${java_interop_libs_dir}"/>
      <ivy:resolve conf="*" file="${xml_file_comparator.home}/ivy.xml"/>
      <ivy:retrieve pattern="${xml_file_comparator.deps.libs.dir}/[conf]/[artifact]-[revision].[ext]" conf="*" type="jar,bundle" />
  </target>

  <target name="compile-task" depends="fetch-xml-file-comparator-libs-task">
    <mkdir dir="${xml_file_comparator.classes.dir}"/>
    <javac srcdir="${xml_file_comparator.src.dir}" destdir="${xml_file_comparator.classes.dir}" includeantruntime="false" debug="true" target="1.8">
      <classpath>
        <fileset dir="${java_interop_libs_dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${xml_file_comparator.deps.libs.dir}/default">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </javac>
  </target>

  <target name="compile-test-task">
    <mkdir dir="${xml_file_comparator_test.classes.dir}"/>
    <javac srcdir="${xml_file_comparator_test.src.dir}" destdir="${xml_file_comparator_test.classes.dir}" includeantruntime="false" debug="true" target="1.8">
      <classpath>
        <fileset dir="${java_interop_libs_dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${xml_file_comparator.deps.libs.dir}/test">
          <include name="*.jar"/>
        </fileset>
        <pathelement location="${xml_file_comparator.classes.dir}"/>
      </classpath>
    </javac>
    <copy todir="${xml_file_comparator_test.classes.dir}" failonerror="false">
      <fileset dir="${xml_file_comparator_test.resources.dir}"/>
    </copy>
  </target>

  <target name="jar-task">
    <mkdir dir="${xml_file_comparator.build.dir}/META-INF" />
    <manifest file="${xml_file_comparator.build.dir}/META-INF/MANIFEST.MF">
       <attribute name = "Bundle-ManifestVersion" value="2"/>
       <attribute name = "Bundle-Name" value="XML File Comparator"/>
       <attribute name = "Bundle-SymbolicName" value="xml_file_comparator"/>
       <attribute name = "Import-Package" value="com.gesmallworld.magik.interop;version=&quot;[1.0,2)&quot;,com.gesmallworld.magik.commons.interop.annotations;version=&quot;[1.0,2)&quot;,org.xmlunit,org.xmlunit.builder,org.xmlunit.diff,org.xmlunit.input,javax.xml.bind,javax.xml.bind.annotation.adapters,javax.xml.datatype"/>
       <attribute name = "Export-Package" value="com.gesmallworld.xml_file_comparator"/>
       <attribute name = "Bundle-Activator" value="com.gesmallworld.magik.interop.JavaToMagikActivator"/>
    </manifest>

    <jar destfile="${xml_file_comparator.build.dir}/jars/${ant.project.name}-${version.number.complete}.jar"
         basedir="${xml_file_comparator.classes.dir}"
         manifest="${xml_file_comparator.build.dir}/META-INF/MANIFEST.MF" >
    </jar>
  </target>
  
    <target name="test-jar-task">
    <mkdir dir="${xml_file_comparator_test.build.dir}/jars" />
    <jar destfile="${xml_file_comparator_test.build.dir}/jars/${ant.project.name}-tests-${version.number.complete}.jar"
         basedir="${xml_file_comparator_test.classes.dir}"  >
    </jar>
  </target>

  <!-- publish all confs  -->
  <target name="ivy-publish-task">
    <echo message="ivy.conf.to.publish: ${ivy.conf.to.publish}" />
    <ivy:publish resolver="${publish.type}-rep" forcedeliver="true" conf="*" overwrite="true" revision="${version.number.complete}">
      <artifacts pattern="${xml_file_comparator.build.dir}/[type]s/[artifact]-[revision].[ext]"/>
    </ivy:publish>
  </target>

  <target name="clean-run-tests-task">
      <delete dir="${run.tests.jar.location}"/>
  </target>

  <target name="retrieve-tests-jar-task">
    <echo message="In retrieve-tests-jar-task......"/>
    <ivy:resolve file="ivy-run-tests.xml" conf="default"/>
    <ivy:retrieve pattern="${run.tests.jar.location}/[artifact].[ext]" conf="default"/>
  </target>


  <path id = "run.tests.classpath">
    <pathelement location = "${java_interop_libs_dir}" />
    <fileset dir="${run.tests.jar.location}">
      <include name="**/*.jar" />
    </fileset>
    <!-- <pathelement location = "${run.tests.src.jar}" /> -->
    <!-- <pathelement location = "${run.tests.test.jar}" /> -->
  </path>
  
  
 <target name="run-tests-task" description="run tests for this project">
    <echo message="run.tests.classpath is ${toString:run.tests.classpath}" />
    <sequential>
    <junit failureproperty="junit.failure" fork="true"  forkMode="once" showoutput="true" haltonerror="true" printsummary="true">
        <classpath refid = "run.tests.classpath" />
        <batchtest>
          <!-- Ideally would like to do below so that tests can be run from the retrieved artifact 
          but that will need some changes to XmlFileComparator to support comparing files from resources as well.
          So run tests from repo for now -->
<!--           <resources>
            <zipfileset src="${run.tests.test.jar}" includes="**/Test*.class"/>
          </resources>  -->
          <fileset dir="${xml_file_comparator_test.src.dir}">
             <include name="**/*Test.java"/>
          </fileset>
        </batchtest>
        <formatter type = "brief" usefile = "false" />
    </junit>
    <fail if="junit.failure" message="XmlFileComparator's  Unit test(s) failed.  See reports!"/>
    </sequential>
  </target>

  <target name="clean" depends="clean-task"
    description="clean this project"/>
    
  <target name="compile" depends="compile-task"
    description="compile this project"/>
    
  <target name="jar" depends="compile, jar-task"
    description="jar this project"/>

  <target name="compile-test" depends="compile-test-task"
    description="compile test code"/>

  <!--xpw target name="test-jar" depends="compile-test, test-jar-task"
    description="jar the test code"/-->

  <target name="publish-src-test" depends="jar, ivy-publish-task"
    description="publish this project"/>

  <target name="publish" depends="clean, publish-src-test"
    description="publish this project"/>

   <target name="run-tests-only" depends="clean-run-tests-task, retrieve-tests-jar-task, run-tests-task" 
    description="Runs tests this project using the pre-published src and test jars"/>

  <target name="publish-run-tests" depends="publish"
    description="publish this project"/>
 
</project>
