#% text_encoding = iso8859_1

_package sw
_pragma(classify_level=restricted, topic={cim_adapter})
## DESCRIPTION
## ===========================================================
##  
## PURPOSE and RESPONSIBILITIES
## ===========================================================
##
## CONSTRAINTS
## ===========================================================
##
## PUBLIC INTERFACES
## ===========================================================
## 
## REFERENCED CLASSES (MODULES)
## ===========================================================
##
## REFERENCED INTERFACES
## ===========================================================
##
##

def_slotted_exemplar( :eo_dm_example_test,
        {},
{:eo_dm_test_case})
$

eo_dm_example_test.define_shared_constant(
        :project_name,
        "eo-dm-tests",
        :private)
$

eo_dm_example_test.define_shared_constant(
        :design_name,
        "eo-dm-tests",
        :private)
$


_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
## Coordinate used as starting point for circuit creation
eo_dm_example_test.define_shared_constant(:checkpoint_name,
	:example_eo_dm_test,
	:public)
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
## Coordinate used as starting point for circuit creation
eo_dm_example_test.define_shared_constant(:start_coord,
	coordinate.new(-847711299.4, 504960200.5),
	:public)
$

_pragma(classify_level=restricted,topic=MUnit,usage=subclassable)
## Size used to extend bounds of created objects
eo_dm_example_test.define_shared_constant(:data_bounds_size,
	10000,
	_false)
$

_pragma(classify_level=restricted,topic=unit_testing)
_private _method eo_dm_example_test.one_time_setup_database()
        ##  Subclass this method if test case requires database to be
        ## updated prior to design creation.

	_dynamic !notify_database_data_changes?! << _false

	#test creation of substation
	a_substation << _self.create_ed_pole(_self.start_coord)
_endmethod
$

_pragma(classify_level=restricted,topic=unit_testing)
_method eo_dm_example_test.test_first()
        ##  Subclass this method if test case requires database to be
        ## updated prior to design creation.

	_self.assert_equals(_true, _not .rwo_set.empty?, "No setup performed on database!")
	
	#write("!!! FIRST !!!")
_endmethod
$

_pragma(classify_level=restricted,topic=unit_testing)
_method eo_dm_example_test.test_second()
        ##  Subclass this method if test case requires database to be
        ## updated prior to design creation.

	_self.assert_equals(_true, _not .rwo_set.empty?, "No setup performed on database!")
	
	#write("!!! SECOND !!!")
_endmethod
$

