#% text_encoding = iso8859_1
_package sw
$

_pragma(classify_level=restricted)
##
## This mixin provides method to start defined application
##
def_mixin(:eo_start_application_mixin)
$
_pragma(classify_level=debug,topic={MUnit, Test})
## Define which application to start
eo_start_application_mixin.define_shared_constant (
	:application_name,
	:sweo_dm_user,
	_true )
$

_pragma(classify_level=debug,topic={MUnit, Test})
_method eo_start_application_mixin.application(_optional p_application_name)
	## returns handle to application application_name
	## starts this application is it is not started already
	_local app_name << p_application_name.default( _self.application_name )
	_if (app << smallworld_product.application(app_name)) _is _unset _andif
	    (app_def << smallworld_product.application_definition(app_name)) _isnt _unset 
	_then
		# Start the application
		app << app_def.int!start()
		
		# Wait for 3 mins and time out
		_over 1.upto(6)
		_loop
			_thisthread.sleep(30000)
			_if (app << smallworld_product.application(app_name)) _isnt _unset _andif
			    app.active?
			_then
				#We've started.  Give it another 30secs to get comfy...
				write("App waking up: ",app)
				_thisthread.sleep(30000)
				_leave
			_endif
		_endloop
	_endif
	>> app
_endmethod
$
